USE [Things]
GO
/****** Object:  Table [dbo].[tb_B_ObjectProperty]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_ObjectProperty]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_ObjectProperty](
	[F_PropertyID] [bigint] NOT NULL,
	[F_PropertyName] [varchar](32) NOT NULL,
	[F_PropertyIdentifier] [varchar](32) NOT NULL,
	[F_PropertyUnit] [varchar](32) NULL,
	[F_ObjectTypeID] [int] NULL,
	[F_GroupTypeID] [char](1) NOT NULL,
	[F_PropertyTypeID] [char](1) NOT NULL,
	[F_DictionaryType] [varchar](1) NULL,
	[F_DictionaryID] [varchar](16) NULL,
	[F_DictionaryKey] [varchar](16) NULL,
	[F_DefaultValue] [varchar](32) NULL,
	[F_RegularFormula] [varchar](128) NULL,
	[F_IsOnlyRead] [bit] NOT NULL,
	[F_Memo] [varchar](128) NULL,
 CONSTRAINT [PK_tb_B_ObjectProperty] PRIMARY KEY CLUSTERED 
(
	[F_PropertyID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fun_SplitByComma]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_SplitByComma]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_SplitByComma] (@ObjectStr varchar(max))
RETURNS @temp TABLE(F_RowIndex int,F_ObjectID varchar(32))
BEGIN
	DECLARE @i int
	DECLARE @index int
	SET @index = 0
	
    SET @i = charindex('','',@ObjectStr)
    WHILE @i >= 1
    BEGIN
        INSERT INTO @temp VALUES(@index + 1,left(@ObjectStr,@i-1))
        SET @ObjectStr = substring(@ObjectStr,@i+1,len(@ObjectStr)-@i)
        SET @i = charindex('','',@ObjectStr)
        SET @index = @index + 1
    END
    IF @ObjectStr<>''''
       INSERT INTO @temp VALUES(@index + 1,@ObjectStr)
	RETURN
END
' 
END
GO
/****** Object:  Table [dbo].[tb_B_VirtualCompute]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_VirtualCompute]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_VirtualCompute](
	[F_VirtualNCode] [bigint] NOT NULL,
	[F_VirtualVLabel] [varchar](32) NOT NULL,
	[F_Formula] [varchar](max) NULL,
	[F_FromulaHtml] [varchar](max) NULL,
	[F_NAndV] [varchar](max) NULL,
	[F_MType] [char](1) NULL,
 CONSTRAINT [PK_tb_B_VirtualCompute_1] PRIMARY KEY CLUSTERED 
(
	[F_VirtualNCode] ASC,
	[F_VirtualVLabel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_NodeHourData]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_NodeHourData]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_NodeHourData](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_ReadingDate] [datetime2](0) NOT NULL,
	[F_StartHour] [datetime2](0) NULL,
	[F_StartValue] [numeric](18, 4) NULL,
	[F_EndHour] [datetime2](0) NULL,
	[F_EndValue] [numeric](18, 4) NULL,
	[F_EnergyData] [numeric](18, 4) NULL,
	[F_SynNdStatus] [bit] NULL,
	[F_SynEhStatus] [bit] NULL,
 CONSTRAINT [PK_tb_C_NodeHourData_1] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ValueLabel] ASC,
	[F_ReadingDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_PluginToEntity]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_PluginToEntity]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_PluginToEntity](
	[F_FunctionCode] [bigint] NOT NULL,
	[F_PluginCode] [bigint] NOT NULL,
	[F_EntityTreeNo] [int] NOT NULL,
	[F_EntityID] [bigint] NOT NULL,
 CONSTRAINT [PK_dbo.tb_A_PluginToEntity] PRIMARY KEY CLUSTERED 
(
	[F_PluginCode] ASC,
	[F_EntityTreeNo] ASC,
	[F_EntityID] ASC,
	[F_FunctionCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_B_EntityTreeType]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeType]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_EntityTreeType](
	[F_EntityTreeNo] [int] IDENTITY(1,1) NOT NULL,
	[F_EntityTreeName] [varchar](32) NOT NULL,
	[F_EntityTreeType] [char](1) NOT NULL,
	[F_TreeDepth] [smallint] NULL,
	[F_CreateUser] [varchar](32) NULL,
	[F_CreateDate] [datetime] NULL,
	[F_UpdateUser] [varchar](32) NULL,
	[F_UpdateDate] [datetime] NULL,
	[F_Memo] [varchar](256) NULL,
 CONSTRAINT [PK_tb_B_EntityTreeType] PRIMARY KEY CLUSTERED 
(
	[F_EntityTreeNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_EntityDayData]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_EntityDayData]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_EntityDayData](
	[F_EntityID] [bigint] NOT NULL,
	[F_EnergyTypeID] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_DataGranularity] [varchar](32) NOT NULL,
	[F_GranularityValue] [varchar](32) NOT NULL,
	[F_ReadingDate] [date] NOT NULL,
	[F_EnergyData] [numeric](18, 4) NULL,
	[F_WorkingData] [numeric](18, 4) NULL,
	[F_UnWorkingData] [numeric](18, 4) NULL,
	[F_FlexibleData] [numeric](18, 4) NULL,
	[F_PeakData] [numeric](18, 4) NULL,
	[F_ValleyData] [numeric](18, 4) NULL,
	[F_LevelData] [numeric](18, 4) NULL,
	[F_PeakCost] [money] NULL,
	[F_ValleyCost] [money] NULL,
	[F_LevelCost] [money] NULL,
	[F_EnergyCost] [money] NULL,
	[F_SynEmStatus] [bit] NULL,
 CONSTRAINT [PK_tb_C_EntityDayData_1] PRIMARY KEY CLUSTERED 
(
	[F_EntityID] ASC,
	[F_EnergyTypeID] ASC,
	[F_ValueLabel] ASC,
	[F_DataGranularity] ASC,
	[F_GranularityValue] ASC,
	[F_ReadingDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_EntityHourData]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_EntityHourData]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_EntityHourData](
	[F_EntityID] [bigint] NOT NULL,
	[F_EnergyTypeID] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_DataGranularity] [varchar](32) NOT NULL,
	[F_GranularityValue] [varchar](32) NOT NULL,
	[F_ReadingDate] [datetime2](0) NOT NULL,
	[F_EnergyData] [numeric](18, 4) NULL,
	[F_SynEdStatus] [bit] NULL,
 CONSTRAINT [PK_tb_C_EntityHourData] PRIMARY KEY CLUSTERED 
(
	[F_EntityID] ASC,
	[F_EnergyTypeID] ASC,
	[F_ValueLabel] ASC,
	[F_DataGranularity] ASC,
	[F_GranularityValue] ASC,
	[F_ReadingDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_EntityLatelyNode]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_EntityLatelyNode]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_EntityLatelyNode](
	[F_EntityID] [bigint] NOT NULL,
	[F_ReadingDate] [date] NOT NULL,
	[F_EnergyTypeID] [bigint] NOT NULL,
	[F_DataGranularity] [varchar](32) NOT NULL,
	[F_NodeCode] [bigint] NOT NULL,
 CONSTRAINT [PK_tb_C_EntityLatelyNode] PRIMARY KEY CLUSTERED 
(
	[F_EntityID] ASC,
	[F_EnergyTypeID] ASC,
	[F_DataGranularity] ASC,
	[F_ReadingDate] ASC,
	[F_NodeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_EntityMonthData]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_EntityMonthData]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_EntityMonthData](
	[F_EntityID] [bigint] NOT NULL,
	[F_EnergyTypeID] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_DataGranularity] [varchar](32) NOT NULL,
	[F_GranularityValue] [varchar](32) NOT NULL,
	[F_ReadingYear] [smallint] NOT NULL,
	[F_ReadingMonth] [smallint] NOT NULL,
	[F_EnergyData] [numeric](18, 4) NULL,
	[F_WorkingData] [numeric](18, 4) NULL,
	[F_UnWorkingData] [numeric](18, 4) NULL,
	[F_FlexibleData] [numeric](18, 4) NULL,
	[F_PeakData] [numeric](18, 4) NULL,
	[F_ValleyData] [numeric](18, 4) NULL,
	[F_LevelData] [numeric](18, 4) NULL,
	[F_PeakCost] [money] NULL,
	[F_ValleyCost] [money] NULL,
	[F_LevelCost] [money] NULL,
	[F_EnergyCost] [money] NULL,
	[F_DJtceData] [numeric](18, 6) NULL,
	[F_DLtceData] [numeric](18, 6) NULL,
	[F_DataSource] [varchar](1) NULL,
 CONSTRAINT [PK_tb_C_EntityMonthData] PRIMARY KEY CLUSTERED 
(
	[F_EntityID] ASC,
	[F_EnergyTypeID] ASC,
	[F_ValueLabel] ASC,
	[F_DataGranularity] ASC,
	[F_GranularityValue] ASC,
	[F_ReadingYear] ASC,
	[F_ReadingMonth] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_EntitySplitNode]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_EntitySplitNode]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_EntitySplitNode](
	[F_EntityID] [bigint] NOT NULL,
	[F_ReadingDate] [date] NOT NULL,
	[F_EnergyTypeID] [bigint] NOT NULL,
	[F_DataGranularity] [varchar](32) NOT NULL,
	[F_NodeCode] [bigint] NOT NULL,
	[F_GranularityValue] [varchar](32) NULL,
	[F_Rate] [numeric](18, 2) NULL,
 CONSTRAINT [PK_tb_C_EntitySplitNode] PRIMARY KEY CLUSTERED 
(
	[F_EntityID] ASC,
	[F_EnergyTypeID] ASC,
	[F_DataGranularity] ASC,
	[F_ReadingDate] ASC,
	[F_NodeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_ExceptionData]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_ExceptionData]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_ExceptionData](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ReadingDate] [datetime2](0) NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_DataValue] [numeric](18, 4) NULL,
	[F_ExceptionCode] [smallint] NULL,
	[F_SystemDate] [datetime2](0) NULL,
	[F_IsRepair] [bit] NULL,
 CONSTRAINT [PK_tb_C_ExceptionData_1] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ReadingDate] ASC,
	[F_ValueLabel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_InstantDayData]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_InstantDayData]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_InstantDayData](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_ReadingDate] [date] NOT NULL,
	[F_MaxValue] [numeric](18, 4) NULL,
	[F_MaxDate] [datetime2](0) NULL,
	[F_MinValue] [numeric](18, 4) NULL,
	[F_MinDate] [datetime2](7) NULL,
	[F_AvgValue] [numeric](18, 4) NULL,
	[F_Status] [bit] NULL,
	[F_SynStatus] [bit] NULL,
 CONSTRAINT [PK_tb_C_InstantDayData_1] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ValueLabel] ASC,
	[F_ReadingDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_InstantMonthData]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_InstantMonthData]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_InstantMonthData](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_ReadingYear] [smallint] NOT NULL,
	[F_ReadingMonth] [smallint] NOT NULL,
	[F_MaxValue] [numeric](18, 4) NULL,
	[F_MaxDate] [datetime2](0) NULL,
	[F_MinValue] [numeric](18, 4) NULL,
	[F_MinDate] [datetime2](0) NULL,
	[F_AvgValue] [numeric](18, 4) NULL,
 CONSTRAINT [PK_tb_C_InstantMonthData] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ValueLabel] ASC,
	[F_ReadingYear] ASC,
	[F_ReadingMonth] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_LatelyData]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_LatelyData]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_LatelyData](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_ReadingDate] [datetime2](0) NOT NULL,
	[F_SystemDate] [datetime2](0) NULL,
	[F_DataValue] [numeric](18, 4) NULL,
	[F_IsRepair] [bit] NULL,
 CONSTRAINT [PK_tb_C_LatelyData_1] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ValueLabel] ASC,
	[F_ReadingDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_NodeDayData]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_NodeDayData]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_NodeDayData](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_ReadingDate] [date] NOT NULL,
	[F_EnergyData] [numeric](18, 4) NULL,
	[F_WorkingData] [numeric](18, 4) NULL,
	[F_UnWorkingData] [numeric](18, 4) NULL,
	[F_FlexibleData] [numeric](18, 4) NULL,
	[F_SynNmStatus] [bit] NULL,
 CONSTRAINT [PK_tb_C_NodeDayData_1] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ValueLabel] ASC,
	[F_ReadingDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_NodeMonthData]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_NodeMonthData]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_NodeMonthData](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_ReadingYear] [smallint] NOT NULL,
	[F_ReadingMonth] [smallint] NOT NULL,
	[F_EnergyData] [numeric](18, 4) NULL,
	[F_WorkingData] [numeric](18, 4) NULL,
	[F_UnWorkingData] [numeric](18, 4) NULL,
	[F_FlexibleData] [numeric](18, 4) NULL,
 CONSTRAINT [PK_tb_C_NodeMonthData_1] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ValueLabel] ASC,
	[F_ReadingYear] ASC,
	[F_ReadingMonth] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_B_EntityTreeModel]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeModel]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_EntityTreeModel](
	[F_EntityTreeNo] [int] NOT NULL,
	[F_EntityID] [bigint] NOT NULL,
	[F_ParentID] [bigint] NOT NULL,
	[F_EntityName] [varchar](128) NOT NULL,
	[F_EntitySName] [varchar](32) NULL,
	[F_EntityDepth] [smallint] NULL,
	[F_ObjectGroup] [varchar](1) NULL,
	[F_TemplateID] [bigint] NULL,
	[F_NodeTemplate] [bigint] NULL,
	[F_EnergyTypeID] [bigint] NULL,
	[F_DeviceTypeID] [bigint] NULL,
	[F_IsHasChild] [bit] NULL,
	[F_IsDisplay] [bit] NULL,
	[F_OrderTag] [varchar](16) NULL,
	[F_MapTag] [varchar](50) NULL,
 CONSTRAINT [PK_tb_B_EntityTreeModel] PRIMARY KEY CLUSTERED 
(
	[F_EntityTreeNo] ASC,
	[F_EntityID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_B_EntityTreeProperty]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeProperty]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_EntityTreeProperty](
	[F_EntityTreeNo] [int] NOT NULL,
	[F_EntityID] [bigint] NOT NULL,
	[F_PropertyID] [bigint] NOT NULL,
	[F_PropertyValue] [varchar](512) NOT NULL,
	[F_StartYM] [date] NOT NULL,
	[F_EndYM] [date] NULL,
	[F_UpdateDate] [datetime2](0) NULL,
	[F_UpdateUser] [varchar](32) NULL,
 CONSTRAINT [PK_tb_B_EntityProperty] PRIMARY KEY CLUSTERED 
(
	[F_EntityTreeNo] ASC,
	[F_EntityID] ASC,
	[F_PropertyID] ASC,
	[F_StartYM] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityPropertyValue]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityPropertyValue]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityPropertyValue] (
	@EntityID bigint,
	@PropertyTag varchar(32)
) RETURNS varchar(512) 
BEGIN
	DECLARE @PropertyValue varchar(512)
	
	SELECT
		@PropertyValue = A.F_PropertyValue
	FROM dbo.tb_B_EntityTreeProperty A,
		dbo.tb_B_ObjectProperty B
	WHERE A.F_EntityID = @EntityID
		AND A.F_EndYM = ''9999-12-31''
		AND B.F_PropertyIdentifier = @PropertyTag
		AND A.F_PropertyID = B.F_PropertyID
	RETURN ISNULL(@PropertyValue,'''')
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyDLStandardCoal]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyDLStandardCoal]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyDLStandardCoal] (
	@F_EnergyTypeID bigint,
	@F_EnergyData numeric(18,4)
) RETURNS numeric(18,6)
BEGIN
	DECLARE @Formula numeric(18,4)
	DECLARE @Rate varchar(16)
	SELECT @Rate = dbo.fun_GetEntityPropertyValue(@F_EnergyTypeID,''P1_CoalRatio_DL'')
	IF @Rate <> '''' SET @Formula = @Rate
	RETURN @Formula * @F_EnergyData
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyDJStandardCoal]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyDJStandardCoal]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyDJStandardCoal] (
	@F_EnergyTypeID bigint,
	@F_EnergyData numeric(18,4)
) RETURNS numeric(18,6)
BEGIN
	DECLARE @Formula numeric(18,4)
	DECLARE @Rate varchar(16)
	SELECT @Rate = dbo.fun_GetEntityPropertyValue(@F_EnergyTypeID,''P1_CoalRatio_DJ'')
	IF @Rate <> '''' SET @Formula = @Rate
	RETURN @Formula * @F_EnergyData
END
' 
END
GO
/****** Object:  Table [dbo].[tb_B_DictTreeType]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeType]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_DictTreeType](
	[F_DictTreeNo] [int] NOT NULL,
	[F_DictTreeName] [varchar](32) NOT NULL,
	[F_TreeDepth] [smallint] NULL,
	[F_CreateUser] [varchar](32) NULL,
	[F_CreateDate] [datetime] NULL,
	[F_UpdateUser] [varchar](32) NULL,
	[F_UpdateDate] [datetime] NULL,
	[F_Memo] [varchar](256) NULL,
 CONSTRAINT [PK_tb_B_DictTreeType] PRIMARY KEY CLUSTERED 
(
	[F_DictTreeNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_B_ObjectType]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_ObjectType]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_ObjectType](
	[F_ObjectTypeID] [int] NOT NULL,
	[F_ObjectTypeName] [varchar](32) NOT NULL,
	[F_ObjectTypeIndex] [int] NULL,
 CONSTRAINT [PK_tb_B_ObjectType] PRIMARY KEY CLUSTERED 
(
	[F_ObjectTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_B_DictTreeModel]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeModel]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_DictTreeModel](
	[F_DictTreeNo] [int] NOT NULL,
	[F_GroupID] [bigint] NOT NULL,
	[F_ParentID] [bigint] NOT NULL,
	[F_GroupName] [varchar](32) NOT NULL,
	[F_GroupDepth] [smallint] NULL,
	[F_ObjectGroup] [varchar](1) NULL,
	[F_ObjectTypeID] [int] NULL,
	[F_IsHasChild] [bit] NULL,
	[F_GroupTag] [varchar](32) NULL,
 CONSTRAINT [PK_tb_B_DictTreeModel] PRIMARY KEY CLUSTERED 
(
	[F_DictTreeNo] ASC,
	[F_GroupID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_B_DictTreeProperty]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeProperty]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_DictTreeProperty](
	[F_DictTreeNo] [int] NOT NULL,
	[F_GroupID] [bigint] NOT NULL,
	[F_PropertyID] [bigint] NOT NULL,
	[F_OrderNum] [int] NULL,
	[F_DecimalDigits] [smallint] NULL,
	[F_IsNull] [bit] NULL,
	[F_Examples] [varchar](256) NULL,
	[F_PortraitID] [bigint] NULL,
 CONSTRAINT [PK_tb_B_TreeNodeProperty] PRIMARY KEY CLUSTERED 
(
	[F_DictTreeNo] ASC,
	[F_GroupID] ASC,
	[F_PropertyID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityPropertyValueByYm]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityPropertyValueByYm]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityPropertyValueByYm] (
	@EntityID bigint,
	@PropertyTag varchar(16),
	@Year int,
	@Month int
) RETURNS varchar(512) 
BEGIN
	DECLARE @PropertyValue varchar(512)
	DECLARE @GroupTypeID varchar(1)
	
	SELECT 
		@GroupTypeID = A.F_GroupTypeID
	FROM dbo.tb_B_ObjectProperty A,
		dbo.tb_B_DictTreeProperty B,
		dbo.tb_B_EntityTreeModel C
	WHERE C.F_EntityID = @EntityID
		AND A.F_PropertyIdentifier = @PropertyTag
		AND C.F_TemplateID = B.F_GroupID
		AND B.F_PropertyID = A.F_PropertyID
	IF @GroupTypeID = ''B''
	BEGIN
		SELECT
			@PropertyValue = A.F_PropertyValue
		FROM dbo.tb_B_EntityTreeProperty A,
			dbo.tb_B_ObjectProperty B
		WHERE A.F_EntityID = @EntityID
			AND CAST(@Year AS VARCHAR) + ''-'' + CAST(@Month AS VARCHAR) + ''-1'' BETWEEN A.F_StartYM AND A.F_EndYM
			AND B.F_PropertyIdentifier = @PropertyTag
			AND A.F_PropertyID = B.F_PropertyID
	END
	ELSE
	BEGIN
		SELECT
			@PropertyValue = A.F_PropertyValue
		FROM dbo.tb_B_EntityTreeProperty A,
			dbo.tb_B_ObjectProperty B
		WHERE A.F_EntityID = @EntityID
			AND A.F_EndYM = ''9999-12-31''
			AND B.F_PropertyIdentifier = @PropertyTag
			AND A.F_PropertyID = B.F_PropertyID
	END
		
	RETURN @PropertyValue
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyCost]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyCost]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyCost] (
	@F_EnergyTypeID bigint,
	@F_EnergyData numeric(18,4),
	@F_Year int,
	@F_Month int
) RETURNS money
BEGIN
	DECLARE @Formula numeric(18,4)
	DECLARE @Price varchar(16)
	SELECT @Price = dbo.fun_GetEntityPropertyValueByYm(@F_EnergyTypeID,''P_UnitPrice'',@F_Year,@F_Month)
	IF @Price <> '''' SET @Formula = @Price
	RETURN ISNULL(@Formula * @F_EnergyData,0)
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyCarbonEmission]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyCarbonEmission]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyCarbonEmission] (
	@F_EnergyTypeID bigint,
	@F_EnergyData numeric(18,4)
) RETURNS numeric(18,2)
BEGIN
	DECLARE @Formula numeric(18,4)
	DECLARE @Rate varchar(16)
	SELECT @Rate = dbo.fun_GetEntityPropertyValue(@F_EnergyTypeID,''P1_CarbonRatio'')
	IF @Rate <> '''' SET @Formula = @Rate
	RETURN @Formula * @F_EnergyData
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetChildNodeByParent]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetChildNodeByParent]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetChildNodeByParent] (
	@F_ParentID bigint
)
RETURNS @T TABLE(id bigint, parentid bigint, name varchar(128),depth int) 
BEGIN
    DECLARE @i int
    SET @i=1

    INSERT @T SELECT F_EntityID, F_ParentID, F_EntityName,@i FROM dbo.tb_B_EntityTreeModel WHERE F_ParentID = @F_ParentID
    WHILE @@rowcount<>0
    BEGIN
        SET @i = @i + 1
        INSERT @T SELECT A.F_EntityID, A.F_ParentID, A.F_EntityName,@i FROM dbo.tb_B_EntityTreeModel A,@T B 
        WHERE A.F_ParentID = B.id AND B.depth = @i - 1
    END

    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyItemCost]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyItemCost]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyItemCost] (
	@F_EnergyTypeID bigint,
	@F_EnergyItemTag varchar(32),
	@F_EnergyItemValue varchar(32),
	@F_EnergyData numeric(18,4),
	@F_Year int,
	@F_Month int
) RETURNS money
BEGIN
	DECLARE @Formula numeric(18,4)
	DECLARE @Price varchar(16)
	DECLARE @F_EntityID bigint
	
	SELECT @F_EntityID = id FROM dbo.fun_GetChildNodeByParent(@F_EnergyTypeID) WHERE dbo.fun_GetEntityPropertyValue(id,@F_EnergyItemTag) = @F_EnergyItemValue
	IF @F_EntityID IS NOT NULL SELECT @Price = dbo.fun_GetEntityPropertyValueByYm(@F_EntityID,''P_UnitPrice'',@F_Year,@F_Month)
	IF @Price IS NOT NULL AND @Price <> '''' SET @Formula = @Price
	ELSE SELECT @Formula = dbo.fun_GetEntityPropertyValueByYm(@F_EnergyTypeID,''P_UnitPrice'',@F_Year,@F_Month)
	RETURN ISNULL(@Formula * @F_EnergyData,0)
END
' 
END
GO
/****** Object:  Table [dbo].[tb_A_Template]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_Template]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_Template](
	[F_TemplateCode] [bigint] NOT NULL,
	[F_TemplateName] [varchar](128) NULL,
	[F_TemplateLabel] [varchar](32) NULL,
	[F_TemplateType] [varchar](1) NULL,
	[F_EnergyTypeID] [bigint] NULL,
	[F_DeviceTypeID] [bigint] NULL,
	[F_IsRefer] [bit] NULL,
	[F_AppCode] [bigint] NULL,
	[F_TemplateID] [varchar](16) NULL,
 CONSTRAINT [PK_tb_A_Template] PRIMARY KEY CLUSTERED 
(
	[F_TemplateCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_Value]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_Value]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_Value](
	[F_TemplateCode] [bigint] NOT NULL,
	[F_ValueCode] [bigint] NOT NULL,
	[F_ValueName] [varchar](32) NULL,
	[F_ValueLabel] [varchar](32) NULL,
	[F_ValueType] [char](1) NULL,
	[F_ValueProperty] [char](1) NULL,
	[F_DataType] [varchar](16) NULL,
	[F_PrecisionRatio] [int] NULL,
	[F_DecimalPoint] [int] NULL,
	[F_DefaultValue] [varchar](16) NULL,
	[F_Unit] [nvarchar](50) NULL,
	[F_ReadWrite] [varchar](16) NULL,
	[F_CommCycle] [int] NULL,
	[F_Formula] [varchar](128) NULL,
	[F_KV] [varchar](128) NULL,
	[F_IsStorage] [bit] NULL,
	[F_StorageCycle] [int] NULL,
	[F_RangeLower] [numeric](18, 2) NULL,
	[F_RangeUpper] [numeric](18, 2) NULL,
	[F_SlopeLower] [numeric](18, 2) NULL,
	[F_SlopeUpper] [numeric](18, 2) NULL,
	[F_Benchmark] [numeric](18, 2) NULL,
	[F_Fluctuated] [numeric](18, 2) NULL,
	[F_MinValue] [numeric](18, 2) NULL,
	[F_MaxValue] [numeric](18, 2) NULL,
	[F_IsRefer] [bit] NULL,
	[F_IsDisplay] [bit] NULL,
	[F_OrderNum] [int] NULL,
 CONSTRAINT [PK_tb_A_Value] PRIMARY KEY CLUSTERED 
(
	[F_TemplateCode] ASC,
	[F_ValueCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_D_WorkingTime]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_D_WorkingTime]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_D_WorkingTime](
	[F_Year] [int] NOT NULL,
	[F_Month] [int] NOT NULL,
	[F_EntityID] [varchar](32) NOT NULL,
	[F_TransitionStime1] [time](0) NULL,
	[F_TransitionEtime1] [time](0) NULL,
	[F_WorkingStime] [time](0) NULL,
	[F_WorkingEtime] [time](0) NULL,
	[F_TransitionStime2] [time](0) NULL,
	[F_TransitionEtime2] [time](0) NULL,
 CONSTRAINT [PK_tb_D_WorkingTime] PRIMARY KEY CLUSTERED 
(
	[F_Year] ASC,
	[F_Month] ASC,
	[F_EntityID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetWorkingEndTime]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetWorkingEndTime]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetWorkingEndTime] (
	@F_EntityID varchar(32),
	@F_Date date
) RETURNS time(0) 
BEGIN
	DECLARE @EndTime time(0) 

	SELECT @EndTime = F_WorkingEtime FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = @F_EntityID
	IF @EndTime IS NULL SELECT @EndTime = F_WorkingEtime FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = @F_EntityID
	IF @EndTime IS NULL SELECT @EndTime = F_WorkingEtime FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = ''''
	IF @EndTime IS NULL SELECT @EndTime = F_WorkingEtime FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = ''''
	RETURN @EndTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetWorkingStartTime]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetWorkingStartTime]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetWorkingStartTime] (
	@F_EntityID varchar(32),
	@F_Date date
) RETURNS time(0) 
BEGIN
	DECLARE @StartTime time(0) 

	SELECT @StartTime = F_WorkingStime FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = @F_EntityID
	IF @StartTime IS NULL SELECT @StartTime = F_WorkingStime FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = @F_EntityID
	IF @StartTime IS NULL SELECT @StartTime = F_WorkingStime FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = ''''
	IF @StartTime IS NULL SELECT @StartTime = F_WorkingStime FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = ''''

	RETURN @StartTime
END
' 
END
GO
/****** Object:  Table [dbo].[tb_C_DataBuffer]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_DataBuffer]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_DataBuffer](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_ReadingDate] [datetime2](0) NOT NULL,
	[F_DataValue] [numeric](18, 4) NULL,
	[F_IsRepair] [bit] NULL,
 CONSTRAINT [PK_tb_C_DataBuffer_1] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ValueLabel] ASC,
	[F_ReadingDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[proc_C_SimulateRunningData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_C_SimulateRunningData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_C_SimulateRunningData]
	@F_StartDate datetime2(0),
	@F_EndDate datetime2(0)
AS
BEGIN
	DECLARE @cur_node cursor
	DECLARE @F_NodeCode bigint
	DECLARE @F_ValueLabel varchar(32)
	DECLARE @F_ValueType char(1)
	DECLARE @F_PrecisionRatio int
	DECLARE @F_DecimalPoint int
	DECLARE @F_Formula varchar(128)
	DECLARE @F_DataType varchar(16)
	DECLARE @F_NodeDepth int
	DECLARE @F_TreeDepth int
	DECLARE @F_MinValue int
	DECLARE @F_MaxValue int
	DECLARE @F_DataValue numeric(18,4)
	DECLARE @F_LastValue numeric(18,4)
	DECLARE @F_LastDate datetime2(0)
	DECLARE @temp datetime2(0)
	DECLARE @SqlText varchar(1024)
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT
		A.F_EntityID AS F_NodeCode,
		B.F_ValueLabel,
		B.F_ValueType,
		B.F_PrecisionRatio,
		B.F_DecimalPoint,
		B.F_Formula,
		B.F_DataType,
		B.F_MinValue,
		B.F_MaxValue,
		A.F_EntityDepth AS F_NodeDepth,
		D.F_TreeDepth
	FROM dbo.tb_B_EntityTreeModel A,
		dbo.tb_A_Value B,
		dbo.tb_B_EntityTreeType D
	WHERE A.F_ObjectGroup IN (''2'',''3'')
		--AND dbo.fun_GetNodeAorVType(A.F_EntityID) = 0
		AND A.F_NodeTemplate = B.F_TemplateCode
		AND A.F_EntityTreeNo = D.F_EntityTreeNo

	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ValueType,@F_PrecisionRatio,@F_DecimalPoint,@F_Formula,@F_DataType,@F_MinValue,@F_MaxValue,@F_NodeDepth,@F_TreeDepth
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @F_StartDate IS NULL AND @F_EndDate IS NULL
		BEGIN
			SELECT @F_StartDate = DATEADD(HH,1,F_ReadingDate) FROM dbo.tb_C_LatelyData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel
			SET @F_EndDate = GETDATE()
		END
		ELSE IF @F_StartDate IS NULL AND @F_EndDate IS NOT NULL
		BEGIN
			SELECT @F_StartDate = DATEADD(HH,1,F_ReadingDate) FROM dbo.tb_C_LatelyData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel
		END
		ELSE IF @F_StartDate IS NOT NULL AND @F_EndDate IS NULL
		BEGIN
			SET @F_EndDate = GETDATE()
		END
		SET @temp = @F_StartDate
		WHILE @temp <= @F_EndDate
		BEGIN
			SET @F_DataValue = NULL
			SET @F_LastDate = NULL
			SET @F_LastValue = NULL
			IF @F_ValueType = ''1''
			BEGIN
				IF CAST(@temp AS TIME(0)) BETWEEN dbo.fun_GetWorkingStartTime(@F_NodeCode,@temp) AND dbo.fun_GetWorkingEndTime(@F_NodeCode,@temp)
				BEGIN
					SELECT @F_LastValue = F_DataValue,@F_LastDate = F_ReadingDate FROM dbo.tb_C_LatelyData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel
					IF @F_LastValue IS NULL SET @F_DataValue = RAND() * (@F_TreeDepth + 1 - @F_NodeDepth)
					ELSE SET @F_DataValue = @F_LastValue + RAND() * (@F_TreeDepth + 1 - @F_NodeDepth)
				END
				ELSE
				BEGIN
					SELECT @F_LastValue = F_DataValue,@F_LastDate = F_ReadingDate FROM dbo.tb_C_LatelyData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel
					IF @F_LastValue IS NULL SET @F_DataValue = RAND()
					ELSE SET @F_DataValue = @F_LastValue + RAND()
				END
				INSERT INTO dbo.tb_C_DataBuffer VALUES (@F_NodeCode,@F_ValueLabel,@temp,@F_DataValue,0)
			END
			ELSE IF @F_ValueType = ''2''
			BEGIN
				IF @F_DataType = ''bool''
				BEGIN
					SET @F_DataValue = CAST(FLOOR(RAND()*2) AS INT)
				END
				ELSE IF @F_MinValue IS NOT NULL AND @F_MaxValue IS NOT NULL
				BEGIN
					SET @F_DataValue = @F_MinValue + CAST(CEILING(RAND()*(@F_MaxValue - @F_MinValue)) AS INT)
				END
				ELSE
				BEGIN
					SET @F_DataValue = RAND() * 10 * (@F_TreeDepth + 1 - @F_NodeDepth)
				END
				INSERT INTO dbo.tb_C_DataBuffer VALUES (@F_NodeCode,@F_ValueLabel,@temp,@F_DataValue,0)
			END

			SET @temp = DATEADD(HH,1,@temp)
		END
		FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ValueType,@F_PrecisionRatio,@F_DecimalPoint,@F_Formula,@F_DataType,@F_MinValue,@F_MaxValue,@F_NodeDepth,@F_TreeDepth
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_C_SimulatePlanTask]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_C_SimulatePlanTask]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_C_SimulatePlanTask]
AS
BEGIN
	DECLARE @F_StartDate datetime2(0)
	DECLARE @F_EndDate datetime2(0)
	SET @F_StartDate = CONVERT(VARCHAR(14),DATEADD(HH,-1,GETDATE()),120) + ''00:00''
	SET @F_EndDate = CONVERT(VARCHAR(14),DATEADD(HH,-1,GETDATE()),120) + ''59:59''
	EXEC dbo.proc_C_SimulateRunningData @F_StartDate,@F_EndDate
END
' 
END
GO
/****** Object:  Table [dbo].[tb_A_IoTNodeComm]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_IoTNodeComm]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_IoTNodeComm](
	[F_NodeCode] [bigint] NOT NULL,
	[F_StartDate] [datetime2](0) NOT NULL,
	[F_EndDate] [datetime2](0) NULL,
	[F_CommStatus] [bit] NULL,
 CONSTRAINT [PK_tb_A_IoTNodeComm] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_StartDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_A_IoTNode]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_IoTNode]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_IoTNode](
	[F_NodeCode] [bigint] NOT NULL,
	[F_NodeNo] [varchar](16) NULL,
	[F_NodeID] [bigint] NULL,
	[F_NodeName] [varchar](128) NULL,
	[F_NodeRank] [int] NULL,
	[F_ParentCode] [bigint] NULL,
	[F_TemplateCode] [bigint] NULL,
	[F_IsHasChild] [bit] NULL,
	[F_Location] [varchar](64) NULL,
	[F_IsVisible] [bit] NULL,
	[F_IsStorage] [bit] NULL,
	[F_AppCode] [bigint] NULL,
	[F_EnergyTypeID] [bigint] NULL,
	[F_DeviceTypeID] [bigint] NULL,
	[F_CommTime] [datetime2](0) NULL,
	[F_CommStatus] [bit] NULL,
	[F_Remark] [varchar](512) NULL,
 CONSTRAINT [PK_tb_A_IoTNode] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeAorVType]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeAorVType]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeAorVType](
	@F_EntityID bigint
) 
RETURNS bit
BEGIN
	DECLARE @Type bit
	
	IF EXISTS(SELECT F_NodeCode FROM dbo.tb_A_IoTNode WHERE F_NodeCode = @F_EntityID) SET @Type = 1
	ELSE SET @Type = 0
	RETURN @Type
END
' 
END
GO
/****** Object:  Table [dbo].[tb_A_Project]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_Project]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_Project](
	[F_ProjectNo] [bigint] NOT NULL,
	[F_ProjectName] [varchar](32) NULL,
	[F_ProjectAbbr] [varchar](16) NULL,
	[F_ProjectTag] [varchar](16) NULL,
	[F_ProjectType] [varchar](32) NULL,
	[F_ProjectIndex] [int] IDENTITY(1,1) NOT NULL,
	[F_ProjectColor] [char](7) NULL,
	[F_ProjectDes] [varchar](128) NULL,
	[F_ProjectFrame] [int] NULL,
	[F_SystemFunction] [bigint] NULL,
	[F_GuideFunction] [bigint] NULL,
 CONSTRAINT [PK_tb_A_Project] PRIMARY KEY CLUSTERED 
(
	[F_ProjectNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_ProjectToTree]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToTree]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_ProjectToTree](
	[F_ProjectNo] [bigint] NOT NULL,
	[F_EntityTreeNo] [int] NOT NULL,
	[F_EntityID] [bigint] NOT NULL,
	[F_AuthFlag] [int] NULL,
 CONSTRAINT [PK_tb_A_ProjectToTree] PRIMARY KEY CLUSTERED 
(
	[F_ProjectNo] ASC,
	[F_EntityTreeNo] ASC,
	[F_EntityID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetProjectTreeNum]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetProjectTreeNum]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetProjectTreeNum] (
	@F_ProjectNo int
) RETURNS int
BEGIN
	DECLARE @Num int
	SET @Num = 0
	SELECT @Num = COUNT(DISTINCT F_EntityTreeNo) FROM dbo.tb_A_ProjectToTree WHERE F_ProjectNo = @F_ProjectNo
	RETURN @Num
END
' 
END
GO
/****** Object:  Table [dbo].[tb_B_EntityTreeMetering]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeMetering]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_EntityTreeMetering](
	[F_EntityTreeNo] [int] NOT NULL,
	[F_EntityID] [bigint] NOT NULL,
	[F_NodeTreeNo] [int] NOT NULL,
	[F_NodeID] [bigint] NOT NULL,
	[F_StartDate] [date] NOT NULL,
	[F_EndDate] [date] NULL,
	[F_Rate] [numeric](18, 2) NULL,
	[F_SynStatus] [bit] NULL,
 CONSTRAINT [PK_tb_B_EntityTreeMetering_1] PRIMARY KEY CLUSTERED 
(
	[F_EntityTreeNo] ASC,
	[F_EntityID] ASC,
	[F_NodeTreeNo] ASC,
	[F_NodeID] ASC,
	[F_StartDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeMeterToEntityStatus]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeMeterToEntityStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeMeterToEntityStatus](
	@F_NodeTreeNo int,
	@F_NodeID bigint,
	@F_EntityID bigint
) 
RETURNS bit
BEGIN
	DECLARE @Status bit
	
	IF EXISTS(SELECT F_EntityID FROM dbo.tb_B_EntityTreeMetering WHERE F_NodeTreeNo = @F_NodeTreeNo AND F_NodeID = @F_NodeID AND F_EntityID = @F_EntityID AND F_EndDate IS NULL)
		SET @Status = 1
	ELSE SET @Status = 0
	RETURN @Status
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeMeterStatus]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeMeterStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeMeterStatus](
	@F_EntityTreeNo int,
	@F_NodeID bigint
) 
RETURNS bit
BEGIN
	DECLARE @Status bit
	
	IF EXISTS(SELECT F_NodeID FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_NodeID = @F_NodeID)
		SET @Status = 1
	ELSE SET @Status = 0
	RETURN @Status
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeMeteringEntityID]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeMeteringEntityID]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeMeteringEntityID] (
	@F_NodeTreeNo int,
	@F_NodeID bigint
) RETURNS varchar(max) 
BEGIN
	DECLARE @EntityStr varchar(max)
	SET @EntityStr = ''''
	SELECT
		@EntityStr = 
		STUFF((
			SELECT 
				'';'' + ltrim(F_EntityID)
			FROM tb_B_EntityTreeMetering
			WHERE F_NodeTreeNo = @F_NodeTreeNo 
				AND F_NodeID = T.F_NodeID 
			FOR XML PATH('''')
		),1,1,'''')
	FROM tb_B_EntityTreeMetering T
	WHERE T.F_NodeTreeNo = @F_NodeTreeNo
		AND T.F_NodeID = @F_NodeID
		AND T.F_EndDate IS NULL
	GROUP BY F_NodeID
	RETURN ISNULL(@EntityStr,'''')
END
' 
END
GO
/****** Object:  Table [dbo].[tb_B_EntityTreeToDevice]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeToDevice]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_EntityTreeToDevice](
	[F_EntityTreeNo] [int] NOT NULL,
	[F_EntityID] [bigint] NOT NULL,
	[F_DeviceTreeNo] [int] NOT NULL,
	[F_DeviceID] [bigint] NOT NULL,
 CONSTRAINT [PK_tb_B_EntityTreeToDevice] PRIMARY KEY CLUSTERED 
(
	[F_EntityTreeNo] ASC,
	[F_EntityID] ASC,
	[F_DeviceTreeNo] ASC,
	[F_DeviceID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityPathName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityPathName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityPathName] (@EntityID bigint)
RETURNS varchar(256) 
BEGIN
	DECLARE @ObjectGroup varchar(1)
	DECLARE @FullPathName varchar(256)
	DECLARE @ObjectName varchar(32)
	DECLARE @ParentID bigint
	SET @FullPathName = ''''
	
	SELECT @ObjectGroup = F_ObjectGroup FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @EntityID
	IF @ObjectGroup = ''1'' OR @ObjectGroup = '''' OR @ObjectGroup IS NULL
	BEGIN
		SELECT @ParentID = F_ParentID, @ObjectName = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @EntityID
		SET @FullPathName = @ObjectName
		SELECT @ParentID = F_ParentID, @ObjectName = F_EntitySName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
		WHILE @ParentID <> 0
		BEGIN
			IF @ObjectName IS NOT NULL AND @ObjectName <> '''' SET @FullPathName = STUFF(@FullPathName,1,0,@ObjectName + ''.'')
			SELECT @ParentID = F_ParentID, @ObjectName = F_EntitySName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
		END
	END
	ELSE IF @ObjectGroup = ''2''
	BEGIN
		IF EXISTS(SELECT F_NodeID FROM dbo.tb_B_EntityTreeMetering WHERE F_NodeID = @EntityID AND F_EndDate IS NULL)
		BEGIN
			SELECT @ParentID = F_ParentID, @ObjectName = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @EntityID
			SET @FullPathName = @ObjectName
		
			SELECT @ParentID = F_ParentID, @ObjectName = F_EntitySName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = (SELECT TOP 1 A.F_EntityID FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_EntityTreeMetering B WHERE B.F_NodeID = @EntityID AND B.F_EndDate IS NULL AND B.F_EntityID = A.F_EntityID ORDER BY A.F_EntityDepth DESC)
			WHILE @ParentID <> 0
			BEGIN
				IF @ObjectName IS NOT NULL AND @ObjectName <> '''' SET @FullPathName = STUFF(@FullPathName,1,0,@ObjectName + ''.'')
				SELECT @ParentID = F_ParentID, @ObjectName = F_EntitySName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
			END
		END
	END
	ELSE IF @ObjectGroup = ''3''
	BEGIN
		IF EXISTS(SELECT F_DeviceID FROM dbo.tb_B_EntityTreeToDevice WHERE F_DeviceID = @EntityID)
		BEGIN
			SELECT @ParentID = F_ParentID, @ObjectName = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @EntityID
			SET @FullPathName = @ObjectName
		
			SELECT @ParentID = F_ParentID, @ObjectName = F_EntitySName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = (SELECT TOP 1 A.F_EntityID FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_EntityTreeToDevice B WHERE B.F_DeviceID = @EntityID AND B.F_EntityID = A.F_EntityID ORDER BY A.F_EntityDepth DESC)
			WHILE @ParentID <> 0
			BEGIN
				IF @ObjectName IS NOT NULL AND @ObjectName <> '''' SET @FullPathName = STUFF(@FullPathName,1,0,@ObjectName + ''.'')
				SELECT @ParentID = F_ParentID, @ObjectName = F_EntitySName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
			END
		END
	END

	RETURN rtrim(@FullPathName)
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeMeteringEntity]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeMeteringEntity]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeMeteringEntity] (
	@NodeID bigint,
	@EntityTreeNo int
) RETURNS varchar(max) 
BEGIN
	DECLARE @PathName varchar(max)
	
	SELECT @PathName = 
		STUFF((
			SELECT 
				'';'' +dbo.fun_GetEntityPathName(F_EntityID) 
			FROM dbo.tb_B_EntityTreeMetering
			WHERE F_NodeID = @NodeID
				AND F_EntityTreeNo = @EntityTreeNo
				AND F_EndDate IS NULL 
		FOR xml path('''')),1,1,'''')
	RETURN ISNULL(RTRIM(@PathName),'''')
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityToMeterCount]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityToMeterCount]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityToMeterCount] (
	@F_EntityID bigint
) RETURNS int
BEGIN
	DECLARE @TotalCount int
	SELECT @TotalCount = COUNT(F_NodeID) FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityID = @F_EntityID AND F_EndDate IS NULL
	RETURN @TotalCount
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityMeterNodeStatus]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityMeterNodeStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityMeterNodeStatus](
	@F_EntityTreeNo int,
	@F_EntityID bigint,
	@F_NodeID bigint
) 
RETURNS bit
BEGIN
	DECLARE @Status bit
	
	IF EXISTS(SELECT F_NodeID FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID AND F_NodeID = @F_NodeID)
		SET @Status = 1
	ELSE SET @Status = 0
	RETURN @Status
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityMeterNodeRate]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityMeterNodeRate]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityMeterNodeRate](
	@F_EntityTreeNo int,
	@F_EntityID bigint,
	@F_NodeID bigint,
	@F_SatartDate varchar(16),
	@F_EndDate varchar(16)
) 
RETURNS INT
BEGIN
	DECLARE @Rate INT
	
	IF @F_EndDate = '''' SELECT @Rate = F_Rate * 100 FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID AND F_NodeID = @F_NodeID AND F_EndDate IS NULL
	ELSE SELECT @Rate = F_Rate * 100 FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID AND F_NodeID = @F_NodeID AND @F_SatartDate >= F_StartDate AND @F_EndDate <= ISNULL(F_EndDate,''9999-12-31'')

	RETURN @Rate
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityMeteringStatus]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityMeteringStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityMeteringStatus](
	@F_EntityID bigint,
	@F_NodeTreeNo int
) 
RETURNS bit
BEGIN
	DECLARE @Status bit
	
	IF EXISTS(SELECT F_NodeID FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityID = @F_EntityID AND F_NodeTreeNo = @F_NodeTreeNo)
		SET @Status = 1
	ELSE SET @Status = 0
	RETURN @Status
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityMeteringStartDate]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityMeteringStartDate]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityMeteringStartDate] (
	@F_EntityTreeNo int,
	@F_EntityID bigint,
	@F_NodeTreeNo int
)
RETURNS date
BEGIN
	DECLARE @F_StartDate date
	SELECT @F_StartDate = MAX(F_StartDate) FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID AND F_NodeTreeNo = @F_NodeTreeNo AND F_EndDate IS NULL
	RETURN @F_StartDate
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeEnergyType]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeEnergyType]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeEnergyType] (
	@F_NodeCode bigint
) RETURNS bigint
BEGIN
	DECLARE @F_EnergyTypeID bigint
	IF EXISTS(SELECT F_NodeCode FROM dbo.tb_A_IoTNode WHERE F_NodeCode = @F_NodeCode)
	BEGIN
		SELECT @F_EnergyTypeID = F_EnergyTypeID FROM dbo.tb_A_IoTNode WHERE F_NodeCode = @F_NodeCode
		IF @F_EnergyTypeID IS NULL OR @F_EnergyTypeID = '''' SELECT @F_EnergyTypeID = B.F_EnergyTypeID FROM dbo.tb_A_IoTNode A,dbo.tb_A_Template B WHERE A.F_NodeCode = @F_NodeCode AND A.F_TemplateCode = B.F_TemplateCode
	END
	ELSE
	BEGIN
		SELECT @F_EnergyTypeID = F_EnergyTypeID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_NodeCode
	END
	RETURN @F_EnergyTypeID
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntitySplitNode]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntitySplitNode]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntitySplitNode] (
	@F_EntityID bigint,
	@F_DayDate date,
	@F_EnergyTypeID bigint,
	@F_DataGranularity varchar(32)	
) RETURNS @tb_split TABLE(F_NodeCode bigint,F_Depth int,F_Rate numeric(18,2)) 
BEGIN
	DECLARE @F_NodeCode bigint
	DECLARE @F_MinDepth int
	DECLARE @F_MaxDepth int
	DECLARE @F_TempDepth int
	DECLARE @cur_node cursor
	
	IF @F_DataGranularity = ''''
	BEGIN
		INSERT INTO @tb_split
		SELECT
			A.F_NodeID,
			B.F_EntityDepth,
			A.F_Rate
		FROM dbo.tb_B_EntityTreeMetering A,
			tb_B_EntityTreeModel B
		WHERE A.F_EntityID = @F_EntityID
			AND @F_DayDate BETWEEN A.F_StartDate AND ISNULL(A.F_EndDate,''9999-12-31'')
			AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID
			AND A.F_NodeID = B.F_EntityID
	END
	ELSE
	BEGIN
		INSERT INTO @tb_split
		SELECT
			A.F_NodeID,
			B.F_EntityDepth,
			A.F_Rate
		FROM dbo.tb_B_EntityTreeMetering A,
			tb_B_EntityTreeModel B
		WHERE A.F_EntityID = @F_EntityID
			AND @F_DayDate BETWEEN A.F_StartDate AND ISNULL(A.F_EndDate,''9999-12-31'')
			AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID
			AND ISNULL(dbo.fun_GetEntityPropertyValue(A.F_NodeID,@F_DataGranularity),'''') <> ''''
			AND A.F_NodeID = B.F_EntityID
	END
	SELECT @F_MinDepth = MIN(F_Depth),@F_MaxDepth = MAX(F_Depth) FROM @tb_split
	SET @F_TempDepth = @F_MinDepth
	WHILE @F_TempDepth < @F_MaxDepth
	BEGIN
		SET @cur_node = CURSOR forward_only DYNAMIC FOR SELECT F_NodeCode FROM @tb_split WHERE F_Depth = @F_TempDepth
		OPEN @cur_node
		FETCH NEXT FROM @cur_node INTO @F_NodeCode
		WHILE @@FETCH_STATUS = 0
		BEGIN
			DELETE FROM @tb_split WHERE F_NodeCode IN (SELECT id FROM dbo.fun_GetChildNodeByParent(@F_NodeCode))
			FETCH NEXT FROM @cur_node INTO @F_NodeCode
		END
		CLOSE @cur_node
		DEALLOCATE @cur_node
		SET @F_TempDepth = @F_TempDepth + 1
	END
	
	RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeMeteringStatus]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeMeteringStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeMeteringStatus] (
	@EntityID bigint,
	@EnergyTypeID bigint,
	@NodeID bigint,
	@PropertyTag varchar(16)
) RETURNS varchar(16) 
BEGIN
	DECLARE @IsMetering varchar(16)	
	
	IF @PropertyTag = ''''
	BEGIN
		IF EXISTS(SELECT F_NodeCode FROM tb_C_EntityLatelyNode WHERE F_EntityID = @EntityID AND F_ReadingDate = CAST(GETDATE() AS DATE) AND F_EnergyTypeID = @EnergyTypeID AND F_DataGranularity = @PropertyTag)
		BEGIN
			IF EXISTS(SELECT F_NodeCode FROM tb_C_EntityLatelyNode WHERE F_EntityID = @EntityID AND F_ReadingDate = CAST(GETDATE() AS DATE) AND F_EnergyTypeID = @EnergyTypeID AND F_DataGranularity = @PropertyTag AND F_NodeCode = @NodeID) SET @IsMetering = ''是''
			ELSE SET @IsMetering = ''否''
		END
		ELSE
		BEGIN
			IF EXISTS(SELECT F_NodeCode FROM dbo.fun_GetEntitySplitNode(@EntityID,GETDATE(),@EnergyTypeID,@PropertyTag) WHERE F_NodeCode = @NodeID) SET @IsMetering = ''是''
			ELSE SET @IsMetering = ''否''
		END
	END
	ELSE
	BEGIN
		IF ISNULL(dbo.fun_GetEntityPropertyValue(@NodeID,@PropertyTag),'''') <> ''''
		BEGIN
			IF EXISTS(SELECT F_NodeCode FROM tb_C_EntityLatelyNode WHERE F_EntityID = @EntityID AND F_ReadingDate = CAST(GETDATE() AS DATE) AND F_EnergyTypeID = @EnergyTypeID AND F_DataGranularity = @PropertyTag)
			BEGIN
				IF EXISTS(SELECT F_NodeCode FROM tb_C_EntityLatelyNode WHERE F_EntityID = @EntityID AND F_ReadingDate = CAST(GETDATE() AS DATE) AND F_EnergyTypeID = @EnergyTypeID AND F_DataGranularity = @PropertyTag AND F_NodeCode = @NodeID) SET @IsMetering = ''是''
				ELSE SET @IsMetering = ''否''
			END
			ELSE
			BEGIN
				IF EXISTS(SELECT F_NodeCode FROM dbo.fun_GetEntitySplitNode(@EntityID,GETDATE(),@EnergyTypeID,@PropertyTag) WHERE F_NodeCode = @NodeID) SET @IsMetering = ''是''
				ELSE SET @IsMetering = ''否''
			END
		END
		ELSE SET @IsMetering = ''-''
	END
	
	RETURN @IsMetering
END
' 
END
GO
/****** Object:  Table [dbo].[tb_B_KeyValueTable]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_KeyValueTable]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_KeyValueTable](
	[F_DictionaryID] [bigint] NOT NULL,
	[F_DictionaryName] [varchar](32) NOT NULL,
	[F_IsReadOnly] [bit] NULL,
 CONSTRAINT [PK_tb_B_KeyValueTable] PRIMARY KEY CLUSTERED 
(
	[F_DictionaryID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_B_KeyValueList]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_KeyValueList]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_KeyValueList](
	[F_DictionaryID] [bigint] NOT NULL,
	[F_Key] [varchar](32) NOT NULL,
	[F_Value] [varchar](64) NOT NULL,
 CONSTRAINT [PK_tb_B_KeyValueList] PRIMARY KEY CLUSTERED 
(
	[F_DictionaryID] ASC,
	[F_Key] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodePropertyValue]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodePropertyValue]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodePropertyValue] (
	@NodeID bigint,
	@PropertyTag varchar(16)
) RETURNS varchar(512) 
BEGIN
	DECLARE @PropertyValue varchar(512)
	DECLARE @F_DictionaryType varchar(16)
	DECLARE @F_DictionaryID varchar(16)
	DECLARE @F_DictionaryKey varchar(16)
	
	SELECT
		@PropertyValue = A.F_PropertyValue,
		@F_DictionaryType = B.F_DictionaryType,
		@F_DictionaryID = B.F_DictionaryID,
		@F_DictionaryKey = B.F_DictionaryKey
	FROM dbo.tb_B_EntityTreeProperty A,
		dbo.tb_B_ObjectProperty B
	WHERE A.F_EntityID = @NodeID
		AND A.F_EndYM = ''9999-12-31''
		AND A.F_PropertyID = B.F_PropertyID
		AND B.F_PropertyIdentifier = @PropertyTag
		
	IF @PropertyValue IS NOT NULL AND @PropertyValue <> ''''
	BEGIN
		IF @F_DictionaryType = ''1''
		BEGIN
			SELECT @PropertyValue = F_Value FROM dbo.tb_B_KeyValueList WHERE F_DictionaryID = @F_DictionaryID AND F_Key = @PropertyValue
		END
		ELSE IF @F_DictionaryType = ''2''
		BEGIN
			IF @F_DictionaryKey IS NOT NULL AND @F_DictionaryKey <> ''''
				SELECT @PropertyValue = A.F_EntityName FROM dbo.tb_B_EntityTreeModel A, dbo.tb_B_EntityTreeProperty B WHERE A.F_TemplateID = @F_DictionaryID AND A.F_EntityID = B.F_EntityID AND B.F_PropertyID = @F_DictionaryKey AND B.F_PropertyValue = @PropertyValue AND B.F_EndYM = ''9999-12-31''
			ELSE 
				SELECT @PropertyValue = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @PropertyValue
		END
	END
	RETURN ISNULL(@PropertyValue,'''')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_GetEntityMeteringNode]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_GetEntityMeteringNode]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_GetEntityMeteringNode]
	@F_EntityTreeNo int, 
	@F_EntityID bigint
AS
BEGIN
	SELECT
		ROW_NUMBER()OVER(ORDER BY B.F_EntityTreeNo,B.F_EntityDepth,B.F_OrderTag) as F_RowNum,
		F_NodeID,
		dbo.fun_GetEntityPathName(F_NodeID) AS F_NodeName,
		CASE dbo.fun_GetNodeAorVType(F_NodeID) WHEN 1 THEN ''物理表'' ELSE ''虚拟表'' END AS F_NodeType,
		dbo.fun_GetNodePropertyValue(F_NodeID,''P_EnergyType'') AS F_EnergyType,
		dbo.fun_GetNodeMeteringStatus(A.F_EntityID,B.F_EnergyTypeID,A.F_NodeID,'''') AS F_IsTotal,
		dbo.fun_GetNodeMeteringStatus(A.F_EntityID,B.F_EnergyTypeID,A.F_NodeID,''P_EnergyProperty'') AS F_IsProperty,
		dbo.fun_GetNodeMeteringStatus(A.F_EntityID,B.F_EnergyTypeID,A.F_NodeID,''P_EnergyItem'') AS F_IsItem,
		''-'' AS F_IsItem1,
		''-'' AS F_IsItem2
	FROM dbo.tb_B_EntityTreeMetering A,dbo.tb_B_EntityTreeModel B
	WHERE A.F_EntityTreeNo = @F_EntityTreeNo 
		AND A.F_EntityID = @F_EntityID
		AND A.F_EndDate IS NULL
		AND A.F_NodeTreeNo = B.F_EntityTreeNo
		AND A.F_NodeID = B.F_EntityID
	ORDER BY B.F_EntityTreeNo,B.F_EntityDepth,B.F_OrderTag
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetNodeByProjectTpl]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetNodeByProjectTpl]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetNodeByProjectTpl]
	@F_ProjectNo bigint, 
	@F_TemplateID bigint
AS
BEGIN
	SELECT
		A.F_EntityID,
		dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName
	FROM tb_B_EntityTreeModel A,tb_A_ProjectToTree B
	WHERE A.F_TemplateID = @F_TemplateID
		AND B.F_ProjectNo = @F_ProjectNo
		AND A.F_EntityTreeNo = B.F_EntityTreeNo
		AND A.F_EntityID = B.F_EntityID
	ORDER BY A.F_OrderTag
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_MakeNodeSerial]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_MakeNodeSerial]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_MakeNodeSerial]()
RETURNS bigint
BEGIN
	DECLARE @SerialNum bigint
	SELECT @SerialNum = MAX(F_NodeCode) + 1 FROM dbo.tb_A_IoTNode
	IF @SerialNum IS NULL OR EXISTS(SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @SerialNum)
		SET @SerialNum = CAST(DATEDIFF(s,''1970-01-01'',GETDATE()) AS bigint)
	RETURN @SerialNum
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_MakeEntitySerial]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_MakeEntitySerial]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_MakeEntitySerial]()
RETURNS bigint
BEGIN
	DECLARE @SerialNum bigint
	SELECT @SerialNum = MAX(F_EntityID) + 1 FROM dbo.tb_B_EntityTreeModel
	IF @SerialNum IS NULL OR EXISTS(SELECT F_NodeCode FROM dbo.tb_A_IoTNode WHERE F_NodeCode = @SerialNum)
		SET @SerialNum = CAST(DATEDIFF(s,''1970-01-01'',GETDATE()) AS bigint)
	RETURN @SerialNum
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetParentNodeByChild]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetParentNodeByChild]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetParentNodeByChild] (
	@F_ChildID bigint
)
RETURNS @tb_ParentNode TABLE(id bigint,pId bigint,name varchar(128),depth int) 
BEGIN
    DECLARE @i int
    SET @i=1

    INSERT @tb_ParentNode SELECT F_EntityID, F_ParentID,F_EntityName,@i FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = (SELECT F_ParentID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_ChildID)
    WHILE @@rowcount<>0
    BEGIN
        SET @i = @i + 1
        INSERT @tb_ParentNode SELECT A.F_EntityID, A.F_ParentID,A.F_EntityName,@i FROM dbo.tb_B_EntityTreeModel A,@tb_ParentNode B WHERE B.depth = @i - 1 AND B.pId = A.F_EntityID
    END

    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeTemplate]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeTemplate]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeTemplate] (
	@F_NodeCode bigint
) RETURNS bigint
BEGIN
	DECLARE @F_TemplateID bigint
	SELECT @F_TemplateID = F_NodeTemplate FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_NodeCode
	
	RETURN @F_TemplateID
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodePathName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodePathName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodePathName] (
	@NodeID bigint
) RETURNS varchar(256) 
BEGIN
	DECLARE @FullPathName varchar(256)
	DECLARE @ObjectName varchar(32)
	DECLARE @ParentID bigint
	SET @FullPathName = ''''
	
	SELECT @ParentID = F_ParentID, @ObjectName = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @NodeID
	SET @FullPathName = @ObjectName
	SELECT @ParentID = F_ParentID, @ObjectName = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
	WHILE @ParentID <> ''0''
	BEGIN
		SET @FullPathName = STUFF(@FullPathName,1,0,@ObjectName + ''.'')
		SELECT @ParentID = F_ParentID, @ObjectName = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
	END
	RETURN rtrim(@FullPathName)
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeObjTemplate]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeObjTemplate]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeObjTemplate] (
	@F_NodeCode bigint
) RETURNS bigint
BEGIN
	DECLARE @F_TemplateID bigint
	SELECT @F_TemplateID = F_TemplateID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_NodeCode
	
	RETURN @F_TemplateID
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityTreeRootNode]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityTreeRootNode]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityTreeRootNode] (@F_ChildID bigint)
RETURNS bigint 
BEGIN
	DECLARE @RootID bigint
	DECLARE @i int
    SET @i=1
	
	IF EXISTS(SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_ChildID AND F_ParentID = 0) SET @RootID = @F_ChildID
	ELSE
	BEGIN
		SELECT @RootID = F_EntityID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = (SELECT F_ParentID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_ChildID)
		WHILE @@rowcount<>0
		BEGIN
			SELECT @RootID = F_EntityID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = (SELECT F_ParentID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @RootID)
		END
	END
	RETURN @RootID
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityTreeDepth]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityTreeDepth]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityTreeDepth] (
	@F_EntityID bigint
) RETURNS bigint
BEGIN
	DECLARE @F_EntityDepth smallint
	SELECT @F_EntityDepth = F_EntityDepth FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_EntityID
	RETURN @F_EntityDepth
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityPropertyTreeText]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityPropertyTreeText]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityPropertyTreeText] (
	@F_DictionaryKey varchar(16),
	@F_DictionaryID bigint,
	@F_PropertyTag varchar(32),
	@F_PropertyValue varchar(512)
) RETURNS varchar(512) 
BEGIN
	DECLARE @PropertyText varchar(512)
	IF @F_DictionaryKey IS NULL OR @F_DictionaryKey = ''''
	BEGIN
		SELECT @PropertyText = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_PropertyValue
	END
	ELSE
	BEGIN
		SELECT @PropertyText = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_TemplateID = @F_DictionaryID AND dbo.fun_GetEntityPropertyValue(F_EntityID,@F_PropertyTag) = @F_PropertyValue
	END
		
	RETURN ISNULL(@PropertyText,'''')
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityOrderTag]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityOrderTag]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityOrderTag] (@EntityID bigint)
RETURNS varchar(256) 
BEGIN
	DECLARE @OrderTag varchar(16)
	SELECT @OrderTag = F_OrderTag FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @EntityID
	RETURN @OrderTag
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityName] (@EntityID bigint)
RETURNS varchar(256) 
BEGIN
	DECLARE @Name varchar(128)
	SELECT @Name = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @EntityID
	RETURN ISNULL(@Name,'''')
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityFullName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityFullName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityFullName] (@EntityID bigint)
RETURNS varchar(256) 
BEGIN
	DECLARE @FullName varchar(256)
	DECLARE @Name varchar(32)
	DECLARE @ParentID bigint
	SET @FullName = '' ''

	SELECT @ParentID = F_ParentID, @Name = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @EntityID
	WHILE @ParentID <> 0
	BEGIN
		SET @FullName = STUFF(@FullName,1,0,''-'' + @Name)
		SELECT @ParentID = F_ParentID, @Name = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
	END
	SET @FullName = STUFF(@FullName,1,0,@Name)
	RETURN rtrim(@FullName)
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyTypeName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyTypeName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyTypeName] (
	@F_EntityID bigint
) RETURNS varchar(32) 
BEGIN
	DECLARE @F_TypeName varchar(32)
	SELECT @F_TypeName = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_EntityID
	RETURN @F_TypeName
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyCodeByName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyCodeByName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyCodeByName] (
	@EnergyName varchar(32),
	@PropertyTag varchar(32)
) RETURNS varchar(32) 
BEGIN
	DECLARE @EnergyCode varchar(32)
	
	SELECT
		TOP 1 @EnergyCode = dbo.fun_GetEntityPropertyValue(F_EntityID,@PropertyTag)
	FROM dbo.tb_B_EntityTreeModel
	WHERE F_EntityName = @EnergyName
	RETURN ISNULL(@EnergyCode,'''')
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetChildNodeByParents]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetChildNodeByParents]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetChildNodeByParents] (
	@F_ParentStr varchar(max)
)
RETURNS @T TABLE(id bigint, parentid bigint, name varchar(128),depth int) 
BEGIN
	DECLARE @depth int
	DECLARE @index int
	DECLARE @ParentID bigint
	SET @depth = 1
    SET @index = charindex('','',@F_ParentStr)
    WHILE @index >= 1
    BEGIN
		SET @ParentID = left(@F_ParentStr,@index-1)
		INSERT @T SELECT F_EntityID, F_ParentID, F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
		SET @depth = @depth + 1
		INSERT @T SELECT F_EntityID, F_ParentID, F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel WHERE F_ParentID = @ParentID
		WHILE @@rowcount<>0
		BEGIN
			SET @depth = @depth + 1
			INSERT @T SELECT A.F_EntityID, A.F_ParentID, A.F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel A,@T B 
			WHERE A.F_ParentID = B.id AND B.depth = @depth - 1
		END
    
        SET @F_ParentStr = substring(@F_ParentStr,@index+1,len(@F_ParentStr)-@index)
        SET @index = charindex('','',@F_ParentStr)
    END
    IF @F_ParentStr<>''''
    BEGIN
		SET @ParentID = @F_ParentStr
		INSERT @T SELECT F_EntityID, F_ParentID, F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
		SET @depth = @depth + 1
		INSERT @T SELECT F_EntityID, F_ParentID, F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel WHERE F_ParentID = @ParentID
		WHILE @@rowcount<>0
		BEGIN
			SET @depth = @depth + 1
			INSERT @T SELECT A.F_EntityID, A.F_ParentID, A.F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel A,@T B 
			WHERE A.F_ParentID = B.id AND B.depth = @depth - 1
		END
    END

    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetParentNodeByChilds]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetParentNodeByChilds]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetParentNodeByChilds] (
	@F_ChildStr varchar(max)
)
RETURNS @tb_parent TABLE(id bigint, parentid bigint, name varchar(128),depth int) 
BEGIN
	DECLARE @depth int
	DECLARE @index int
	DECLARE @ParentID bigint
    SET @index = charindex('','',@F_ChildStr)
    WHILE @index >= 1
    BEGIN
		SET @depth = 1
		SET @ParentID = left(@F_ChildStr,@index-1)
		INSERT @tb_parent SELECT F_EntityID, F_ParentID, F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
		SET @depth = @depth + 1
		IF EXISTS(SELECT F_EntityID FROM dbo.tb_B_EntityTreeToDevice WHERE F_DeviceID = @ParentID)
		BEGIN
			SELECT @ParentID = F_EntityID FROM dbo.tb_B_EntityTreeToDevice WHERE F_DeviceID = @ParentID
			INSERT @tb_parent SELECT F_EntityID, F_ParentID, F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID	
			SET @depth = @depth + 1
		END
		INSERT @tb_parent SELECT F_EntityID, F_ParentID, F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = (SELECT F_ParentID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID)
		WHILE @@rowcount<>0
		BEGIN
			SET @depth = @depth + 1
			INSERT @tb_parent SELECT A.F_EntityID, A.F_ParentID, A.F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel A,@tb_parent B 
			WHERE A.F_EntityID = B.parentid AND B.depth = @depth - 1
		END
    
        SET @F_ChildStr = substring(@F_ChildStr,@index+1,len(@F_ChildStr)-@index)
        SET @index = charindex('','',@F_ChildStr)
    END
    IF @F_ChildStr <> ''''
    BEGIN
		SET @depth = 1
		SET @ParentID = @F_ChildStr
		INSERT @tb_parent SELECT F_EntityID, F_ParentID, F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID
		SET @depth = @depth + 1
		IF EXISTS(SELECT F_EntityID FROM dbo.tb_B_EntityTreeToDevice WHERE F_DeviceID = @ParentID)
		BEGIN
			SELECT @ParentID = F_EntityID FROM dbo.tb_B_EntityTreeToDevice WHERE F_DeviceID = @ParentID
			INSERT @tb_parent SELECT F_EntityID, F_ParentID, F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID	
			SET @depth = @depth + 1
		END
		INSERT @tb_parent SELECT F_EntityID, F_ParentID, F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = (SELECT F_ParentID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @ParentID)
		WHILE @@rowcount<>0
		BEGIN
			SET @depth = @depth + 1
			INSERT @tb_parent SELECT A.F_EntityID, A.F_ParentID, A.F_EntityName,@depth FROM dbo.tb_B_EntityTreeModel A,@tb_parent B 
			WHERE A.F_EntityID = B.parentid AND B.depth = @depth - 1
		END
    END

    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeToEntityID]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeToEntityID]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeToEntityID] (
	@F_NodeID bigint
) RETURNS bigint
BEGIN
	DECLARE @F_ToEntityID bigint
	
	SELECT TOP 1 @F_ToEntityID = F_EntityID FROM dbo.tb_B_EntityTreeToDevice WHERE F_DeviceID = @F_NodeID
	
	RETURN @F_ToEntityID
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeRelationStatus]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeRelationStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeRelationStatus](
	@F_EntityTreeNo int,
	@F_NodeID bigint
) 
RETURNS bit
BEGIN
	DECLARE @Status bit
	
	IF EXISTS(SELECT F_DeviceID FROM dbo.tb_B_EntityTreeToDevice WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_DeviceID = @F_NodeID)
		SET @Status = 1
	ELSE SET @Status = 0
	RETURN @Status
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeRelationEntityID]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeRelationEntityID]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeRelationEntityID] (
	@F_NodeTreeNo int,
	@F_NodeID bigint
) RETURNS varchar(max) 
BEGIN
	DECLARE @EntityStr varchar(max)
	SET @EntityStr = ''''
	SELECT
		@EntityStr = 
		STUFF((
			SELECT 
				'';'' + ltrim(F_EntityID)
			FROM tb_B_EntityTreeToDevice
			WHERE F_DeviceTreeNo = @F_NodeTreeNo 
				AND F_DeviceID = T.F_DeviceID 
			FOR XML PATH('''')
		),1,1,'''')
	FROM tb_B_EntityTreeToDevice T
	WHERE T.F_DeviceTreeNo = @F_NodeTreeNo
		AND T.F_DeviceID = @F_NodeID
	GROUP BY F_DeviceID
	RETURN ISNULL(@EntityStr,'''')
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityToDeviceCount]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityToDeviceCount]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityToDeviceCount] (
	@F_EntityID bigint
) RETURNS int
BEGIN
	DECLARE @TotalCount int
	SELECT @TotalCount = COUNT(F_DeviceID) FROM dbo.tb_B_EntityTreeToDevice WHERE F_EntityID = @F_EntityID
	RETURN @TotalCount
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityRelNodeStatus]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityRelNodeStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityRelNodeStatus](
	@F_EntityTreeNo int,
	@F_EntityID bigint,
	@F_NodeID bigint
) 
RETURNS bit
BEGIN
	DECLARE @Status bit
	
	IF EXISTS(SELECT F_DeviceID FROM dbo.tb_B_EntityTreeToDevice WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID AND F_DeviceID = @F_NodeID)
		SET @Status = 1
	ELSE SET @Status = 0
	RETURN @Status
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityRelationStatus]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityRelationStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityRelationStatus](
	@F_EntityID bigint,
	@F_NodeTreeNo int
) 
RETURNS bit
BEGIN
	DECLARE @Status bit
	
	IF EXISTS(SELECT F_DeviceID FROM dbo.tb_B_EntityTreeToDevice WHERE F_EntityID = @F_EntityID AND F_DeviceTreeNo = @F_NodeTreeNo)
		SET @Status = 1
	ELSE SET @Status = 0
	RETURN @Status
END
' 
END
GO
/****** Object:  Trigger [trigger_delete_tb_A_IoTNode]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[trigger_delete_tb_A_IoTNode]'))
EXEC dbo.sp_executesql @statement = N'
CREATE TRIGGER [dbo].[trigger_delete_tb_A_IoTNode] ON [dbo].[tb_A_IoTNode] FOR DELETE
AS
BEGIN
	DELETE FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID IN (SELECT F_NodeCode FROM DELETED)
	
END

'
GO
/****** Object:  View [dbo].[view_EntityUnionToDevice]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[view_EntityUnionToDevice]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[view_EntityUnionToDevice]
AS
	SELECT F_EntityID,F_NodeID AS F_DeviceID FROM dbo.tb_B_EntityTreeMetering WHERE F_EndDate IS NULL
	UNION
	SELECT F_EntityID,F_DeviceID FROM dbo.tb_B_EntityTreeToDevice
'
GO
/****** Object:  Table [dbo].[tb_B_PropertyType]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_PropertyType]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_PropertyType](
	[F_PropertyTypeID] [char](1) NOT NULL,
	[F_PropertyTypeName] [varchar](32) NULL,
 CONSTRAINT [PK_tb_B_PropertyType] PRIMARY KEY CLUSTERED 
(
	[F_PropertyTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityPropertyText]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityPropertyText]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityPropertyText] (
	@F_EntityID bigint,
	@F_PropertyTag varchar(32)
) RETURNS varchar(512) 
BEGIN
	DECLARE @PropertyText varchar(32)
	DECLARE @F_DictionaryType varchar(1)
	DECLARE @F_DictionaryID bigint
	DECLARE @F_DictionaryKey varchar(16)
	DECLARE @F_PropertyValue varchar(512)
	
	SELECT @F_DictionaryType = A.F_DictionaryType,@F_DictionaryID = A.F_DictionaryID,@F_DictionaryKey = A.F_DictionaryKey FROM dbo.tb_B_ObjectProperty A,dbo.tb_B_DictTreeProperty B,dbo.tb_B_EntityTreeModel C WHERE C.F_EntityID = @F_EntityID AND A.F_PropertyIdentifier = @F_PropertyTag AND C.F_TemplateID = B.F_GroupID AND B.F_PropertyID = A.F_PropertyID
	SELECT @F_PropertyValue = A.F_PropertyValue FROM dbo.tb_B_EntityTreeProperty A,dbo.tb_B_ObjectProperty B WHERE A.F_EntityID = @F_EntityID AND A.F_EndYM = ''9999-12-31'' AND B.F_PropertyIdentifier = @F_PropertyTag AND A.F_PropertyID = B.F_PropertyID
	
	IF @F_DictionaryType IS NULL OR @F_DictionaryType = '''' SET @PropertyText = @F_PropertyValue
	ELSE IF @F_DictionaryType = ''1'' SELECT @PropertyText = F_Value FROM dbo.tb_B_KeyValueList WHERE F_DictionaryID = @F_DictionaryID AND F_Key = @F_PropertyValue
	ELSE IF @F_DictionaryType = ''2''
	BEGIN
		IF @F_DictionaryKey IS NULL OR @F_DictionaryKey = '''' SELECT @PropertyText = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_PropertyValue
		ELSE SELECT @PropertyText = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_TemplateID = @F_DictionaryID AND dbo.fun_GetEntityPropertyValue(F_EntityID,@F_PropertyTag) = @F_PropertyValue
	END
	RETURN ISNULL(@PropertyText,'''')
END
' 
END
GO
/****** Object:  View [dbo].[view_EntityPropertyValue]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[view_EntityPropertyValue]'))
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[view_EntityPropertyValue]
AS
	SELECT
		A.F_EntityID,
		B.F_PropertyIdentifier,
		A.F_PropertyValue,
		dbo.fun_GetEntityPropertyText(A.F_EntityID,B.F_PropertyIdentifier) AS F_PropertyTagName
	FROM dbo.tb_B_EntityTreeProperty A,
		dbo.tb_B_ObjectProperty B
	WHERE A.F_EndYM = ''9999-12-31''
		AND A.F_PropertyID = B.F_PropertyID
'
GO
/****** Object:  UserDefinedFunction [dbo].[fun_PropertyValueIsNull]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_PropertyValueIsNull]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_PropertyValueIsNull] (
	@NodeID bigint,
	@PropertyTag varchar(16)
) RETURNS varchar(16) 
BEGIN
	DECLARE @IsNull bit
	DECLARE @PropertyValue varchar(16)
	
	SELECT
		@PropertyValue = A.F_PropertyValue
	FROM dbo.tb_B_EntityTreeProperty A,
		dbo.tb_B_ObjectProperty B
	WHERE A.F_EntityID = @NodeID
		AND A.F_EndYM = ''9999-12-31''
		AND B.F_PropertyIdentifier = @PropertyTag
		AND A.F_PropertyID = B.F_PropertyID
		
	IF @PropertyValue IS NOT NULL AND @PropertyValue <> '''' SET @IsNull = 0
	ELSE SET @IsNull = 1
	
	RETURN @IsNull
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPropertyTreeText]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPropertyTreeText]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetPropertyTreeText] (
	@F_PropertyTag varchar(32),
	@F_PropertyValue varchar(16)
) RETURNS varchar(32) 
BEGIN
	DECLARE @PropertyText varchar(32)
	
	SELECT
		TOP 1 @PropertyText = C.F_EntityName
	FROM dbo.tb_B_ObjectProperty A,dbo.tb_B_EntityTreeProperty B,dbo.tb_B_EntityTreeModel C
	WHERE A.F_PropertyIdentifier = @F_PropertyTag
		AND B.F_PropertyID = A.F_PropertyID
		AND B.F_PropertyValue = @F_PropertyValue
		AND B.F_EntityID = C.F_EntityID
		AND F_ObjectGroup = ''1''
	RETURN ISNULL(@PropertyText,'''')
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodePropertyTreeText]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodePropertyTreeText]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodePropertyTreeText] (
	@EntityID bigint,
	@PropertyTag varchar(16)
) RETURNS varchar(512) 
BEGIN
	DECLARE @PropertyText varchar(512)
	DECLARE @F_DictionaryKey varchar(16)
	DECLARE @F_DictionaryID bigint
	
	SELECT @F_DictionaryID = C.F_DictionaryID, @F_DictionaryKey = C.F_DictionaryKey FROM dbo.tb_B_EntityTreeModel A, dbo.tb_B_EntityTreeProperty B, dbo.tb_B_ObjectProperty C WHERE A.F_EntityID = @EntityID AND C.F_PropertyIdentifier = @PropertyTag AND A.F_EntityID = B.F_EntityID AND C.F_PropertyID = B.F_PropertyID
	
	IF @F_DictionaryKey IS NULL OR @F_DictionaryKey = ''''
	BEGIN
		SELECT @PropertyText = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = dbo.fun_GetEntityPropertyValue(@EntityID,@PropertyTag)
	END
	ELSE
	BEGIN
		SELECT @PropertyText = F_EntityName FROM dbo.tb_B_EntityTreeModel WHERE F_TemplateID = @F_DictionaryID AND dbo.fun_GetEntityPropertyValue(F_EntityID,@PropertyTag) = dbo.fun_GetEntityPropertyValue(@EntityID,@PropertyTag)
	END

	RETURN ISNULL(@PropertyText,'''')
END
' 
END
GO
/****** Object:  Table [dbo].[tb_E_MappingNode]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_E_MappingNode]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_E_MappingNode](
	[F_NodeCode] [varchar](32) NULL,
	[F_NodeID] [varchar](32) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_E_CityWeatherCode]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_E_CityWeatherCode]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_E_CityWeatherCode](
	[F_CityCode] [char](9) NOT NULL,
	[F_CityName] [varchar](32) NOT NULL,
	[F_Status] [bit] NULL,
 CONSTRAINT [PK_tb_E_CityWeatherCode] PRIMARY KEY CLUSTERED 
(
	[F_CityCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_E_CityDayWeather]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_E_CityDayWeather]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_E_CityDayWeather](
	[F_CityCode] [char](9) NOT NULL,
	[F_DataDate] [date] NOT NULL,
	[F_TempLowValue] [numeric](18, 1) NOT NULL,
	[F_TempHighValue] [numeric](18, 1) NOT NULL,
	[F_Humidity] [varchar](32) NULL,
	[F_AQI] [int] NULL,
 CONSTRAINT [PK_tb_E_CityDayWeather] PRIMARY KEY CLUSTERED 
(
	[F_CityCode] ASC,
	[F_DataDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_D_WorkCalendar]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_D_WorkCalendar]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_D_WorkCalendar](
	[F_Date] [date] NOT NULL,
	[F_Status] [char](1) NULL,
 CONSTRAINT [PK_tb_D_WorkCalendar] PRIMARY KEY CLUSTERED 
(
	[F_Date] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_D_StorageStrategy]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_D_StorageStrategy]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_D_StorageStrategy](
	[F_StrategyType] [varchar](32) NOT NULL,
	[F_EffectiveValue] [int] NULL,
 CONSTRAINT [PK_tb_D_StorageStrategy] PRIMARY KEY CLUSTERED 
(
	[F_StrategyType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_D_StorageLog]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_D_StorageLog]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_D_StorageLog](
	[F_LogCode] [timestamp] NOT NULL,
	[F_LogType] [varchar](32) NOT NULL,
	[F_DateTime] [datetime2](0) NOT NULL,
	[F_LogDetail] [varchar](512) NULL,
 CONSTRAINT [PK_tb_D_StorageLog] PRIMARY KEY CLUSTERED 
(
	[F_LogCode] ASC,
	[F_LogType] ASC,
	[F_DateTime] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_D_PVLTimePrice]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_D_PVLTimePrice]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_D_PVLTimePrice](
	[F_EnergyTypeID] [bigint] NOT NULL,
	[F_PeakStime1] [time](0) NULL,
	[F_PeakEtime1] [time](0) NULL,
	[F_PeakStime2] [time](0) NULL,
	[F_PeakEtime2] [time](0) NULL,
	[F_PeakPrice] [money] NULL,
	[F_ValleyStime] [time](0) NULL,
	[F_ValleyEtime] [time](0) NULL,
	[F_ValleyPrice] [money] NULL,
	[F_LevelPrice] [money] NULL,
 CONSTRAINT [PK_tb_D_PVLTimePrice] PRIMARY KEY CLUSTERED 
(
	[F_EnergyTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_D_GlobalAlarmConf]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_D_GlobalAlarmConf]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_D_GlobalAlarmConf](
	[F_TypeNo] [int] NOT NULL,
	[F_OfflineTime] [int] NULL,
	[F_DiskSpace] [int] NULL,
	[F_ToGroup] [bigint] NULL,
	[F_ToUser] [varchar](max) NULL,
	[F_IsWechat] [bit] NULL,
	[F_IsEmail] [bit] NULL,
 CONSTRAINT [PK_tb_D_GlobalAlarmConf] PRIMARY KEY CLUSTERED 
(
	[F_TypeNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_D_DispatchTask]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_D_DispatchTask]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_D_DispatchTask](
	[F_TaskCode] [bigint] NOT NULL,
	[F_TaskType] [varchar](32) NULL,
	[F_TaskDetail] [varchar](1024) NULL,
	[F_TaskStatus] [int] NULL,
	[F_DispatchTime] [datetime2](0) NULL,
	[F_ExpectedTime] [datetime2](0) NULL,
	[F_DispatchUser] [bigint] NULL,
	[F_FinishTime] [datetime2](0) NULL,
	[F_PreImage] [varchar](128) NULL,
	[F_PostImage] [varchar](128) NULL,
	[F_PreDes] [varchar](1024) NULL,
	[F_PostDes] [varchar](1024) NULL,
	[F_UnableDes] [varchar](1024) NULL,
	[F_PushStatus] [bit] NULL,
	[F_ProjectNo] [bigint] NULL,
 CONSTRAINT [PK_tb_D_DispatchTask] PRIMARY KEY CLUSTERED 
(
	[F_TaskCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_RepairDataTotal]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_RepairDataTotal]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_RepairDataTotal](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_StartTime] [datetime2](0) NOT NULL,
	[F_EndTime] [datetime2](0) NOT NULL,
	[F_RepairStatus] [bit] NULL,
	[F_RepairTime] [datetime2](0) NULL,
 CONSTRAINT [PK_tb_C_RepairDataTotal_1] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ValueLabel] ASC,
	[F_StartTime] ASC,
	[F_EndTime] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_RepairDataDetail]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_RepairDataDetail]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_RepairDataDetail](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_ReadingDate] [datetime2](0) NOT NULL,
	[F_DataValue] [numeric](18, 4) NULL,
	[F_RepairTime] [datetime2](0) NULL,
 CONSTRAINT [PK_tb_C_RepairDataDetail_1] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ValueLabel] ASC,
	[F_ReadingDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_C_EntityReprocess]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_C_EntityReprocess]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_C_EntityReprocess](
	[F_EntityID] [bigint] NOT NULL,
	[F_ReadingDate] [date] NOT NULL,
	[F_EnergyTypeID] [bigint] NOT NULL,
	[F_SynStatus] [bit] NULL,
 CONSTRAINT [PK_tb_C_EntityReprocess] PRIMARY KEY CLUSTERED 
(
	[F_EntityID] ASC,
	[F_ReadingDate] ASC,
	[F_EnergyTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_B_EntityTreeModelTemp]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeModelTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_EntityTreeModelTemp](
	[F_EntityID] [varchar](32) NOT NULL,
	[F_ParentID] [varchar](32) NOT NULL,
	[F_EntityName] [varchar](128) NOT NULL,
	[F_EntitySName] [varchar](128) NULL,
	[F_EntityDepth] [int] NULL,
	[F_TemplateID] [varchar](32) NULL,
	[F_OrderTag] [varchar](16) NULL,
	[F_IsHasChild] [bit] NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[proc_B_CheckEntityToDeviceCsvFile]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_CheckEntityToDeviceCsvFile]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_CheckEntityToDeviceCsvFile]
AS
BEGIN
	DECLARE @Result bit
	DECLARE @Msg varchar(512)
	DECLARE @Count int
	SET @Result = 1
	SET @Msg = ''''
	SET @Count = 0
	SELECT @Count = COUNT(F_EntityID) FROM dbo.tb_B_EntityTreeToDeviceTemp
	IF @Count = 0
	BEGIN
		SET @Result = 0
		SET @Msg = ''文件内容导入失败，没有生成数据记录信息！''
	END
	ELSE
	BEGIN
		SELECT @Count = COUNT(F_EntityID) FROM dbo.tb_B_EntityTreeToDeviceTemp WHERE F_EntityID NOT IN (SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel)
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''对象编号有'' + cast(@Count as varchar) + ''个非法值''
			ELSE SET @Msg = @Msg + ''；对象编号有'' + cast(@Count as varchar) + ''个非法值''
		END
		SET @Count = 0
		SELECT @Count = COUNT(F_DeviceID) FROM dbo.tb_B_EntityTreeToDeviceTemp WHERE F_DeviceID NOT IN (SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel)
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''设备编号有'' + cast(@Count as varchar) + ''个非法值''
			ELSE SET @Msg = @Msg + ''；设备编号有'' + cast(@Count as varchar) + ''个非法值''
		END
	END
	IF @Msg = '''' SELECT @Msg = ''共生成'' + cast(COUNT(F_EntityID) as varchar) + ''条合法数据记录，确认导入？'' FROM dbo.tb_B_EntityTreeToDeviceTemp
	
	SELECT @Result AS result,@Msg AS msg
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_CheckEntityToMeterCsvFile]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_CheckEntityToMeterCsvFile]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_CheckEntityToMeterCsvFile]
AS
BEGIN
	DECLARE @Result bit
	DECLARE @Msg varchar(512)
	DECLARE @Count int
	SET @Result = 1
	SET @Msg = ''''
	SET @Count = 0
	SELECT @Count = COUNT(F_EntityID) FROM dbo.tb_B_EntityTreeMeteringTemp
	IF @Count = 0
	BEGIN
		SET @Result = 0
		SET @Msg = ''文件内容导入失败，没有生成数据记录信息！''
	END
	ELSE
	BEGIN
		SELECT @Count = COUNT(F_EntityID) FROM dbo.tb_B_EntityTreeMeteringTemp WHERE F_EntityID NOT IN (SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel)
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''对象编号有'' + cast(@Count as varchar) + ''个非法值''
			ELSE SET @Msg = @Msg + ''；对象编号有'' + cast(@Count as varchar) + ''个非法值''
		END
		SET @Count = 0
		SELECT @Count = COUNT(F_NodeID) FROM dbo.tb_B_EntityTreeMeteringTemp WHERE F_NodeID NOT IN (SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel)
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''表具编号有'' + cast(@Count as varchar) + ''个非法值''
			ELSE SET @Msg = @Msg + ''；表具编号有'' + cast(@Count as varchar) + ''个非法值''
		END
	END
	IF @Msg = '''' SELECT @Msg = ''共生成'' + cast(COUNT(F_EntityID) as varchar) + ''条合法数据记录，确认导入？'' FROM dbo.tb_B_EntityTreeMeteringTemp
	SELECT @Result AS result,@Msg AS msg
END
' 
END
GO
/****** Object:  Table [dbo].[tb_A_UserToUI]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_UserToUI]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_UserToUI](
	[F_UserCode] [bigint] NOT NULL,
	[F_UI] [char](1) NULL,
 CONSTRAINT [PK_tb_A_UserToUI] PRIMARY KEY CLUSTERED 
(
	[F_UserCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_UserToGroup]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_UserToGroup]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_UserToGroup](
	[F_UserCode] [bigint] NOT NULL,
	[F_GroupCode] [bigint] NOT NULL,
 CONSTRAINT [PK_tb_A_UserToGroup] PRIMARY KEY CLUSTERED 
(
	[F_UserCode] ASC,
	[F_GroupCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_A_UserRelation]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_UserRelation]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_UserRelation](
	[F_RelationCode] [bigint] NOT NULL,
	[F_RelationName] [varchar](32) NULL,
	[F_RelationType] [char](1) NULL,
	[F_ParentCode] [bigint] NULL,
 CONSTRAINT [PK_tb_A_UserRelation] PRIMARY KEY CLUSTERED 
(
	[F_RelationCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_UserGroup]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_UserGroup]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_UserGroup](
	[F_GroupCode] [bigint] NOT NULL,
	[F_GroupName] [varchar](32) NULL,
 CONSTRAINT [PK_tb_A_UserGroup] PRIMARY KEY CLUSTERED 
(
	[F_GroupCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeTemplateName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeTemplateName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeTemplateName] (
	@F_NodeCode bigint
) RETURNS varchar(128)
BEGIN
	DECLARE @F_TemplateName varchar(128)
	SELECT @F_TemplateName = B.F_TemplateName FROM dbo.tb_A_IoTNode A,dbo.tb_A_Template B WHERE A.F_NodeCode = @F_NodeCode AND A.F_TemplateCode = B.F_TemplateCode
	IF @F_TemplateName IS NULL
		SELECT @F_TemplateName = B.F_TemplateName FROM dbo.tb_B_EntityTreeModel A,dbo.tb_A_Template B WHERE A.F_EntityID = @F_NodeCode AND A.F_NodeTemplate = B.F_TemplateCode
	
	RETURN ISNULL(@F_TemplateName,'''')
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeDeviceType]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeDeviceType]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeDeviceType] (
	@F_NodeCode bigint
) RETURNS bigint
BEGIN
	DECLARE @F_DeviceTypeID bigint
	IF EXISTS(SELECT F_NodeCode FROM dbo.tb_A_IoTNode WHERE F_NodeCode = @F_NodeCode)
	BEGIN
		SELECT @F_DeviceTypeID = F_DeviceTypeID FROM dbo.tb_A_IoTNode WHERE F_NodeCode = @F_NodeCode
		IF @F_DeviceTypeID IS NULL OR @F_DeviceTypeID = '''' SELECT @F_DeviceTypeID = B.F_DeviceTypeID FROM dbo.tb_A_IoTNode A,dbo.tb_A_Template B WHERE A.F_NodeCode = @F_NodeCode AND A.F_TemplateCode = B.F_TemplateCode
	END
	ELSE
	BEGIN
		SELECT @F_DeviceTypeID = F_DeviceTypeID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_NodeCode
	END
	
	RETURN @F_DeviceTypeID
END
' 
END
GO
/****** Object:  Table [dbo].[tb_B_DictPortrait]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_DictPortrait]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_DictPortrait](
	[F_GroupID] [bigint] NOT NULL,
	[F_PortraitID] [bigint] NOT NULL,
	[F_PortraitName] [varchar](32) NULL,
 CONSTRAINT [PK_tb_B_DictPortrait] PRIMARY KEY CLUSTERED 
(
	[F_GroupID] ASC,
	[F_PortraitID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_B_DataType]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_B_DataType]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_B_DataType](
	[F_DataTypeID] [varchar](16) NOT NULL,
	[F_DataTypeName] [varchar](32) NOT NULL,
 CONSTRAINT [PK_tb_B_DataType] PRIMARY KEY CLUSTERED 
(
	[F_DataTypeID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_ProjectToEParam]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToEParam]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_ProjectToEParam](
	[F_ProjectNo] [bigint] NOT NULL,
	[F_EnergyType] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
 CONSTRAINT [PK_tb_A_ProjectToEParam] PRIMARY KEY CLUSTERED 
(
	[F_ProjectNo] ASC,
	[F_EnergyType] ASC,
	[F_ValueLabel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_ProjectToDParam]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToDParam]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_ProjectToDParam](
	[F_ProjectNo] [bigint] NOT NULL,
	[F_DeviceType] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
 CONSTRAINT [PK_tb_A_ProjectToDParam] PRIMARY KEY CLUSTERED 
(
	[F_ProjectNo] ASC,
	[F_DeviceType] ASC,
	[F_ValueLabel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_PluginToTree]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_PluginToTree]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_PluginToTree](
	[F_FunctionCode] [bigint] NOT NULL,
	[F_PluginCode] [bigint] NOT NULL,
	[F_EntityTreeNo] [int] NOT NULL,
 CONSTRAINT [PK_tb_A_PluginToTree] PRIMARY KEY CLUSTERED 
(
	[F_PluginCode] ASC,
	[F_EntityTreeNo] ASC,
	[F_FunctionCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_A_PluginToTemplate]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_PluginToTemplate]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_PluginToTemplate](
	[F_FunctionCode] [bigint] NOT NULL,
	[F_PluginCode] [bigint] NOT NULL,
	[F_TemplateCode] [bigint] NOT NULL,
 CONSTRAINT [PK_tb_A_PluginToTemplate] PRIMARY KEY CLUSTERED 
(
	[F_FunctionCode] ASC,
	[F_PluginCode] ASC,
	[F_TemplateCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_A_PluginToEntityRename]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_PluginToEntityRename]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_PluginToEntityRename](
	[F_FunctionCode] [bigint] NOT NULL,
	[F_PluginCode] [bigint] NOT NULL,
	[F_EntityTreeNo] [int] NOT NULL,
	[F_EntityTreeRename] [varchar](64) NULL,
 CONSTRAINT [PK_tb_A_PluginToEntityRename] PRIMARY KEY CLUSTERED 
(
	[F_FunctionCode] ASC,
	[F_PluginCode] ASC,
	[F_EntityTreeNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_PluginToEnergy]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_PluginToEnergy]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_PluginToEnergy](
	[F_FunctionCode] [bigint] NOT NULL,
	[F_PluginCode] [bigint] NOT NULL,
	[F_EnergyCode] [bigint] NOT NULL,
 CONSTRAINT [PK_tb_A_PluginToEnergy] PRIMARY KEY CLUSTERED 
(
	[F_FunctionCode] ASC,
	[F_PluginCode] ASC,
	[F_EnergyCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_A_PluginToDevice]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_PluginToDevice]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_PluginToDevice](
	[F_FunctionCode] [bigint] NOT NULL,
	[F_PluginCode] [bigint] NOT NULL,
	[F_DeviceCode] [bigint] NOT NULL,
 CONSTRAINT [PK_tb_A_PluginToDevice] PRIMARY KEY CLUSTERED 
(
	[F_FunctionCode] ASC,
	[F_PluginCode] ASC,
	[F_DeviceCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_A_PluginToCustom]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_PluginToCustom]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_PluginToCustom](
	[F_FunctionCode] [bigint] NOT NULL,
	[F_PluginCode] [bigint] NOT NULL,
	[F_EntityTreeNo] [int] NOT NULL,
	[F_TemplateID] [bigint] NOT NULL,
	[F_ParentProperty] [bigint] NOT NULL,
 CONSTRAINT [PK_tb_A_PluginToCustom_1] PRIMARY KEY CLUSTERED 
(
	[F_FunctionCode] ASC,
	[F_PluginCode] ASC,
	[F_EntityTreeNo] ASC,
	[F_TemplateID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPluginCustomNodePId]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPluginCustomNodePId]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetPluginCustomNodePId] (
	@F_Type char(1),
	@F_FunctionCode bigint,
	@F_PluginCode bigint,
	@F_EntityTreeNo int,
	@F_CustomID bigint
) RETURNS varchar(32)
BEGIN
	DECLARE @F_NodePId varchar(32)
	DECLARE @F_TemplateID bigint
	DECLARE @F_EntityID bigint
	DECLARE @F_ParentProperty bigint
	DECLARE @F_DictionaryType varchar(1)
	DECLARE @F_DictionaryID varchar(16)
	DECLARE @F_DictionaryKey varchar(16)
	DECLARE @F_PropertyIdentifier varchar(32)
	DECLARE @F_PropertyValue varchar(16)
	
	IF @F_Type = ''a''
	BEGIN
		SELECT @F_TemplateID = F_TemplateID,@F_ParentProperty = F_ParentProperty FROM dbo.tb_A_PluginToCustom WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo = @F_EntityTreeNo AND F_TemplateID = (SELECT F_TemplateID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_CustomID)
		IF @F_TemplateID IS NOT NULL
		BEGIN
			SELECT @F_DictionaryType = F_DictionaryType,@F_DictionaryID = F_DictionaryID,@F_DictionaryKey = F_DictionaryKey,@F_PropertyIdentifier = F_PropertyIdentifier FROM dbo.tb_B_ObjectProperty WHERE F_PropertyID = @F_ParentProperty
			IF @F_DictionaryType = ''1''
			BEGIN
				SELECT @F_PropertyValue = dbo.fun_GetEntityPropertyValue(@F_CustomID,@F_PropertyIdentifier)
				SET @F_NodePId = CASE @F_PropertyValue WHEN '''' THEN ''0'' ELSE @F_DictionaryID + ''&'' + @F_PropertyValue END
			END
			ELSE IF @F_DictionaryType = ''2'' AND @F_DictionaryKey = ''''
			BEGIN
				SELECT @F_PropertyValue = dbo.fun_GetEntityPropertyValue(@F_CustomID,@F_PropertyIdentifier)
				SET @F_NodePId = CASE @F_PropertyValue WHEN '''' THEN ''0'' ELSE dbo.fun_GetEntityPropertyValue(@F_CustomID,@F_PropertyIdentifier) END
			END
			ELSE IF @F_DictionaryType = ''2'' AND @F_DictionaryKey <> ''''
			BEGIN
				SELECT @F_PropertyValue = dbo.fun_GetEntityPropertyValue(@F_CustomID,@F_PropertyIdentifier)
				IF @F_PropertyValue <> '''' SELECT @F_NodePId = F_EntityID FROM dbo.tb_B_EntityTreeModel WHERE F_TemplateID = @F_DictionaryID AND dbo.fun_GetEntityPropertyValue(F_EntityID,@F_PropertyIdentifier) = @F_PropertyValue
				ELSE SET @F_NodePId = ''0''
			END
		END
		ELSE
		BEGIN
			SELECT
				TOP 1 @F_NodePId = A.F_EntityID
			FROM dbo.tb_A_PluginToEntity A,dbo.fun_GetParentNodeByChild(@F_CustomID) B
			WHERE A.F_FunctionCode = @F_FunctionCode
				AND A.F_PluginCode = @F_PluginCode
				AND A.F_EntityTreeNo = @F_EntityTreeNo
				AND A.F_EntityID = B.id
			ORDER BY B.depth
			IF @F_NodePId IS NULL SET @F_NodePId = ''0''
		END
	END
	ELSE IF @F_Type = ''v''
	BEGIN
		SELECT
			TOP 1 @F_EntityID = A.F_EntityID
		FROM dbo.tb_A_PluginToEntity A,dbo.tb_B_EntityTreeModel B
		WHERE B.F_TemplateID = @F_CustomID
			AND A.F_FunctionCode = @F_FunctionCode
			AND A.F_PluginCode = @F_PluginCode
			AND A.F_EntityTreeNo = @F_EntityTreeNo
			AND A.F_EntityID = B.F_EntityID
		SELECT
			TOP 1 @F_NodePId = A.F_EntityID
		FROM dbo.tb_A_PluginToEntity A,dbo.fun_GetParentNodeByChild(@F_EntityID) B
		WHERE A.F_FunctionCode = @F_FunctionCode
			AND A.F_PluginCode = @F_PluginCode
			AND A.F_EntityTreeNo = @F_EntityTreeNo
			AND A.F_EntityID = B.id
		ORDER BY B.depth
			IF @F_NodePId IS NULL SET @F_NodePId = ''0''
	END
	
	RETURN @F_NodePId
END
' 
END
GO
/****** Object:  Table [dbo].[tb_A_Plugins]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_Plugins]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_Plugins](
	[F_PluginCode] [bigint] NOT NULL,
	[F_PluginName] [varchar](64) NULL,
	[F_PluginTag] [varchar](64) NULL,
	[F_PluginTypeNo] [char](1) NULL,
	[F_PluginCategory] [char](1) NULL,
	[F_IsConfig] [bit] NULL,
	[F_ConfType] [varchar](1) NULL,
	[F_EnergyConfig] [bit] NULL,
	[F_TemplateConfig] [bit] NULL,
	[F_DeviceConfig] [bit] NULL,
	[F_GuideMode] [varchar](4) NULL,
	[F_CreateUser] [bigint] NULL,
	[F_CreateDate] [datetime2](0) NULL,
	[F_UpdateUser] [bigint] NULL,
	[F_UpdateDate] [datetime2](0) NULL,
 CONSTRAINT [PK_tb_A_Plugins] PRIMARY KEY CLUSTERED 
(
	[F_PluginCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_PlanTask]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_PlanTask]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_PlanTask](
	[F_TaskCode] [bigint] NOT NULL,
	[F_TaskName] [varchar](64) NULL,
	[F_TaskTag] [varchar](64) NULL,
	[F_ProjectNo] [int] NULL,
	[F_FunctionCode] [bigint] NULL,
	[F_TaskType] [varchar](16) NULL,
	[F_YearTime] [varchar](11) NULL,
	[F_MonthTime] [varchar](8) NULL,
	[F_DayTime] [varchar](5) NULL,
	[F_WeekDay] [int] NULL,
	[F_WeekTime] [varchar](5) NULL,
	[F_CycleTime] [int] NULL,
	[F_LatelyDate] [datetime2](0) NULL,
 CONSTRAINT [PK_tb_A_PlanTask] PRIMARY KEY CLUSTERED 
(
	[F_TaskCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_MyApp]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_MyApp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_MyApp](
	[F_UserCode] [bigint] NOT NULL,
	[F_AppCode] [bigint] NOT NULL,
	[F_AppType] [int] NULL,
	[F_AppSize] [int] NULL,
	[F_Date] [datetime] NULL,
 CONSTRAINT [PK_tb_A_MyProject] PRIMARY KEY CLUSTERED 
(
	[F_UserCode] ASC,
	[F_AppCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_A_MobileAppToUser]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_MobileAppToUser]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_MobileAppToUser](
	[F_UserCode] [bigint] NOT NULL,
	[F_AppCode] [bigint] NOT NULL,
 CONSTRAINT [PK_tb_A_MobileAppToUser] PRIMARY KEY CLUSTERED 
(
	[F_UserCode] ASC,
	[F_AppCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_A_MobileApp]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_MobileApp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_MobileApp](
	[F_AppCode] [bigint] NOT NULL,
	[F_AppName] [varchar](32) NULL,
	[F_AppTag] [varchar](32) NULL,
	[F_AppType] [varchar](32) NULL,
	[F_FunctionCode] [bigint] NULL,
 CONSTRAINT [PK_tb_A_MobileApp] PRIMARY KEY CLUSTERED 
(
	[F_AppCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_LogType]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_LogType]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_LogType](
	[F_TypeNo] [int] NOT NULL,
	[F_TypeName] [varchar](32) NULL,
 CONSTRAINT [PK_tb_A_LogType] PRIMARY KEY CLUSTERED 
(
	[F_TypeNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_LoginUser]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_LoginUser]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_LoginUser](
	[F_UserCode] [bigint] NOT NULL,
	[F_UserID] [varchar](32) NULL,
	[F_UserName] [varchar](32) NULL,
	[F_UserPwd] [varchar](256) NULL,
	[F_UserType] [char](1) NULL,
	[F_Email] [varchar](32) NULL,
	[F_Mobile] [varchar](11) NULL,
	[F_LockIP] [varchar](15) NULL,
	[F_RoleCode] [bigint] NULL,
	[F_StartDate] [date] NULL,
	[F_EndDate] [date] NULL,
	[F_OpenID] [varchar](128) NULL,
	[F_Kanban] [bigint] NULL,
 CONSTRAINT [PK_tb_A_LoginUser] PRIMARY KEY CLUSTERED 
(
	[F_UserCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_Role]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_Role]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_Role](
	[F_RoleCode] [bigint] NOT NULL,
	[F_RoleName] [varchar](32) NULL,
	[F_RoleGroup] [varchar](32) NULL,
	[F_Kanban] [bigint] NULL,
	[F_Project] [bigint] NULL,
 CONSTRAINT [PK_tb_A_Role] PRIMARY KEY CLUSTERED 
(
	[F_RoleCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_RoleToTree]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToTree]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_RoleToTree](
	[F_RoleCode] [bigint] NOT NULL,
	[F_EntityTreeNo] [int] NOT NULL,
	[F_EntityID] [bigint] NOT NULL,
	[F_AuthFlag] [int] NULL,
 CONSTRAINT [PK_tb_A_RoleToTree] PRIMARY KEY CLUSTERED 
(
	[F_RoleCode] ASC,
	[F_EntityTreeNo] ASC,
	[F_EntityID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetUserDevices]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetUserDevices]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetUserDevices]
	@F_UserCode bigint,
	@F_DeviceTypeID bigint
AS
BEGIN
	DECLARE @F_UserType char(1)
	SELECT @F_UserType = F_UserType FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	
	IF @F_UserType = ''1'' OR @F_UserType = ''2''
	BEGIN
		SELECT
			A.F_EntityID AS F_NodeCode,
			A.F_EntityName AS F_NodeName,
			CONVERT(VARCHAR,B.F_CommTime,120) AS F_CommTime,
			B.F_CommStatus
		FROM dbo.tb_B_EntityTreeModel A 
			LEFT OUTER JOIN dbo.tb_A_IoTNode B ON A.F_EntityID = B.F_NodeCode
		WHERE A.F_ObjectGroup IN (''2'',''3'') 
			AND dbo.fun_GetNodeDeviceType(A.F_EntityID) = @F_DeviceTypeID
			AND A.F_IsDisplay = 1
		ORDER BY A.F_OrderTag
	END
	ELSE
	BEGIN
		SELECT 
			A.F_EntityID AS F_NodeCode,
			A.F_EntityName AS F_NodeName,
			CONVERT(VARCHAR,D.F_CommTime,120) AS F_CommTime,
			D.F_CommStatus
		FROM dbo.tb_B_EntityTreeModel A LEFT OUTER JOIN dbo.tb_A_IoTNode D ON A.F_EntityID = D.F_NodeCode,
			 dbo.tb_A_LoginUser B,
			 dbo.tb_A_RoleToTree C
		WHERE dbo.fun_GetNodeDeviceType(A.F_EntityID) = @F_DeviceTypeID
			AND A.F_IsDisplay = 1
			AND B.F_UserCode = @F_UserCode
			AND B.F_RoleCode = C.F_RoleCode
			AND C.F_EntityID = A.F_EntityID
		ORDER BY A.F_OrderTag
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPluginContextTree]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPluginContextTree]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetPluginContextTree] (
	@F_FunctionCode bigint,
	@F_ProjectNo varchar(16),
	@F_UserCode bigint
)
RETURNS @tb_ContextTree TABLE(tree int,id bigint, name varchar(128), pId bigint,type varchar(1),av bit,flag int) 
BEGIN
    DECLARE @F_UserType char(1)
	SELECT @F_UserType = F_UserType FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	IF @F_UserType = ''1'' OR @F_UserType = ''2''
	BEGIN
		IF @F_ProjectNo = ''''
		BEGIN
			INSERT INTO @tb_ContextTree
			SELECT
				A.F_EntityTreeNo AS tree,
				A.F_EntityID AS id,
				A.F_EntityName AS name,
				A.F_ParentID AS pId,
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av,
				2 AS flag
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToTree B
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND A.F_IsDisplay = 1
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
			ORDER BY pId,A.F_OrderTag
		END
		ELSE
		BEGIN
			INSERT INTO @tb_ContextTree
			SELECT
				A.F_EntityTreeNo AS tree,
				A.F_EntityID AS id,
				A.F_EntityName AS name,
				A.F_ParentID AS pId,
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av,
				2 AS flag
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToTree B,dbo.tb_A_ProjectToTree C
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND C.F_ProjectNo = @F_ProjectNo
				AND A.F_IsDisplay = 1
				AND B.F_EntityTreeNo = C.F_EntityTreeNo
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND C.F_EntityID = A.F_EntityID
			ORDER BY pId,A.F_OrderTag
		END
	END
	ELSE
	BEGIN
		IF @F_ProjectNo = ''''
		BEGIN
			INSERT INTO @tb_ContextTree
			SELECT
				A.F_EntityTreeNo AS tree,
				A.F_EntityID AS id,
				A.F_EntityName AS name,
				A.F_ParentID AS pId,
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av,
				D.F_AuthFlag AS flag
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToTree B,dbo.tb_A_LoginUser C,dbo.tb_A_RoleToTree D
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND C.F_UserCode = @F_UserCode
				AND A.F_IsDisplay = 1
				AND C.F_RoleCode = D.F_RoleCode
				AND B.F_EntityTreeNo = D.F_EntityTreeNo
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND D.F_EntityID = A.F_EntityID
			ORDER BY pId,A.F_OrderTag
		END
		ELSE
		BEGIN
			INSERT INTO @tb_ContextTree
			SELECT
				A.F_EntityTreeNo AS tree,
				A.F_EntityID AS id,
				A.F_EntityName AS name,
				A.F_ParentID AS pId,
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av,
				E.F_AuthFlag AS flag
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToTree B,dbo.tb_A_ProjectToTree C,dbo.tb_A_LoginUser D,dbo.tb_A_RoleToTree E
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND C.F_ProjectNo = @F_ProjectNo
				AND D.F_UserCode = @F_UserCode
				AND A.F_IsDisplay = 1
				AND D.F_RoleCode = E.F_RoleCode
				AND B.F_EntityTreeNo = C.F_EntityTreeNo
				AND B.F_EntityTreeNo = E.F_EntityTreeNo
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND C.F_EntityID = A.F_EntityID
				AND E.F_EntityID = A.F_EntityID
			ORDER BY pId,A.F_OrderTag
		END
	END

    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPluginContextEntity]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPluginContextEntity]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetPluginContextEntity] (
	@F_FunctionCode bigint,
	@F_ProjectNo varchar(16),
	@F_UserCode bigint
)
RETURNS @tb_ContextEntity TABLE(tree int,id bigint, name varchar(128),pId bigint,type varchar(1),av bit)
BEGIN
    DECLARE @F_UserType char(1)
	SELECT @F_UserType = F_UserType FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	IF @F_UserType = ''1'' OR @F_UserType = ''2''
	BEGIN
		IF @F_ProjectNo = ''''
		BEGIN
			INSERT INTO @tb_ContextEntity
			SELECT
				A.F_EntityTreeNo,
				A.F_EntityID,
				A.F_EntityName,
				A.F_ParentID,
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToEntity B
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND A.F_IsDisplay = 1
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND B.F_EntityID = A.F_EntityID
			ORDER BY A.F_EntityTreeNo,A.F_OrderTag
		END
		ELSE
		BEGIN
			INSERT INTO @tb_ContextEntity
			SELECT
				A.F_EntityTreeNo,
				A.F_EntityID,
				A.F_EntityName,
				A.F_ParentID,
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToEntity B,dbo.tb_A_ProjectToTree C
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND C.F_ProjectNo = @F_ProjectNo
				AND A.F_IsDisplay = 1
				AND B.F_EntityTreeNo = C.F_EntityTreeNo
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND B.F_EntityID = C.F_EntityID
				AND C.F_EntityID = A.F_EntityID
			ORDER BY A.F_EntityTreeNo,A.F_OrderTag
		END
	END
	ELSE
	BEGIN
		IF @F_ProjectNo = ''''
		BEGIN
			INSERT INTO @tb_ContextEntity
			SELECT
				A.F_EntityTreeNo,
				A.F_EntityID,
				A.F_EntityName,
				A.F_ParentID,
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToEntity B,dbo.tb_A_LoginUser C,dbo.tb_A_RoleToTree D
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND C.F_UserCode = @F_UserCode
				AND A.F_IsDisplay = 1
				AND C.F_RoleCode = D.F_RoleCode
				AND B.F_EntityTreeNo = D.F_EntityTreeNo
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND B.F_EntityID = D.F_EntityID
				AND D.F_EntityID = A.F_EntityID
			ORDER BY A.F_EntityTreeNo,A.F_OrderTag
		END
		ELSE
		BEGIN
			INSERT INTO @tb_ContextEntity
			SELECT
				A.F_EntityTreeNo,
				A.F_EntityID,
				A.F_EntityName,
				A.F_ParentID,
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToEntity B,dbo.tb_A_ProjectToTree C,dbo.tb_A_LoginUser D,dbo.tb_A_RoleToTree E
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND C.F_ProjectNo = @F_ProjectNo
				AND D.F_UserCode = @F_UserCode
				AND A.F_IsDisplay = 1
				AND D.F_RoleCode = E.F_RoleCode
				AND B.F_EntityTreeNo = C.F_EntityTreeNo
				AND B.F_EntityTreeNo = E.F_EntityTreeNo
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND B.F_EntityID = C.F_EntityID
				AND C.F_EntityID = E.F_EntityID
				AND E.F_EntityID = A.F_EntityID
			ORDER BY A.F_EntityTreeNo,A.F_OrderTag
		END
	END

    RETURN
END
' 
END
GO
/****** Object:  Table [dbo].[tb_A_Log]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_Log]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_Log](
	[F_LogCode] [timestamp] NOT NULL,
	[F_TypeNo] [int] NOT NULL,
	[F_DateTime] [datetime2](0) NOT NULL,
	[F_UserID] [varchar](16) NULL,
	[F_IP] [varchar](32) NULL,
	[F_LogDetail] [varchar](512) NULL,
 CONSTRAINT [PK_tb_A_EventLog] PRIMARY KEY CLUSTERED 
(
	[F_LogCode] ASC,
	[F_TypeNo] ASC,
	[F_DateTime] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_IoTRouter]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_IoTRouter]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_IoTRouter](
	[F_RouterCode] [bigint] NOT NULL,
	[F_RouterName] [varchar](32) NULL,
	[F_RouterIP] [varchar](15) NULL,
	[F_RouterPort] [int] NULL,
	[F_Interval] [int] NULL,
 CONSTRAINT [PK_tb_A_IoTRouter] PRIMARY KEY CLUSTERED 
(
	[F_RouterCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_IoTNodeTempV]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_IoTNodeTempV]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_IoTNodeTempV](
	[F_NodeCode] [varchar](32) NULL,
	[F_PropertyIdentifier] [varchar](32) NULL,
	[F_PropertyValue] [varchar](512) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_IoTNodeTemp]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_IoTNodeTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_IoTNodeTemp](
	[F_NodeCode] [varchar](32) NOT NULL,
	[F_NodeName] [varchar](128) NULL,
	[F_NodeDepth] [int] NULL,
	[F_NodeTemplate] [varchar](128) NULL,
	[F_ParentCode] [varchar](32) NULL,
	[F_ToEntity] [varchar](max) NULL,
	[F_EnergyTypeID] [varchar](32) NULL,
	[F_DeviceTypeID] [varchar](32) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Trigger [trigger_update_tb_A_IoTNode]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[trigger_update_tb_A_IoTNode]'))
EXEC dbo.sp_executesql @statement = N'

CREATE TRIGGER [dbo].[trigger_update_tb_A_IoTNode] ON [dbo].[tb_A_IoTNode] FOR UPDATE
AS
BEGIN
	DECLARE @F_NodeCode bigint
	DECLARE @F_CommTime datetime2(0)
	DECLARE @F_CommStatus bit

	SELECT @F_NodeCode = F_NodeCode,@F_CommTime = F_CommTime,@F_CommStatus = F_CommStatus FROM INSERTED
	
	IF @F_CommTime IS NOT NULL AND @F_CommStatus IS NOT NULL
	BEGIN
		IF NOT EXISTS(SELECT F_NodeCode FROM dbo.tb_A_IoTNodeComm WHERE F_NodeCode = @F_NodeCode)
		BEGIN
			INSERT INTO dbo.tb_A_IoTNodeComm VALUES (@F_NodeCode,@F_CommTime,NULL,@F_CommStatus)
		END
		ELSE
		BEGIN
			UPDATE dbo.tb_A_IoTNodeComm 
			SET F_EndDate = @F_CommTime,
				F_CommStatus = @F_CommStatus
			WHERE F_NodeCode = @F_NodeCode 
				AND F_EndDate IS NULL 
				AND F_StartDate < @F_CommTime 
				AND F_CommStatus <> @F_CommStatus
			IF @@rowcount <> 0 INSERT INTO dbo.tb_A_IoTNodeComm VALUES (@F_NodeCode,@F_CommTime,NULL,@F_CommStatus)
		END	
	END
END


'
GO
/****** Object:  Table [dbo].[tb_A_IoTApp]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_IoTApp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_IoTApp](
	[F_AppCode] [bigint] NOT NULL,
	[F_AppID] [varchar](16) NOT NULL,
	[F_AppName] [varchar](32) NULL,
	[F_SecretKey] [varchar](512) NULL,
	[F_RouterCode] [bigint] NULL,
 CONSTRAINT [PK_tb_A_IoTApp] PRIMARY KEY CLUSTERED 
(
	[F_AppCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_ImportTemp]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_ImportTemp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_ImportTemp](
	[F_FileNum] [int] NOT NULL,
	[F_FileName] [varchar](64) NULL,
	[F_ImportUser] [varchar](32) NULL,
	[F_ImportDate] [datetime2](0) NULL,
 CONSTRAINT [PK_tb_A_ImportTemp] PRIMARY KEY CLUSTERED 
(
	[F_FileNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_ImportFile]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_ImportFile]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_ImportFile](
	[F_FileNum] [bigint] NOT NULL,
	[F_FileName] [varchar](64) NULL,
	[F_ImportUser] [varchar](32) NULL,
	[F_ImportDate] [datetime2](0) NULL,
	[F_EntityTreeNo] [int] NULL,
 CONSTRAINT [PK_tb_A_ImportFile] PRIMARY KEY CLUSTERED 
(
	[F_FileNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_FunctionType]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_FunctionType]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_FunctionType](
	[F_FunctionTypeNo] [char](1) NOT NULL,
	[F_FunctionTypeName] [varchar](32) NULL,
	[F_FunctionTypeTag] [varchar](32) NULL,
 CONSTRAINT [PK_tb_A_FunctionType] PRIMARY KEY CLUSTERED 
(
	[F_FunctionTypeNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_FileInfo]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_FileInfo]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_FileInfo](
	[F_FileCode] [bigint] NOT NULL,
	[F_FileName] [varchar](64) NULL,
	[F_UploadName] [varchar](64) NULL,
	[F_FileType] [varchar](16) NULL,
	[F_BookCode] [bigint] NULL,
	[F_PageNum] [int] NULL,
	[F_UploadUser] [varchar](16) NULL,
	[F_UploadDate] [datetime2](0) NULL,
 CONSTRAINT [PK_tb_A_FileInfo] PRIMARY KEY CLUSTERED 
(
	[F_FileCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_EventType]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_EventType]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_EventType](
	[F_TypeNo] [int] NOT NULL,
	[F_TypeName] [varchar](32) NULL,
 CONSTRAINT [PK_tb_A_EventType] PRIMARY KEY CLUSTERED 
(
	[F_TypeNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_EventToUser]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_EventToUser]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_EventToUser](
	[F_EventCode] [bigint] NOT NULL,
	[F_PushUser] [bigint] NOT NULL,
	[F_PushWay] [varchar](2) NULL,
	[F_PushDate] [datetime2](0) NULL,
	[F_ACKStatus] [int] NULL,
	[F_ACKDate] [datetime2](0) NULL,
	[F_From] [int] NULL,
	[F_FromUser] [bigint] NULL,
 CONSTRAINT [PK_tb_A_EventToUser] PRIMARY KEY CLUSTERED 
(
	[F_EventCode] ASC,
	[F_PushUser] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_EventStamp]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_EventStamp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_EventStamp](
	[F_SerialCode] [bigint] NULL
) ON [PRIMARY]
END
GO
/****** Object:  Table [dbo].[tb_A_EventItem]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_EventItem]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_EventItem](
	[F_TypeNo] [int] NOT NULL,
	[F_ItemNo] [int] NOT NULL,
	[F_ItemName] [varchar](32) NULL,
 CONSTRAINT [PK_tb_A_EventItem] PRIMARY KEY CLUSTERED 
(
	[F_TypeNo] ASC,
	[F_ItemNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_Event]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_Event]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_Event](
	[F_EventCode] [bigint] NOT NULL,
	[F_DateTime] [datetime2](0) NOT NULL,
	[F_TypeNo] [int] NOT NULL,
	[F_ItemNo] [bigint] NULL,
	[F_Rank] [int] NULL,
	[F_ObjectType] [bigint] NULL,
	[F_ObjectCode] [bigint] NULL,
	[F_ValueLabel] [varchar](32) NULL,
	[F_ProjectNo] [bigint] NULL,
	[F_Detail] [varchar](max) NULL,
	[F_RecoverTime] [datetime2](0) NULL,
	[F_TaskCode] [bigint] NULL,
 CONSTRAINT [PK_tb_A_Event] PRIMARY KEY CLUSTERED 
(
	[F_EventCode] ASC,
	[F_DateTime] ASC,
	[F_TypeNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetEventSum]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetEventSum]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetEventSum]
	@F_DeviceType varchar(32),
	@F_BeginDate date,
	@F_EndDate date,
	@F_Rank varchar(1),
	@F_PushUser bigint
AS
BEGIN
	IF @F_DeviceType = ''''
	BEGIN
		IF @F_Rank = ''''
		BEGIN
			SELECT 
				A.F_TypeNo,
				B.F_TypeName,
				COUNT(A.F_EventCode) AS F_TotalNum,
				COUNT(C.F_EventCode) AS F_UnconfirmedNum
			FROM dbo.tb_A_EventType B,
				dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser C ON C.F_PushUser = @F_PushUser AND A.F_EventCode = C.F_EventCode AND F_ACKStatus = 0
			WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = B.F_TypeNo
			GROUP BY A.F_TypeNo,B.F_TypeName
		END
		ELSE
		BEGIN
			SELECT 
				A.F_TypeNo,
				B.F_TypeName,
				COUNT(A.F_EventCode) AS F_TotalNum,
				COUNT(C.F_EventCode) AS F_UnconfirmedNum
			FROM dbo.tb_A_EventType B,
				dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser C ON C.F_PushUser = @F_PushUser AND A.F_EventCode = C.F_EventCode AND F_ACKStatus = 0
			WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_Rank = @F_Rank
				AND A.F_TypeNo = B.F_TypeNo
			GROUP BY A.F_TypeNo,B.F_TypeName
		END
	END
	ELSE
	BEGIN
		IF @F_Rank = ''''
		BEGIN
			SELECT 
				A.F_TypeNo,
				B.F_TypeName,
				COUNT(A.F_EventCode) AS F_TotalNum,
				COUNT(C.F_EventCode) AS F_UnconfirmedNum
			FROM dbo.tb_A_EventType B,
				dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser C ON C.F_PushUser = @F_PushUser AND A.F_EventCode = C.F_EventCode AND F_ACKStatus = 0
			WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
				AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
				AND A.F_TypeNo = B.F_TypeNo
			GROUP BY A.F_TypeNo,B.F_TypeName
		END
		ELSE
		BEGIN
			SELECT 
				A.F_TypeNo,
				B.F_TypeName,
				COUNT(A.F_EventCode) AS F_TotalNum,
				COUNT(C.F_EventCode) AS F_UnconfirmedNum
			FROM dbo.tb_A_EventType B,
				dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser C ON C.F_PushUser = @F_PushUser AND A.F_EventCode = C.F_EventCode AND F_ACKStatus = 0
			WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_Rank = @F_Rank
				AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
				AND A.F_TypeNo = B.F_TypeNo
			GROUP BY A.F_TypeNo,B.F_TypeName
		END
	END
END
' 
END
GO
/****** Object:  Table [dbo].[tb_A_EmailSet]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_EmailSet]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_EmailSet](
	[F_SmtpServer] [varchar](32) NULL,
	[F_SendEmail] [varchar](32) NULL,
	[F_SendName] [varchar](32) NULL,
	[F_LoginID] [varchar](32) NULL,
	[F_LoginPwd] [varchar](32) NULL
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_EmailInfo]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_EmailInfo]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_EmailInfo](
	[F_EmailCode] [bigint] NOT NULL,
	[F_Recipient] [varchar](1024) NULL,
	[F_Copier] [varchar](1024) NULL,
	[F_Theme] [varchar](1024) NULL,
	[F_Content] [varchar](max) NULL,
	[F_Attachment] [varchar](128) NULL,
	[F_AttachCode] [varchar](128) NULL,
	[F_MakeTime] [datetime2](0) NULL,
	[F_SendTime] [datetime2](0) NULL,
	[F_Status] [int] NULL,
 CONSTRAINT [PK_tb_A_EmailInfo] PRIMARY KEY CLUSTERED 
(
	[F_EmailCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_DocumentInfo]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_DocumentInfo]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_DocumentInfo](
	[F_DocumentCode] [bigint] NOT NULL,
	[F_DocumentName] [varchar](64) NULL,
	[F_DocumentType] [varchar](16) NULL,
	[F_ParentCode] [bigint] NULL,
	[F_FileType] [varchar](16) NULL,
	[F_UploadName] [varchar](64) NULL,
	[F_CreateUser] [varchar](16) NULL,
	[F_CreateDate] [datetime2](0) NULL,
 CONSTRAINT [PK_tb_A_DocumentInfo] PRIMARY KEY CLUSTERED 
(
	[F_DocumentCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_DeviationValue]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_DeviationValue]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_DeviationValue](
	[F_NodeCode] [bigint] NOT NULL,
	[F_ValueLabel] [varchar](32) NOT NULL,
	[F_DeviationValue] [numeric](18, 2) NULL,
	[F_CorrectionTime] [datetime2](0) NULL,
 CONSTRAINT [PK_tb_A_IoTDeviationValue] PRIMARY KEY CLUSTERED 
(
	[F_NodeCode] ASC,
	[F_ValueLabel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_Color]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_Color]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_Color](
	[F_ColorNum] [int] NOT NULL,
	[F_ColorValue] [char](7) NULL,
 CONSTRAINT [PK_tb_A_Color] PRIMARY KEY CLUSTERED 
(
	[F_ColorNum] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_BookType]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_BookType]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_BookType](
	[F_TypeNo] [int] NOT NULL,
	[F_TypeName] [varchar](32) NULL,
 CONSTRAINT [PK_tb_A_BookType] PRIMARY KEY CLUSTERED 
(
	[F_TypeNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_BookInfo]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_BookInfo]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_BookInfo](
	[F_BookCode] [bigint] NOT NULL,
	[F_BookName] [varchar](64) NULL,
	[F_BookImage] [varchar](32) NULL,
	[F_TypeNo] [int] NULL,
	[F_MakeUser] [varchar](16) NULL,
	[F_MakeDate] [datetime2](0) NULL,
 CONSTRAINT [PK_tb_A_BookInfo] PRIMARY KEY CLUSTERED 
(
	[F_BookCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_Agent]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_Agent]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_Agent](
	[F_AgentCode] [bigint] NOT NULL,
	[F_AgentName] [varchar](32) NULL,
	[F_AgentAbbr] [varchar](16) NULL,
	[F_ProjectTag] [varchar](16) NULL,
	[F_ProjectType] [varchar](32) NULL,
	[F_ProjectColor] [char](7) NULL,
	[F_ProjectDes] [varchar](128) NULL,
	[F_AgentURL] [varchar](512) NULL,
	[F_PublicKey] [varchar](128) NULL,
 CONSTRAINT [PK_tb_A_Agent] PRIMARY KEY CLUSTERED 
(
	[F_AgentCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetNodeSumDataStatis]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetNodeSumDataStatis]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetNodeSumDataStatis] 
	@DeviceStr varchar(max),	-- 设备对象列表
	@ValueStr varchar(max),		-- 设备参数列表
	@DateType smallint,			-- 1：按年 2：按月 3：按日
	@StartDate date,			-- 起始日期yyyy-MM-dd
	@EndDate date,				-- 截止日期yyyy-MM-dd
	@GroupBy smallint			-- 1：时间分组设备汇总 2：时间分组设备分组 3：设备分组时间汇总 4：设备分组时间分组
AS
BEGIN
	DECLARE @SqlText varchar(max)
	DECLARE @Field varchar(max)
	DECLARE @SubField varchar(max)
	DECLARE @GroupField varchar(max)
	DECLARE @OrderField varchar(max)
	DECLARE @DateSql varchar(max)
	DECLARE @TableName varchar(64)

	IF @DateType = 1
	BEGIN
		SET @SubField = ''A.F_EntityID AS F_NodeCode,A.F_EntityName AS F_NodeName,A.F_OrderTag,C.F_ObjectID AS F_ValueLabel,D.sYear''
		IF @GroupBy = 1
		BEGIN
			SET @Field = ''A.sYear,A.F_ValueLabel''
			SET @GroupField = ''A.sYear,A.F_ValueLabel''
			SET @OrderField = ''A.sYear,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 2
		BEGIN
			SET @Field = ''A.sYear,A.F_NodeCode,dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.sYear,A.F_NodeCode,A.F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.sYear,A.F_OrderTag,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 3
		BEGIN
			SET @Field = ''A.F_NodeCode,dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.F_NodeCode,A.F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.F_OrderTag,A.F_ValueLabel'' 
		END
		ELSE IF @GroupBy = 4
		BEGIN
			SET @Field = ''A.F_NodeCode,dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,A.F_OrderTag,A.F_ValueLabel,A.sYear'' 
			SET @GroupField = ''A.F_NodeCode,A.F_NodeName,A.F_OrderTag,A.F_ValueLabel,A.sYear'' 
			SET @OrderField = ''A.F_OrderTag,A.F_ValueLabel,A.sYear'' 
		END
		SET @TableName = ''dbo.tb_C_NodeMonthData''
		SET @DateSql = ''B.F_ReadingYear = A.sYear''
	END
	ELSE IF @DateType = 2
	BEGIN
		SET @SubField = ''A.F_EntityID AS F_NodeCode,A.F_EntityName AS F_NodeName,A.F_OrderTag,C.F_ObjectID AS F_ValueLabel,D.sYear,D.sMonth''
		IF @GroupBy = 1
		BEGIN
			SET @Field = ''A.sYear,A.sMonth,A.F_ValueLabel''
			SET @GroupField = ''A.sYear,A.sMonth,A.F_ValueLabel''
			SET @OrderField = ''A.sYear,A.sMonth,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 2
		BEGIN
			SET @Field = ''A.sYear,A.sMonth,A.F_NodeCode,dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.sYear,A.sMonth,A.F_NodeCode,A.F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.sYear,A.sMonth,A.F_OrderTag,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 3
		BEGIN
			SET @Field = ''A.F_NodeCode,dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.F_NodeCode,A.F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.F_OrderTag,A.F_ValueLabel'' 
		END
		ELSE IF @GroupBy = 4
		BEGIN
			SET @Field = ''A.F_NodeCode,dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,A.F_OrderTag,A.F_ValueLabel,A.sYear,A.sMonth'' 
			SET @GroupField = ''A.F_NodeCode,A.F_NodeName,A.F_OrderTag,A.F_ValueLabel,A.sYear,A.sMonth'' 
			SET @OrderField = ''A.F_OrderTag,A.F_ValueLabel,A.sYear,A.sMonth'' 
		END
		SET @TableName = ''dbo.tb_C_NodeMonthData''
		SET @DateSql = ''B.F_ReadingYear = A.sYear AND B.F_ReadingMonth = A.sMonth''
	END
	ELSE IF @DateType = 3
	BEGIN
		SET @SubField = ''A.F_EntityID AS F_NodeCode,A.F_EntityName AS F_NodeName,A.F_OrderTag,C.F_ObjectID AS F_ValueLabel,D.sYear,D.sMonth,D.sDay''
		IF @GroupBy = 1
		BEGIN
			SET @Field = ''A.sYear,A.sMonth,A.sDay,A.F_ValueLabel''
			SET @GroupField = ''A.sYear,A.sMonth,A.sDay,A.F_ValueLabel''
			SET @OrderField = ''A.sYear,A.sMonth,A.sDay,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 2
		BEGIN
			SET @Field = ''A.sYear,A.sMonth,A.sDay,A.F_NodeCode,dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.sYear,A.sMonth,A.sDay,A.F_NodeCode,A.F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.sYear,A.sMonth,A.sDay,A.F_OrderTag,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 3
		BEGIN
			SET @Field = ''A.F_NodeCode,dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.F_NodeCode,A.F_NodeName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.F_OrderTag,A.F_ValueLabel'' 
		END
		ELSE IF @GroupBy = 4
		BEGIN
			SET @Field = ''A.F_NodeCode,dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,A.F_OrderTag,A.F_ValueLabel,A.sYear,A.sMonth,A.sDay'' 
			SET @GroupField = ''A.F_NodeCode,A.F_NodeName,A.F_OrderTag,A.F_ValueLabel,A.sYear,A.sMonth,A.sDay'' 
			SET @OrderField = ''A.F_OrderTag,A.F_ValueLabel,A.sYear,A.sMonth,A.sDay'' 
		END
		SET @TableName = ''dbo.tb_C_NodeDayData''
		SET @DateSql = ''YEAR(B.F_ReadingDate) = A.sYear AND MONTH(B.F_ReadingDate) = A.sMonth AND DAY(B.F_ReadingDate) = A.sDay''
	END
	SET @SqlText = 
	''SELECT ''
		+ @Field
		+ '',ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData ''
		+ '',ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData ''
		+ '',ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData ''
		+ '',ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData ''
	+ ''FROM 
	  (
		SELECT ''
		+ @SubField + '' 
		FROM dbo.tb_B_EntityTreeModel A,
			dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
			dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
			dbo.fun_GetSplityMdDate('''''' + CAST(@StartDate AS VARCHAR) + '''''', '''''' + CAST(@EndDate AS VARCHAR) + '''''','' + CAST(@DateType AS VARCHAR) + '') D   
		WHERE A.F_EntityID = B.F_ObjectID 
	  ) A LEFT OUTER JOIN '' + @TableName + '' B 
			ON A.F_NodeCode = B.F_NodeCode AND A.F_ValueLabel = B.F_ValueLabel AND '' + @DateSql
	+ '' GROUP BY '' + @GroupField
	+ '' ORDER BY '' + @OrderField
	EXEC (@SqlText)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_GetDbDiskFileData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_GetDbDiskFileData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_GetDbDiskFileData]
AS
BEGIN
	CREATE TABLE #tb_disk_data(disk_name varchar(16),disk_size numeric(18,2))
	INSERT INTO #tb_disk_data EXEC master.dbo.xp_fixeddrives
	
	SELECT 
		A.name file_name , 
		CAST(A.size/(8*16.0) AS DECIMAL(12,2)) AS file_set_size,
		CAST(fileproperty(B.name,''SpaceUsed'')/(8*16.0) AS DECIMAL(12,2)) AS file_used_size,
		CAST((fileproperty(B.name,''SpaceUsed'')/(8*16.0))/(B.size/(8*16.0))*100.0  AS DECIMAL(12,2)) AS file_space_rate,
		A.type_desc AS file_type,
		LEFT(B.filename,1) AS disk_name,
		C.disk_size AS disk_size
	FROM Things.sys.database_files A,
		Things.sys.sysfiles AS B,
		#tb_disk_data C
	WHERE A.file_id = B.fileid
		AND LEFT(B.filename,1) = C.disk_name
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntityDeviceSumStatis]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntityDeviceSumStatis]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntityDeviceSumStatis] 
	@EntityStr varchar(max),	-- 对象实体列表
	@DeviceTypeID bigint,		-- 设备类型编码
	@ValueStr varchar(max),		-- 设备参数列表
	@DateType smallint,			-- 1：按年 2：按月 3：按日
	@StartDate date,			-- 起始日期yyyy-MM-dd
	@EndDate date,				-- 截止日期yyyy-MM-dd
	@GroupBy smallint,			-- 1：时间分组设备汇总 2：时间分组设备分组 3：设备分组时间汇总 4：设备分组时间分组
	@F_IsHasChild bit
AS
BEGIN
	DECLARE @SqlText varchar(max)
	DECLARE @Field varchar(max)
	DECLARE @SubField varchar(max)
	DECLARE @GroupField varchar(max)
	DECLARE @OrderField varchar(max)
	DECLARE @DateSql varchar(max)
	DECLARE @TableName varchar(64)

	IF @DateType = 1
	BEGIN
		SET @SubField = ''A.F_EntityID,A.F_EntityName,A.F_OrderTag,C.F_ObjectID AS F_ValueLabel,D.sYear''
		IF @GroupBy = 1
		BEGIN
			SET @Field = ''A.sYear,A.F_ValueLabel''
			SET @GroupField = ''A.sYear,A.F_ValueLabel''
			SET @OrderField = ''A.sYear,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 2
		BEGIN
			SET @Field = ''A.sYear,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.sYear,A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.sYear,A.F_OrderTag,A.F_EntityID,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 3
		BEGIN
			SET @Field = ''A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.F_OrderTag,A.F_EntityID,A.F_ValueLabel'' 
		END
		ELSE IF @GroupBy = 4
		BEGIN
			SET @Field = ''A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_OrderTag,A.F_ValueLabel,A.sYear'' 
			SET @GroupField = ''A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_ValueLabel,A.sYear'' 
			SET @OrderField = ''A.F_OrderTag,A.F_EntityID,A.F_ValueLabel,A.sYear'' 
		END
		SET @TableName = ''dbo.tb_C_NodeMonthData''
		SET @DateSql = ''B.F_ReadingYear = A.sYear''
	END
	ELSE IF @DateType = 2
	BEGIN
		SET @SubField = ''A.F_EntityID,A.F_EntityName,A.F_OrderTag,C.F_ObjectID AS F_ValueLabel,D.sYear,D.sMonth''
		IF @GroupBy = 1
		BEGIN
			SET @Field = ''A.sYear,A.sMonth,A.F_ValueLabel''
			SET @GroupField = ''A.sYear,A.sMonth,A.F_ValueLabel''
			SET @OrderField = ''A.sYear,A.sMonth,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 2
		BEGIN
			SET @Field = ''A.sYear,A.sMonth,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.sYear,A.sMonth,A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.sYear,A.sMonth,A.F_OrderTag,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 3
		BEGIN
			SET @Field = ''A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.F_OrderTag,A.F_EntityID,A.F_ValueLabel'' 
		END
		ELSE IF @GroupBy = 4
		BEGIN
			SET @Field = ''A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_OrderTag,A.F_ValueLabel,A.sYear,A.sMonth'' 
			SET @GroupField = ''A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_ValueLabel,A.sYear,A.sMonth'' 
			SET @OrderField = ''A.F_OrderTag,A.F_EntityID,A.F_ValueLabel,A.sYear,A.sMonth'' 
		END
		SET @TableName = ''dbo.tb_C_NodeMonthData''
		SET @DateSql = ''B.F_ReadingYear = A.sYear AND B.F_ReadingMonth = A.sMonth''
	END
	ELSE IF @DateType = 3
	BEGIN
		SET @SubField = ''A.F_EntityID,A.F_EntityName,A.F_OrderTag,C.F_ObjectID AS F_ValueLabel,D.sYear,D.sMonth,D.sDay''
		IF @GroupBy = 1
		BEGIN
			SET @Field = ''A.sYear,A.sMonth,A.sDay,A.F_ValueLabel''
			SET @GroupField = ''A.sYear,A.sMonth,A.sDay,A.F_ValueLabel''
			SET @OrderField = ''A.sYear,A.sMonth,A.sDay,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 2
		BEGIN
			SET @Field = ''A.sYear,A.sMonth,A.sDay,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.sYear,A.sMonth,A.sDay,A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.sYear,A.sMonth,A.sDay,A.F_OrderTag,A.F_ValueLabel''
		END
		ELSE IF @GroupBy = 3
		BEGIN
			SET @Field = ''A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @GroupField = ''A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_ValueLabel'' 
			SET @OrderField = ''A.F_OrderTag,A.F_EntityID,A.F_ValueLabel'' 
		END
		ELSE IF @GroupBy = 4
		BEGIN
			SET @Field = ''A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_OrderTag,A.F_ValueLabel,A.sYear,A.sMonth,A.sDay'' 
			SET @GroupField = ''A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_ValueLabel,A.sYear,A.sMonth,A.sDay'' 
			SET @OrderField = ''A.F_OrderTag,A.F_EntityID,A.F_ValueLabel,A.sYear,A.sMonth,A.sDay'' 
		END
		SET @TableName = ''dbo.tb_C_NodeDayData''
		SET @DateSql = ''YEAR(B.F_ReadingDate) = A.sYear AND MONTH(B.F_ReadingDate) = A.sMonth AND DAY(B.F_ReadingDate) = A.sDay''
	END
	IF @F_IsHasChild = 0
	BEGIN
		SET @SqlText = 
		''SELECT ''
			+ @Field
			+ '',ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData ''
			+ '',ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData ''
			+ '',ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData ''
			+ '',ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData ''
		+ ''FROM 
		  (
			SELECT ''
			+ @SubField + '' 
			FROM dbo.tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma('''''' + @EntityStr + '''''') B, 
				dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
				dbo.fun_GetSplityMdDate('''''' + CAST(@StartDate AS VARCHAR) + '''''', '''''' + CAST(@EndDate AS VARCHAR) + '''''','' + CAST(@DateType AS VARCHAR) + '') D   
			WHERE A.F_EntityID = B.F_ObjectID 
		  ) A LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice C 
				ON A.F_EntityID = C.F_EntityID AND dbo.fun_GetNodeDeviceType(C.F_DeviceID) = '' + CAST(@DeviceTypeID AS VARCHAR) + '' 
			  LEFT OUTER JOIN '' + @TableName + '' B 
				ON C.F_DeviceID = B.F_NodeCode AND A.F_ValueLabel = B.F_ValueLabel AND '' + @DateSql
		+ '' GROUP BY '' + @GroupField
		+ '' ORDER BY '' + @OrderField
	END
	ELSE
	BEGIN
		SET @SqlText = 
		''SELECT ''
			+ @Field
			+ '',ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData ''
			+ '',ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData ''
			+ '',ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData ''
			+ '',ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData ''
		+ ''FROM 
		  (
			SELECT ''
			+ @SubField + '' 
			FROM dbo.tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma('''''' + @EntityStr + '''''') B, 
				dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
				dbo.fun_GetSplityMdDate('''''' + CAST(@StartDate AS VARCHAR) + '''''', '''''' + CAST(@EndDate AS VARCHAR) + '''''','' + CAST(@DateType AS VARCHAR) + '') D   
			WHERE A.F_EntityID = B.F_ObjectID 
		  ) A LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice C 
				ON (A.F_EntityID = C.F_EntityID OR C.F_EntityID IN (SELECT id FROM dbo.fun_GetChildNodeByParent(A.F_EntityID)))
				AND dbo.fun_GetNodeDeviceType(C.F_DeviceID) = '' + CAST(@DeviceTypeID AS VARCHAR) + '' 
			  LEFT OUTER JOIN '' + @TableName + '' B 
				ON C.F_DeviceID = B.F_NodeCode AND A.F_ValueLabel = B.F_ValueLabel AND '' + @DateSql
		+ '' GROUP BY '' + @GroupField
		+ '' ORDER BY '' + @OrderField
	END
	EXEC (@SqlText)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEnergySumStatis]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEnergySumStatis]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEnergySumStatis]
	@EntityStr varchar(max),		-- 逗号分割对象
	@EnergyTypeID bigint,			-- 能源内部编码
	@ValueLabel varchar(32),		-- 参数标签
	@DataGranularity varchar(32),	-- 1：总量 2：物理分项 3：管理分项
	@DataDimension smallint,		-- 1：总计 2：面均 3：人均
	@DateType smallint,				-- 1：按年 2：按月 3：按日
	@StartDate date,				-- 起始日期yyyy-MM-dd
	@EndDate date,					-- 截止日期yyyy-MM-dd
	@DateFilter smallint,			-- 1：全部 2：工作日 3：节假日
	@TimeFilter smallint,			-- 1：全部 2：工作时间 3：非工作时间 4：过渡时间
	@OrderBy smallint,				-- 1：时间升序 2：（值）升序 3：（值）降序
	@GroupBy smallint				-- 1：时间分组对象汇总 2：时间分组对象分组 3：对象分组时间汇总 4：对象分组时间分组
AS
BEGIN
	DECLARE @SqlText nvarchar(max)
	DECLARE @DataTag char(1)
	DECLARE @DateFiled varchar(512)
	
	SET @DataTag = CASE WHEN @DateFilter = 1 AND (@DateType = 1 OR @DateType = 2) THEN ''M'' ELSE ''D'' END
	SET @DateFiled = CASE WHEN @DateType = 1 AND @DateFilter <> 1 THEN ''SUBSTRING(CAST(A.F_DayDate AS VARCHAR),1,4)'' WHEN @DateType = 2 AND @DateFilter <> 1 THEN ''SUBSTRING(CAST(A.F_DayDate AS VARCHAR),1,7)'' ELSE ''A.F_DayDate'' END
	SET @DataGranularity = CASE WHEN @DataGranularity = ''1'' THEN '''' WHEN @DataGranularity = ''2'' THEN ''P_EnergyItem'' WHEN @DataGranularity = ''3'' THEN ''P_EnergyProperty'' END
	SET @SqlText =
	''SELECT ''
		+ CASE 
			WHEN @GroupBy = 1 THEN
			CASE 
				WHEN @DataGranularity = '''' THEN
				CASE
					WHEN @TimeFilter = 1 THEN @DateFiled + '' AS F_Date,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,SUM(B.F_WorkingData) AS F_WorkingData,SUM(B.F_UnWorkingData) AS F_UnWorkingData,SUM(B.F_FlexibleData) AS F_FlexibleData,SUM(B.F_PeakData) AS F_PeakData,SUM(B.F_ValleyData) AS F_ValleyData,SUM(B.F_LevelData) AS F_LevelData,SUM(B.F_PeakCost) AS F_PeakCost,SUM(B.F_ValleyCost) AS F_ValleyCost,SUM(B.F_LevelCost) AS F_LevelCost '' 
					WHEN @TimeFilter = 2 THEN @DateFiled + '' AS F_Date,SUM(B.F_WorkingData) AS F_DataValue '' 
					WHEN @TimeFilter = 3 THEN @DateFiled + '' AS F_Date,SUM(B.F_UnWorkingData) AS F_DataValue '' 
					WHEN @TimeFilter = 4 THEN @DateFiled + '' AS F_Date,SUM(B.F_FlexibleData) AS F_DataValue '' 
				END
				ELSE
				CASE
					WHEN @TimeFilter = 1 THEN @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,SUM(B.F_WorkingData) AS F_WorkingData,SUM(B.F_UnWorkingData) AS F_UnWorkingData,SUM(B.F_FlexibleData) AS F_FlexibleData,SUM(B.F_PeakData) AS F_PeakData,SUM(B.F_ValleyData) AS F_ValleyData,SUM(B.F_LevelData) AS F_LevelData,SUM(B.F_PeakCost) AS F_PeakCost,SUM(B.F_ValleyCost) AS F_ValleyCost,SUM(B.F_LevelCost) AS F_LevelCost '' 
					WHEN @TimeFilter = 2 THEN @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue '' 
					WHEN @TimeFilter = 3 THEN @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue '' 
					WHEN @TimeFilter = 4 THEN @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue '' 
				END
			END
			WHEN @GroupBy = 2 THEN
			CASE 
				WHEN @DataGranularity = '''' THEN
				CASE
					WHEN @TimeFilter = 1 THEN
					CASE
						WHEN @DataDimension = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,SUM(B.F_WorkingData) AS F_WorkingData,SUM(B.F_UnWorkingData) AS F_UnWorkingData,SUM(B.F_FlexibleData) AS F_FlexibleData,SUM(B.F_PeakData) AS F_PeakData,SUM(B.F_ValleyData) AS F_ValleyData,SUM(B.F_LevelData) AS F_LevelData,SUM(B.F_PeakCost) AS F_PeakCost,SUM(B.F_ValleyCost) AS F_ValleyCost,SUM(B.F_LevelCost) AS F_LevelCost ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue '' 
					END
					WHEN @TimeFilter = 2 THEN
					CASE
						WHEN @DataDimension = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_WorkingData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue '' 
					END
					WHEN @TimeFilter = 3 THEN 
					CASE
						WHEN @DataDimension = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_UnWorkingData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue '' 
					END
					WHEN @TimeFilter = 4 THEN 
					CASE
						WHEN @DataDimension = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_FlexibleData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue '' 
					END
				END
				ELSE
				CASE
					WHEN @TimeFilter = 1 THEN
					CASE 
						WHEN @DataDimension = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,SUM(B.F_WorkingData) AS F_WorkingData,SUM(B.F_UnWorkingData) AS F_UnWorkingData,SUM(B.F_FlexibleData) AS F_FlexibleData,SUM(B.F_PeakData) AS F_PeakData,SUM(B.F_ValleyData) AS F_ValleyData,SUM(B.F_LevelData) AS F_LevelData,SUM(B.F_PeakCost) AS F_PeakCost,SUM(B.F_ValleyCost) AS F_ValleyCost,SUM(B.F_LevelCost) AS F_LevelCost ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END	
					WHEN @TimeFilter = 2 THEN
					CASE 
						WHEN @DataDimension = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END	
					WHEN @TimeFilter = 3 THEN
					CASE 
						WHEN @DataDimension = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END	
					WHEN @TimeFilter = 4 THEN
					CASE 
						WHEN @DataDimension = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN @DateFiled + '' AS F_Date,A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END	
				END
			END
			WHEN @GroupBy = 3 THEN
			CASE 
				WHEN @DataGranularity = '''' THEN
				CASE
					WHEN @TimeFilter = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,SUM(B.F_WorkingData) AS F_WorkingData,SUM(B.F_UnWorkingData) AS F_UnWorkingData,SUM(B.F_FlexibleData) AS F_FlexibleData,SUM(B.F_PeakData) AS F_PeakData,SUM(B.F_ValleyData) AS F_ValleyData,SUM(B.F_LevelData) AS F_LevelData,SUM(B.F_PeakCost) AS F_PeakCost,SUM(B.F_ValleyCost) AS F_ValleyCost,SUM(B.F_LevelCost) AS F_LevelCost '' 
					WHEN @TimeFilter = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_WorkingData) AS F_DataValue '' 
					WHEN @TimeFilter = 3 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_UnWorkingData) AS F_DataValue '' 
					WHEN @TimeFilter = 4 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,SUM(B.F_FlexibleData) AS F_DataValue '' 
				END
				ELSE
				CASE
					WHEN @TimeFilter = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,SUM(B.F_WorkingData) AS F_WorkingData,SUM(B.F_UnWorkingData) AS F_UnWorkingData,SUM(B.F_FlexibleData) AS F_FlexibleData,SUM(B.F_PeakData) AS F_PeakData,SUM(B.F_ValleyData) AS F_ValleyData,SUM(B.F_LevelData) AS F_LevelData,SUM(B.F_PeakCost) AS F_PeakCost,SUM(B.F_ValleyCost) AS F_ValleyCost,SUM(B.F_LevelCost) AS F_LevelCost '' 
					WHEN @TimeFilter = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue '' 
					WHEN @TimeFilter = 3 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue '' 
					WHEN @TimeFilter = 4 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue '' 
				END
			END
			WHEN @GroupBy = 4 THEN
			CASE 
				WHEN @DataGranularity = '''' THEN
				CASE
					WHEN @TimeFilter = 1 THEN
					CASE 
						WHEN @DataDimension = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,SUM(B.F_WorkingData) AS F_WorkingData,SUM(B.F_UnWorkingData) AS F_UnWorkingData,SUM(B.F_FlexibleData) AS F_FlexibleData,SUM(B.F_PeakData) AS F_PeakData,SUM(B.F_ValleyData) AS F_ValleyData,SUM(B.F_LevelData) AS F_LevelData,SUM(B.F_PeakCost) AS F_PeakCost,SUM(B.F_ValleyCost) AS F_ValleyCost,SUM(B.F_LevelCost) AS F_LevelCost ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END	
					WHEN @TimeFilter = 2 THEN 
					CASE 
						WHEN @DataDimension = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_WorkingData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END	
					WHEN @TimeFilter = 3 THEN 
					CASE 
						WHEN @DataDimension = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_UnWorkingData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END
					WHEN @TimeFilter = 4 THEN 
					CASE 
						WHEN @DataDimension = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_FlexibleData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END
				END
				ELSE
				CASE
					WHEN @TimeFilter = 1 THEN 
					CASE 
						WHEN @DataDimension = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,SUM(B.F_WorkingData) AS F_WorkingData,SUM(B.F_UnWorkingData) AS F_UnWorkingData,SUM(B.F_FlexibleData) AS F_FlexibleData,SUM(B.F_PeakData) AS F_PeakData,SUM(B.F_ValleyData) AS F_ValleyData,SUM(B.F_LevelData) AS F_LevelData,SUM(B.F_PeakCost) AS F_PeakCost,SUM(B.F_ValleyCost) AS F_ValleyCost,SUM(B.F_LevelCost) AS F_LevelCost ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_EnergyData) AS F_DataValue,SUM(B.F_EnergyCost) AS F_EnergyCost,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_EnergyData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END
					WHEN @TimeFilter = 2 THEN 
					CASE 
						WHEN @DataDimension = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_WorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_WorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END
					WHEN @TimeFilter = 3 THEN 
					CASE 
						WHEN @DataDimension = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_UnWorkingData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_UnWorkingData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END
					WHEN @TimeFilter = 4 THEN 
					CASE 
						WHEN @DataDimension = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue ''
						WHEN @DataDimension = 2 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_BuildingArea'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 2 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_BuildingArea,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_BuildingArea'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 1 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''''P_UserNum'''',''''AVG'''',A.F_DayDate) ELSE NULL END AS F_UnitValue ''
						WHEN @DataDimension = 3 AND @DateType = 2 THEN ''A.F_OrderTag,A.F_EntityID,dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,'' + @DateFiled + '' AS F_Date,A.F_GranularityValue AS F_Item,dbo.fun_GetPropertyTreeText('''''' + @DataGranularity + '''''',A.F_GranularityValue) AS F_ItemName,SUM(B.F_FlexibleData) AS F_DataValue,dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) AS F_UserNum,CASE WHEN dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) > 0 THEN SUM(B.F_FlexibleData) / dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''''P_UserNum'''',SUBSTRING(A.F_DayDate,1,4),SUBSTRING(A.F_DayDate,6,2)) ELSE NULL END AS F_UnitValue ''
					END
				END
			END
		END + '' 
		FROM 
		('' + 
			CASE WHEN @DataGranularity = '''' 
			THEN 
			''SELECT 
				A.F_EntityID,
				A.F_EntityName,
				A.F_OrderTag,
				C.F_DayDate
			FROM '' + CASE WHEN @DataTag = ''M'' AND @DateType = 1 THEN ''dbo.fun_GetSplityString('''''' + CAST(@StartDate AS VARCHAR(4)) + '''''','''''' + CAST(@EndDate AS VARCHAR(4)) + '''''')'' WHEN @DataTag = ''M'' AND @DateType = 2 THEN ''dbo.fun_GetSplityMString('''''' + CAST(@StartDate AS VARCHAR(7)) + '''''','''''' + CAST(@EndDate AS VARCHAR(7)) + '''''')'' ELSE ''dbo.fun_GetSplitDate('''''' + CAST(@StartDate AS VARCHAR) + '''''','''''' + CAST(@EndDate AS VARCHAR) + '''''')'' END + '' C, 
			(
				SELECT 
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma('''''' + @EntityStr + '''''') B
				WHERE A.F_EntityID = B.F_ObjectID ''
			ELSE 
			''SELECT 
				A.F_EntityID,
				A.F_EntityName,
				A.F_OrderTag,
				A.F_GranularityValue,
				C.F_DayDate
			FROM '' + CASE WHEN @DataTag = ''M'' AND @DateType = 1 THEN ''dbo.fun_GetSplityString('''''' + CAST(@StartDate AS VARCHAR(4)) + '''''','''''' + CAST(@EndDate AS VARCHAR(4)) + '''''')'' WHEN @DataTag = ''M'' AND @DateType = 2 THEN ''dbo.fun_GetSplityMString('''''' + CAST(@StartDate AS VARCHAR(7)) + '''''','''''' + CAST(@EndDate AS VARCHAR(7)) + '''''')'' ELSE ''dbo.fun_GetSplitDate('''''' + CAST(@StartDate AS VARCHAR) + '''''','''''' + CAST(@EndDate AS VARCHAR) + '''''')'' END + '' C, 
			(
				SELECT 
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					D.F_PropertyValue AS F_GranularityValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma('''''' + @EntityStr + '''''') B,
					dbo.tb_B_EntityTreeMetering C,
					dbo.view_EntityPropertyValue D
				WHERE A.F_EntityID = B.F_ObjectID
					AND B.F_ObjectID = C.F_EntityID
					AND C.F_EndDate IS NULL
					AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = '' + CAST(@EnergyTypeID AS VARCHAR) + ''
					AND D.F_PropertyIdentifier = '''''' + @DataGranularity + ''''''
					AND D.F_PropertyValue <> ''''''''
					AND D.F_EntityID = C.F_NodeID ''
			END + ''
			) A
		) A LEFT OUTER JOIN '' + CASE @DataTag WHEN ''M'' THEN ''dbo.tb_C_EntityMonthData'' ELSE ''dbo.tb_C_EntityDayData'' END + '' B 
			ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = '' + CAST(@EnergyTypeID AS VARCHAR) + ''
				AND B.F_ValueLabel = '''''' + @ValueLabel + ''''''
				AND '' + CASE WHEN @DataGranularity = '''' THEN ''B.F_DataGranularity = '''''''''' ELSE ''B.F_DataGranularity = '''''' + @DataGranularity + '''''' AND B.F_GranularityValue = A.F_GranularityValue'' END + '' 
				AND '' + CASE WHEN @DataTag = ''M'' AND @DateType = 1 THEN ''B.F_ReadingYear = A.F_DayDate'' WHEN @DataTag = ''M'' AND @DateType = 2 THEN ''CAST(B.F_ReadingYear AS VARCHAR) + ''''-'''' + RIGHT(''''0'''' + CAST(B.F_ReadingMonth AS VARCHAR),2) = A.F_DayDate'' ELSE ''B.F_ReadingDate = A.F_DayDate'' END + ''
				AND '' + CASE @DateFilter WHEN 1 THEN ''1=1'' WHEN 2 THEN ''B.F_ReadingDate IN (SELECT F_Day FROM dbo.fun_GetWorkingday('''''' + CAST(@StartDate AS VARCHAR) + '''''','''''' + CAST(@EndDate AS VARCHAR) + ''''''))'' WHEN 3 THEN ''B.F_ReadingDate IN (SELECT F_Day FROM dbo.fun_GetHoliday('''''' + CAST(@StartDate AS VARCHAR) + '''''','''''' + CAST(@EndDate AS VARCHAR) + ''''''))'' END + '' 
		GROUP BY ''
		+ CASE 
			WHEN @GroupBy = 1 THEN CASE WHEN @DataGranularity = '''' THEN @DateFiled ELSE @DateFiled + '',A.F_GranularityValue '' END
			WHEN @GroupBy = 2 THEN CASE WHEN @DataGranularity = '''' THEN @DateFiled + '',A.F_OrderTag,A.F_EntityID,A.F_EntityName '' ELSE @DateFiled + '',A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue '' END
			WHEN @GroupBy = 3 THEN CASE WHEN @DataGranularity = '''' THEN ''A.F_OrderTag,A.F_EntityID,A.F_EntityName '' ELSE ''A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue '' END
			WHEN @GroupBy = 4 THEN CASE WHEN @DataGranularity = '''' THEN ''A.F_OrderTag,A.F_EntityID,A.F_EntityName,'' + @DateFiled ELSE ''A.F_OrderTag,A.F_EntityID,A.F_EntityName,'' + @DateFiled + '',A.F_GranularityValue '' END
		END + '' 
		ORDER BY ''
		+ CASE 
			WHEN @GroupBy = 1 THEN
				CASE 
					WHEN @DataGranularity = '''' THEN CASE WHEN @OrderBy = 1 THEN ''F_Date '' WHEN @OrderBy = 2 THEN ''F_DataValue '' WHEN @OrderBy = 3 THEN ''F_DataValue DESC '' END
					ELSE CASE WHEN @OrderBy = 1 THEN ''F_Date,F_Item '' WHEN @OrderBy = 2 THEN ''F_Date,F_DataValue '' WHEN @OrderBy = 3 THEN ''F_Date,F_DataValue DESC '' END
				END
			WHEN @GroupBy = 2 THEN
				CASE 
					WHEN @DataGranularity = '''' THEN CASE WHEN @OrderBy = 1 THEN ''F_Date,F_OrderTag,F_EntityID '' WHEN @OrderBy = 2 THEN ''F_Date,F_DataValue '' WHEN @OrderBy = 3 THEN ''F_Date,F_DataValue DESC '' END
					ELSE CASE WHEN @OrderBy = 1 THEN ''F_Date,F_OrderTag,F_EntityID,F_Item '' WHEN @OrderBy = 2 THEN ''F_Date,F_Item,F_DataValue '' WHEN @OrderBy = 3 THEN ''F_Date,F_Item,F_DataValue DESC '' END
				END
			WHEN @GroupBy = 3 THEN
				CASE 
					WHEN @DataGranularity = '''' THEN CASE WHEN @OrderBy = 1 THEN ''F_OrderTag,F_EntityID '' WHEN @OrderBy = 2 THEN ''F_DataValue '' WHEN @OrderBy = 3 THEN ''F_DataValue DESC'' END
					ELSE CASE WHEN @OrderBy = 1 THEN ''F_OrderTag,F_EntityID,F_Item '' WHEN @OrderBy = 2 THEN ''F_OrderTag,F_EntityID,F_Item,F_DataValue '' WHEN @OrderBy = 3 THEN ''F_OrderTag,F_EntityID,F_Item,F_DataValue DESC '' END 
				END
			WHEN @GroupBy = 4 THEN
				CASE 
					WHEN @DataGranularity = '''' THEN CASE WHEN @OrderBy = 1 THEN ''F_OrderTag,F_EntityID,F_Date '' WHEN @OrderBy = 2 THEN ''F_OrderTag,F_EntityID,F_DataValue '' WHEN @OrderBy = 3 THEN ''F_OrderTag,F_EntityID,F_DataValue DESC '' END
					ELSE CASE WHEN @OrderBy = 1 THEN ''F_OrderTag,F_EntityID,F_Item,F_Date '' WHEN @OrderBy = 2 THEN ''F_OrderTag,F_EntityID,F_Item,F_DataValue '' WHEN @OrderBy = 3 THEN ''F_OrderTag,F_EntityID,F_Item,F_DataValue DESC '' END
				END
		END
	
	EXEC (@SqlText)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetNodeInstDataStatis]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetNodeInstDataStatis]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetNodeInstDataStatis] 
	@DeviceStr varchar(max),	-- 设备对象列表
	@ValueStr varchar(max),		-- 设备参数列表
	@DateType smallint,			-- 1：逐点瞬时值 2：逐日高低值 3：逐月高低值 4：逐年高低值
	@StartDate varchar(16),		-- 起始日期yyyy-MM-dd,yyyy-MM,yyyy
	@EndDate varchar(16),		-- 截止日期yyyy-MM-dd,yyyy-MM,yyyy
	@FilterBy varchar(16),		-- 过滤规则，空：不过滤 过滤符号
	@FilterValue numeric(18,4)	-- 过滤基准
AS
BEGIN
	DECLARE @SqlText varchar(max)
	DECLARE @TempYear int
	
	IF @DateType = 1
	BEGIN
		DECLARE @F_StartDate date
		DECLARE @F_EndDate date
		SET @F_StartDate = @StartDate
		SET @F_EndDate = @EndDate
		IF YEAR(@F_StartDate) = YEAR(@F_EndDate)
		BEGIN
			IF OBJECT_ID(''tb_C_InitialPData_'' + CAST(YEAR(@F_EndDate) AS VARCHAR)) IS NOT NULL
			BEGIN
				SET @SqlText = 
				''SELECT 
					A.F_NodeCode AS F_NodeID,
					dbo.fun_GetEntityPathName(D.F_EntityID) AS F_NodeName,
					A.F_ValueLabel,
					CONVERT(VARCHAR,A.F_ReadingDate,120) AS F_ReadingDate,
					A.F_DataValue 
				FROM tb_C_InitialPData_'' + CAST(YEAR(@F_EndDate) AS VARCHAR) + '' A,
					dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
					dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
					dbo.tb_B_EntityTreeModel D
				WHERE A.F_NodeCode = B.F_ObjectID 
					AND A.F_ValueLabel = C.F_ObjectID 
					AND CAST(A.F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@F_StartDate AS VARCHAR) + '''''' AND '''''' + CAST(@F_EndDate AS VARCHAR) + ''''''  
					AND A.F_NodeCode = D.F_EntityID '' +
					CASE WHEN @FilterBy IS NULL OR @FilterBy = '''' THEN '''' ELSE '' AND A.F_DataValue '' + @FilterBy + CAST(@FilterValue AS VARCHAR) END + '' 
				ORDER BY A.F_NodeCode,A.F_ValueLabel,A.F_ReadingDate''
			END
		END
		ELSE
		BEGIN
			SET @TempYear = YEAR(@F_StartDate)
			WHILE @TempYear <= YEAR(@F_EndDate)
			BEGIN
				IF @SqlText = ''''
				BEGIN
					IF @TempYear = YEAR(@F_StartDate)
					BEGIN
						IF OBJECT_ID(''tb_C_InitialPData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
						BEGIN
							SET @SqlText = 
							''SELECT 
								A.F_NodeCode AS F_NodeID,
								dbo.fun_GetEntityPathName(D.F_EntityID) AS F_NodeName,
								A.F_ValueLabel,
								CONVERT(VARCHAR,A.F_ReadingDate,120) AS F_ReadingDate,
								A.F_DataValue 
							FROM tb_C_InitialPData_'' + CAST(YEAR(@F_EndDate) AS VARCHAR) + '' A,
								dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
								dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
								dbo.tb_B_EntityTreeModel D
							WHERE A.F_NodeCode = B.F_ObjectID 
								AND A.F_ValueLabel = C.F_ObjectID 
								AND CAST(A.F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@F_StartDate AS VARCHAR) + '''''' AND '''''' + CAST(YEAR(@F_StartDate) AS VARCHAR) + ''-12-31''''  
								AND CAST(A.F_ReadingDate AS DATE) <= '''''' + CAST(@F_EndDate AS VARCHAR) + ''''''
								AND A.F_NodeCode = D.F_EntityID '' +
								CASE WHEN @FilterBy IS NULL OR @FilterBy = '''' THEN '''' ELSE '' AND A.F_DataValue '' + @FilterBy + CAST(@FilterValue AS VARCHAR) END + '' 
							ORDER BY A.F_NodeCode,A.F_ValueLabel,A.F_ReadingDate''
						END
					END
					ELSE IF @TempYear = YEAR(@F_EndDate)
					BEGIN
						IF OBJECT_ID(''tb_C_InitialPData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
						BEGIN
							SET @SqlText = 
							''SELECT 
								A.F_NodeCode AS F_NodeID,
								dbo.fun_GetEntityPathName(D.F_EntityID) AS F_NodeName,
								A.F_ValueLabel,
								CONVERT(VARCHAR,A.F_ReadingDate,120) AS F_ReadingDate,
								A.F_DataValue 
							FROM tb_C_InitialPData_'' + CAST(YEAR(@F_EndDate) AS VARCHAR) + '' A,
								dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
								dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
								dbo.tb_B_EntityTreeModel D
							WHERE A.F_NodeCode = B.F_ObjectID 
								AND A.F_ValueLabel = C.F_ObjectID 
								AND CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(YEAR(@F_EndDate) AS VARCHAR) + ''-01-01'''' AND '''''' + CAST(@F_EndDate AS VARCHAR) + ''  
								AND A.F_NodeCode = D.F_EntityID '' +
								CASE WHEN @FilterBy IS NULL OR @FilterBy = '''' THEN '''' ELSE '' AND A.F_DataValue '' + @FilterBy + CAST(@FilterValue AS VARCHAR) END + '' 
							ORDER BY A.F_NodeCode,A.F_ValueLabel,A.F_ReadingDate''
						END
					END
					ELSE
					BEGIN
						IF OBJECT_ID(''tb_C_InitialPData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
						BEGIN
							SET @SqlText = 
							''SELECT 
								A.F_NodeCode AS F_NodeID,
								dbo.fun_GetEntityPathName(D.F_EntityID) AS F_NodeName,
								A.F_ValueLabel,
								CONVERT(VARCHAR,A.F_ReadingDate,120) AS F_ReadingDate,
								A.F_DataValue 
							FROM tb_C_InitialPData_'' + CAST(YEAR(@F_EndDate) AS VARCHAR) + '' A,
								dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
								dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
								dbo.tb_B_EntityTreeModel D
							WHERE A.F_NodeCode = B.F_ObjectID 
								AND A.F_ValueLabel = C.F_ObjectID 
								AND CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(YEAR(@TempYear) AS VARCHAR) + ''-01-01'''' AND '''''' + CAST(YEAR(@TempYear) AS VARCHAR) + ''-12-31'''' 
								AND A.F_NodeCode = D.F_EntityID '' +
								CASE WHEN @FilterBy IS NULL OR @FilterBy = '''' THEN '''' ELSE '' AND A.F_DataValue '' + @FilterBy + CAST(@FilterValue AS VARCHAR) END + '' 
							ORDER BY A.F_NodeCode,A.F_ValueLabel,A.F_ReadingDate''
						END
					END
				END
				ELSE
				BEGIN
					IF @TempYear = YEAR(@F_StartDate)
					BEGIN
						IF OBJECT_ID(''tb_C_InitialPData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
						BEGIN
							SET @SqlText = @SqlText + 
							'' UNION 
							SELECT 
								A.F_NodeCode AS F_NodeID,
								dbo.fun_GetEntityPathName(D.F_EntityID) AS F_NodeName,
								A.F_ValueLabel,
								CONVERT(VARCHAR,A.F_ReadingDate,120) AS F_ReadingDate,
								A.F_DataValue 
							FROM tb_C_InitialPData_'' + CAST(YEAR(@F_EndDate) AS VARCHAR) + '' A,
								dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
								dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
								dbo.tb_B_EntityTreeModel D
							WHERE A.F_NodeCode = B.F_ObjectID 
								AND A.F_ValueLabel = C.F_ObjectID 
								AND CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@F_StartDate AS VARCHAR) + '''''' AND '''''' + CAST(YEAR(@F_StartDate) AS VARCHAR) + ''-12-31''''  
								AND CAST(F_ReadingDate AS DATE) <= '''''' + CAST(@F_EndDate AS VARCHAR) + ''''''
								AND A.F_NodeCode = D.F_EntityID '' +
								CASE WHEN @FilterBy IS NULL OR @FilterBy = '''' THEN '''' ELSE '' AND A.F_DataValue '' + @FilterBy + CAST(@FilterValue AS VARCHAR) END + '' 
							ORDER BY A.F_NodeCode,A.F_ValueLabel,A.F_ReadingDate''
						END
					END
					ELSE IF @TempYear = YEAR(@F_EndDate)
					BEGIN
						IF OBJECT_ID(''tb_C_InitialPData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
						BEGIN
							SET @SqlText = @SqlText + 
							'' UNION 
							SELECT 
								A.F_NodeCode AS F_NodeID,
								dbo.fun_GetEntityPathName(D.F_EntityID) AS F_NodeName,
								A.F_ValueLabel,
								CONVERT(VARCHAR,A.F_ReadingDate,120) AS F_ReadingDate,
								A.F_DataValue 
							FROM tb_C_InitialPData_'' + CAST(YEAR(@F_EndDate) AS VARCHAR) + '' A,
								dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
								dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
								dbo.tb_B_EntityTreeModel D
							WHERE A.F_NodeCode = B.F_ObjectID 
								AND A.F_ValueLabel = C.F_ObjectID 
								AND CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(YEAR(@F_EndDate) AS VARCHAR) + ''-01-01'''' AND '''''' + CAST(@F_EndDate AS VARCHAR) + ''  
								AND A.F_NodeCode = D.F_EntityID '' +
								CASE WHEN @FilterBy IS NULL OR @FilterBy = '''' THEN '''' ELSE '' AND A.F_DataValue '' + @FilterBy + CAST(@FilterValue AS VARCHAR) END + '' 
							ORDER BY A.F_NodeCode,A.F_ValueLabel,A.F_ReadingDate''
						END
					END
					ELSE
					BEGIN
						IF OBJECT_ID(''tb_C_InitialPData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
						BEGIN
							SET @SqlText = @SqlText + 
							'' UNION 
							SELECT 
								A.F_NodeCode AS F_NodeID,
								dbo.fun_GetEntityPathName(D.F_EntityID) AS F_NodeName,
								A.F_ValueLabel,
								CONVERT(VARCHAR,A.F_ReadingDate,120) AS F_ReadingDate,
								A.F_DataValue 
							FROM tb_C_InitialPData_'' + CAST(YEAR(@F_EndDate) AS VARCHAR) + '' A,
								dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
								dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
								dbo.tb_B_EntityTreeModel D
							WHERE A.F_NodeCode = B.F_ObjectID 
								AND A.F_ValueLabel = C.F_ObjectID 
								AND CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(YEAR(@TempYear) AS VARCHAR) + ''-01-01'''' AND '''''' + CAST(YEAR(@TempYear) AS VARCHAR) + ''-12-31'''' 
								AND A.F_NodeCode = D.F_EntityID '' +
								CASE WHEN @FilterBy IS NULL OR @FilterBy = '''' THEN '''' ELSE '' AND A.F_DataValue '' + @FilterBy + CAST(@FilterValue AS VARCHAR) END + '' 
							ORDER BY A.F_NodeCode,A.F_ValueLabel,A.F_ReadingDate''
						END
					END
				END
				SET @TempYear = @TempYear + 1
			END
		END
	END
	ELSE IF @DateType = 2
	BEGIN
		SET @SqlText = 
		''SELECT 
			A.F_NodeCode AS F_NodeID,
			dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,
			A.F_ValueLabel,
			CAST(A.F_DayDate AS VARCHAR) AS F_DayDate,
			B.F_MaxValue, 
			CONVERT(VARCHAR,B.F_MaxDate,120) AS F_MaxDate,
			B.F_MinValue,
			CONVERT(VARCHAR,B.F_MinDate,120) AS F_MinDate,
			B.F_AvgValue 
		FROM 
		( 
			SELECT 
				A.F_EntityID AS F_NodeCode,
				A.F_EntityName AS F_NodeName,
				A.F_OrderTag,
				A.F_EntityDepth,
				C.F_ObjectID AS F_ValueLabel,
				D.F_DayDate 
			FROM dbo.tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
				dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
				dbo.fun_GetSplitDate('''''' + @StartDate + '''''', '''''' + @EndDate + '''''') D  
			WHERE A.F_EntityID = B.F_ObjectID 
		) A LEFT OUTER JOIN dbo.tb_C_InstantDayData B 
			ON A.F_NodeCode = B.F_NodeCode AND A.F_ValueLabel = B.F_ValueLabel AND A.F_DayDate = B.F_ReadingDate 
		ORDER BY A.F_EntityDepth,A.F_OrderTag,A.F_ValueLabel,A.F_DayDate''
	END
	ELSE IF @DateType = 3
	BEGIN
		SET @SqlText = 
		''SELECT 
			A.F_NodeCode AS F_NodeID,
			dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,
			A.F_ValueLabel,
			A.F_Year,
			A.F_Month,
			B.F_MaxValue, 
			CONVERT(VARCHAR,B.F_MaxDate,120) AS F_MaxDate,
			B.F_MinValue,
			CONVERT(VARCHAR,B.F_MinDate,120) AS F_MinDate,
			B.F_AvgValue
		FROM 
		( 
			SELECT 
				A.F_EntityID AS F_NodeCode,
				A.F_EntityName AS F_NodeName,
				A.F_OrderTag,
				A.F_EntityDepth,
				C.F_ObjectID AS F_ValueLabel,
				D.F_Year,
				D.F_Month 
			FROM dbo.tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
				dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
				dbo.fun_GetSplityMDate('''''' + @StartDate + '''''', '''''' + @EndDate + '''''') D  
			WHERE A.F_EntityID = B.F_ObjectID 
		) A LEFT OUTER JOIN dbo.tb_C_InstantMonthData B 
			ON A.F_NodeCode = B.F_NodeCode AND A.F_ValueLabel = B.F_ValueLabel AND A.F_Year = B.F_ReadingYear AND A.F_Month = B.F_ReadingMonth 
		ORDER BY A.F_EntityDepth,A.F_OrderTag,A.F_ValueLabel,A.F_Year,A.F_Month''
	END
	ELSE IF @DateType = 4
	BEGIN
		SET @SqlText = 
		''SELECT 
			A.F_NodeCode AS F_NodeID,
			dbo.fun_GetEntityPathName(A.F_NodeCode) AS F_NodeName,
			A.F_ValueLabel,
			A.F_Year,
			MAX(B.F_MaxValue) AS F_MaxValue, 
			MIN(B.F_MinValue) AS F_MinValue,
			AVG(B.F_AvgValue) AS F_AvgValue
		FROM 
		( 
			SELECT 
				A.F_EntityID AS F_NodeCode,
				A.F_EntityName AS F_NodeName,
				A.F_OrderTag,
				A.F_EntityDepth,
				C.F_ObjectID AS F_ValueLabel,
				D.F_Year
			FROM dbo.tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma('''''' + @DeviceStr + '''''') B, 
				dbo.fun_SplitByComma('''''' + @ValueStr + '''''') C,
				dbo.fun_GetSplityDate('''''' + @StartDate + '''''', '''''' + @EndDate + '''''') D  
			WHERE A.F_EntityID = B.F_ObjectID 
		) A LEFT OUTER JOIN dbo.tb_C_InstantMonthData B 
			ON A.F_NodeCode = B.F_NodeCode AND A.F_ValueLabel = B.F_ValueLabel AND A.F_Year = B.F_ReadingYear  
		GROUP BY A.F_NodeCode,A.F_ValueLabel,A.F_Year 
		ORDER BY dbo.fun_GetEntityTreeDepth(A.F_NodeCode),dbo.fun_GetEntityOrderTag(A.F_NodeCode),A.F_ValueLabel,A.F_Year''
	END
	
	EXEC (@SqlText)
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_SplitDayDate]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_SplitDayDate]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_SplitDayDate] (
	@F_StartDate date,
	@F_EndDate date
) RETURNS @tb_day TABLE(F_DateTime date) 
BEGIN
	DECLARE @temp date
	SET @temp = @F_StartDate
	WHILE @temp <= @F_EndDate
	BEGIN
		INSERT INTO @tb_day VALUES(@temp)
		SET @temp = DATEADD(d,1,@temp)
	END
	RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_SplitBySemicolon]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_SplitBySemicolon]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_SplitBySemicolon] (@ObjectStr varchar(max))
RETURNS @temp TABLE(F_RowIndex int,F_ObjectID varchar(32))
BEGIN
	DECLARE @i int
	DECLARE @index int
	SET @index = 0
	
    SET @i = charindex('';'',@ObjectStr)
    WHILE @i >= 1
    BEGIN
        INSERT INTO @temp VALUES(@index + 1,left(@ObjectStr,@i-1))
        SET @ObjectStr = substring(@ObjectStr,@i+1,len(@ObjectStr)-@i)
        SET @i = charindex('';'',@ObjectStr)
        SET @index = @index + 1
    END
    IF @ObjectStr<>''''
       INSERT INTO @temp VALUES(@index + 1,@ObjectStr)
	RETURN
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetMultiMeterData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetMultiMeterData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetMultiMeterData]
	@F_EntityStr varchar(max),
	@F_EnergyTypeID varchar(max),
	@F_IsHasEntity bit
AS
BEGIN
	IF @F_EntityStr IS NOT NULL AND @F_EnergyTypeID IS NOT NULL
	BEGIN
		IF @F_IsHasEntity = 1
		BEGIN
			SELECT 
				dbo.fun_GetEntityPropertyValue(A.code,''P2_NodeRelation'') AS rank,
				dbo.fun_GetNodeEnergyType(A.code) AS type_id,
				B.F_EntityName AS type_name,
				A.code,
				dbo.fun_GetEntityName(A.code) AS name,
				A.entity_str 
			FROM (
				SELECT 
					A.F_NodeID AS code,
					STUFF(
					(
						SELECT 
							'','' + cast(F_EntityID AS VARCHAR) 
						FROM tb_B_EntityTreeMetering 
						WHERE F_NodeID = A.F_NodeID 
							AND F_EndDate is null 
						FOR XML PATH('''')),1,1,''''
					) AS entity_str 
				FROM dbo.tb_B_EntityTreeMetering A,
					dbo.fun_SplitByComma(@F_EntityStr) B 
				WHERE A.F_EndDate IS NULL 
					AND A.F_EntityID = B.F_ObjectID 
					AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID 
				GROUP BY F_NodeID
			) A,dbo.tb_B_EntityTreeModel B 
			WHERE B.F_EntityID = dbo.fun_GetNodeEnergyType(A.code)
		END
		ELSE
		BEGIN
			SELECT 
				dbo.fun_GetEntityPropertyValue(A.code,''P2_NodeRelation'') AS rank,
				dbo.fun_GetNodeEnergyType(A.code) AS type_id,
				B.F_EntityName AS type_name,
				A.code,
				dbo.fun_GetEntityName(A.code) AS name 
			FROM (
				SELECT 
					A.F_NodeID AS code 
				FROM dbo.tb_B_EntityTreeMetering A,
					dbo.fun_SplitByComma(@F_EntityStr) B 
				WHERE A.F_EndDate IS NULL 
					AND A.F_EntityID = B.F_ObjectID 
					AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID 
				GROUP BY F_NodeID
			) A,dbo.tb_B_EntityTreeModel B 
			WHERE B.F_EntityID = dbo.fun_GetNodeEnergyType(A.code)
		END
	END
	ELSE IF @F_EntityStr IS NOT NULL AND @F_EnergyTypeID IS NULL
	BEGIN
		IF @F_IsHasEntity = 1
		BEGIN
			SELECT 
				dbo.fun_GetEntityPropertyValue(A.code,''P2_NodeRelation'') AS rank,
				dbo.fun_GetNodeEnergyType(A.code) AS type_id,
				B.F_EntityName AS type_name,
				A.code,
				dbo.fun_GetEntityName(A.code) AS name,
				A.entity_str 
			FROM (
				SELECT 
					A.F_NodeID AS code,
					STUFF(
					(
						SELECT 
							'','' + cast(F_EntityID AS VARCHAR) 
						FROM tb_B_EntityTreeMetering 
						WHERE F_NodeID = A.F_NodeID 
							AND F_EndDate is null 
						FOR XML PATH('''')),1,1,''''
					) AS entity_str 
				FROM dbo.tb_B_EntityTreeMetering A,
					dbo.fun_SplitByComma(@F_EntityStr) B 
				WHERE A.F_EndDate IS NULL 
					AND A.F_EntityID = B.F_ObjectID
				GROUP BY F_NodeID
			) A,dbo.tb_B_EntityTreeModel B 
			WHERE B.F_EntityID = dbo.fun_GetNodeEnergyType(A.code)
		END
		ELSE
		BEGIN
			SELECT 
				dbo.fun_GetEntityPropertyValue(A.code,''P2_NodeRelation'') AS rank,
				dbo.fun_GetNodeEnergyType(A.code) AS type_id,
				B.F_EntityName AS type_name,
				A.code,
				dbo.fun_GetEntityName(A.code) AS name 
			FROM (
				SELECT 
					A.F_NodeID AS code 
				FROM dbo.tb_B_EntityTreeMetering A,
					dbo.fun_SplitByComma(@F_EntityStr) B 
				WHERE A.F_EndDate IS NULL 
					AND A.F_EntityID = B.F_ObjectID
				GROUP BY F_NodeID
			) A,dbo.tb_B_EntityTreeModel B 
			WHERE B.F_EntityID = dbo.fun_GetNodeEnergyType(A.code)
		END
	END
	ELSE IF @F_EntityStr IS NULL AND @F_EnergyTypeID IS NOT NULL
	BEGIN
		IF @F_IsHasEntity = 1
		BEGIN
			SELECT 
				dbo.fun_GetEntityPropertyValue(A.code,''P2_NodeRelation'') AS rank,
				dbo.fun_GetNodeEnergyType(A.code) AS type_id,
				B.F_EntityName AS type_name,
				A.code,
				dbo.fun_GetEntityName(A.code) AS name,
				A.entity_str 
			FROM (
				SELECT 
					A.F_NodeID AS code,
					STUFF(
					(
						SELECT 
							'','' + cast(F_EntityID AS VARCHAR) 
						FROM tb_B_EntityTreeMetering 
						WHERE F_NodeID = A.F_NodeID 
							AND F_EndDate is null 
						FOR XML PATH('''')),1,1,''''
					) AS entity_str 
				FROM dbo.tb_B_EntityTreeMetering A
				WHERE A.F_EndDate IS NULL 
					AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID 
				GROUP BY F_NodeID
			) A,dbo.tb_B_EntityTreeModel B 
			WHERE B.F_EntityID = dbo.fun_GetNodeEnergyType(A.code)
		END
		ELSE
		BEGIN
			SELECT 
				dbo.fun_GetEntityPropertyValue(A.code,''P2_NodeRelation'') AS rank,
				dbo.fun_GetNodeEnergyType(A.code) AS type_id,
				B.F_EntityName AS type_name,
				A.code,
				dbo.fun_GetEntityName(A.code) AS name 
			FROM (
				SELECT 
					A.F_NodeID AS code 
				FROM dbo.tb_B_EntityTreeMetering A
				WHERE A.F_EndDate IS NULL
					AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID 
				GROUP BY F_NodeID
			) A,dbo.tb_B_EntityTreeModel B 
			WHERE B.F_EntityID = dbo.fun_GetNodeEnergyType(A.code)
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntityDaySumData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntityDaySumData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntityDaySumData]
	@F_EntityStr varchar(max),
	@F_EnergyType bigint,
	@F_ValueLabel varchar(32),
	@F_GroupBy varchar(32)
AS
BEGIN
	IF @F_GroupBy IS NULL OR @F_GroupBy = ''''
	BEGIN
		SELECT
			A.F_EntityID AS code,
			dbo.fun_GetEntityPathName(A.F_EntityID) AS name,
			A.F_EnergyData AS yesterday,
			B.F_EnergyData AS today,
			C.F_EnergyData AS month
		FROM 
		(
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_OrderTag,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData
			FROM
			(
				SELECT DISTINCT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag
				FROM tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@F_EntityStr) B
				WHERE A.F_EntityID = B.F_ObjectID
			) A
			LEFT OUTER JOIN dbo.tb_C_EntityDayData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @F_EnergyType
				AND B.F_ValueLabel = @F_ValueLabel
				AND B.F_DataGranularity = ''''
				AND B.F_ReadingDate = CAST(DATEADD(d,-1,GETDATE()) AS DATE)
			GROUP BY A.F_EntityID,A.F_EntityName,A.F_OrderTag
		) A,
		(
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_OrderTag,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData
			FROM
			(
				SELECT DISTINCT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag
				FROM tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@F_EntityStr) B
				WHERE A.F_EntityID = B.F_ObjectID
			) A
			LEFT OUTER JOIN dbo.tb_C_EntityDayData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @F_EnergyType
				AND B.F_ValueLabel = @F_ValueLabel
				AND B.F_DataGranularity = ''''
				AND B.F_ReadingDate = CAST(GETDATE() AS DATE)
			GROUP BY A.F_EntityID,A.F_EntityName,A.F_OrderTag
		) B,
		(		
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_OrderTag,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData
			FROM
			(
				SELECT DISTINCT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag
				FROM tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@F_EntityStr) B
				WHERE A.F_EntityID = B.F_ObjectID
			) A
			LEFT OUTER JOIN dbo.tb_C_EntityDayData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @F_EnergyType
				AND B.F_ValueLabel = @F_ValueLabel
				AND B.F_DataGranularity = ''''
				AND B.F_ReadingDate BETWEEN CAST(DATEADD(dd,-DAY(GETDATE())+1,GETDATE()) AS DATE) AND CAST(GETDATE() AS DATE)
			GROUP BY A.F_EntityID,A.F_EntityName,A.F_OrderTag
		) C
		WHERE A.F_EntityID = B.F_EntityID AND A.F_EntityID = C.F_EntityID
		ORDER BY A.F_OrderTag
	END
	ELSE
	BEGIN
		SELECT
			A.F_EntityID AS code,
			dbo.fun_GetEntityPathName(A.F_EntityID) AS name,
			A.F_ItemNo AS item,
			dbo.fun_GetPropertyTreeText(@F_GroupBy,A.F_ItemNo) AS item_name,
			A.F_EnergyData AS yesterday,
			B.F_EnergyData AS today,
			C.F_EnergyData AS month
		FROM 
		(
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_OrderTag,
				A.F_GranularityValue AS F_ItemNo,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData
			FROM
			(
				SELECT DISTINCT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					D.F_PropertyValue AS F_GranularityValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@F_EntityStr) B,
					dbo.tb_B_EntityTreeMetering C,
					dbo.view_EntityPropertyValue D
				WHERE A.F_EntityID = B.F_ObjectID
					AND B.F_ObjectID = C.F_EntityID
					AND C.F_EndDate IS NULL
					AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @F_EnergyType
					AND D.F_EntityID = C.F_NodeID
					AND D.F_PropertyIdentifier = @F_GroupBy
					AND D.F_PropertyValue <> ''''
			) A
			LEFT OUTER JOIN dbo.tb_C_EntityDayData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @F_EnergyType
				AND B.F_ValueLabel = @F_ValueLabel
				AND B.F_DataGranularity = @F_GroupBy
				AND B.F_GranularityValue = A.F_GranularityValue
				AND B.F_ReadingDate = CAST(DATEADD(d,-1,GETDATE()) AS DATE)
			GROUP BY A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_GranularityValue
		) A,
		(
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_OrderTag,
				A.F_GranularityValue AS F_ItemNo,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData
			FROM
			(
				SELECT DISTINCT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					D.F_PropertyValue AS F_GranularityValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@F_EntityStr) B,
					dbo.tb_B_EntityTreeMetering C,
					dbo.view_EntityPropertyValue D
				WHERE A.F_EntityID = B.F_ObjectID
					AND B.F_ObjectID = C.F_EntityID
					AND C.F_EndDate IS NULL
					AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @F_EnergyType
					AND D.F_EntityID = C.F_NodeID
					AND D.F_PropertyIdentifier = @F_GroupBy
					AND D.F_PropertyValue <> ''''
			) A
			LEFT OUTER JOIN dbo.tb_C_EntityDayData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @F_EnergyType
				AND B.F_ValueLabel = @F_ValueLabel
				AND B.F_DataGranularity = @F_GroupBy
				AND B.F_GranularityValue = A.F_GranularityValue
				AND B.F_ReadingDate = CAST(GETDATE() AS DATE)
			GROUP BY A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_GranularityValue
		) B,
		(
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_OrderTag,
				A.F_GranularityValue AS F_ItemNo,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData
			FROM
			(
				SELECT DISTINCT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					D.F_PropertyValue AS F_GranularityValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@F_EntityStr) B,
					dbo.tb_B_EntityTreeMetering C,
					dbo.view_EntityPropertyValue D
				WHERE A.F_EntityID = B.F_ObjectID
					AND B.F_ObjectID = C.F_EntityID
					AND C.F_EndDate IS NULL
					AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @F_EnergyType
					AND D.F_EntityID = C.F_NodeID
					AND D.F_PropertyIdentifier = @F_GroupBy
					AND D.F_PropertyValue <> ''''
			) A
			LEFT OUTER JOIN dbo.tb_C_EntityDayData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @F_EnergyType
				AND B.F_ValueLabel = @F_ValueLabel
				AND B.F_DataGranularity = @F_GroupBy
				AND B.F_GranularityValue = A.F_GranularityValue
				AND B.F_ReadingDate BETWEEN CAST(DATEADD(dd,-DAY(GETDATE())+1,GETDATE()) AS DATE) AND CAST(GETDATE() AS DATE)
			GROUP BY A.F_EntityID,A.F_EntityName,A.F_OrderTag,A.F_GranularityValue
		) C
		WHERE A.F_EntityID = B.F_EntityID AND A.F_EntityID = C.F_EntityID AND A.F_ItemNo = B.F_ItemNo AND A.F_ItemNo = C.F_ItemNo
		ORDER BY A.F_OrderTag,A.F_ItemNo
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_ProjectToTree]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_ProjectToTree]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_ProjectToTree]
	@F_ProjectNo int,
	@F_EntityTreeNo int,
	@F_TreeStr varchar(max)
AS
BEGIN
	DELETE FROM dbo.tb_A_ProjectToTree WHERE F_ProjectNo = @F_ProjectNo AND F_EntityTreeNo = @F_EntityTreeNo
	IF @F_TreeStr <> '''' INSERT INTO dbo.tb_A_ProjectToTree SELECT @F_ProjectNo,@F_EntityTreeNo,SUBSTRING(F_ObjectID,1,CHARINDEX(''_'',F_ObjectID,1)-1),SUBSTRING(F_ObjectID,CHARINDEX(''_'',F_ObjectID,1)+1,LEN(F_ObjectID)) FROM dbo.fun_SplitByComma(@F_TreeStr)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetModelSqlScript]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetModelSqlScript]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetModelSqlScript]
	@F_DTreeNo int,
	@F_GEntityStr varchar(max)
AS
BEGIN
	SELECT
		1 AS F_RowNum, 
		''SET IDENTITY_INSERT tb_B_EntityTreeType ON'' AS F_Header,
		''SET IDENTITY_INSERT tb_B_EntityTreeType OFF'' AS F_Footer,
		''dbo.tb_B_EntityTreeType'' AS F_Table,
		''F_EntityTreeNo,F_EntityTreeName,F_EntityTreeType,F_TreeDepth,F_Memo'' AS F_Fields,
		CAST(F_EntityTreeNo AS VARCHAR) + '','''''' + F_EntityTreeName + '''''','''''' + F_EntityTreeType + '''''','' + CAST(F_TreeDepth AS VARCHAR) + '','''''' + F_Memo + '''''''' AS F_Values 
	FROM dbo.tb_B_EntityTreeType
	WHERE F_EntityTreeNo = @F_DTreeNo OR F_EntityTreeNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_GEntityStr))
	UNION
	SELECT
		2 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_B_EntityTreeModel'' AS F_Table,
		''F_EntityTreeNo,F_EntityID,F_ParentID,F_EntityName,F_EntityDepth,F_ObjectGroup,F_TemplateID,F_NodeTemplate,F_EnergyTypeID,F_DeviceTypeID,F_IsHasChild,F_IsDisplay,F_OrderTag,F_MapTag'' AS F_Fields,
		CAST(F_EntityTreeNo AS VARCHAR) + '','' + CAST(F_EntityID AS VARCHAR) + '','' + CAST(F_ParentID AS VARCHAR) + '','''''' + F_EntityName + '''''','' + CAST(F_EntityDepth AS VARCHAR) + '','''''' + ISNULL(F_ObjectGroup,'''') + '''''','' + ISNULL(CAST(F_TemplateID AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_NodeTemplate AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_EnergyTypeID AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_DeviceTypeID AS VARCHAR),''NULL'') + '','' + CAST(F_IsHasChild AS VARCHAR) + '','' + CAST(F_IsDisplay AS VARCHAR) + '','''''' + CAST(ISNULL(F_OrderTag,'''') AS VARCHAR) + '''''','''''' + CAST(ISNULL(F_MapTag,'''') AS VARCHAR) + '''''''' AS F_Values 
	FROM dbo.tb_B_EntityTreeModel
	WHERE F_EntityTreeNo = @F_DTreeNo OR F_EntityTreeNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_GEntityStr))
	UNION
	SELECT
		3 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_B_EntityTreeProperty'' AS F_Table,
		''F_EntityTreeNo,F_EntityID,F_PropertyID,F_PropertyValue,F_StartYM,F_EndYM'' AS F_Fields,
		CAST(F_EntityTreeNo AS VARCHAR) + '','' + CAST(F_EntityID AS VARCHAR) + '','' + CAST(F_PropertyID AS VARCHAR) + '','''''' + F_PropertyValue + '''''','''''' + CAST(F_StartYM AS VARCHAR) + '''''','''''' + CAST(F_EndYM AS VARCHAR) + '''''''' AS F_Values 
	FROM dbo.tb_B_EntityTreeProperty
	WHERE F_EntityTreeNo = @F_DTreeNo OR F_EntityTreeNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_GEntityStr))
	UNION
	SELECT
		4 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_B_EntityTreeMetering'' AS F_Table,
		''F_EntityTreeNo,F_EntityID,F_NodeTreeNo,F_NodeID,F_StartDate,F_EndDate,F_Rate,F_SynStatus'' AS F_Fields,
		CAST(F_EntityTreeNo AS VARCHAR) + '','' + CAST(F_EntityID AS VARCHAR) + '','' + CAST(F_NodeTreeNo AS VARCHAR) + '','' + CAST(F_NodeID AS VARCHAR) + '','''''' + CAST(F_StartDate AS VARCHAR) + '''''','''''' + CAST(F_EndDate AS VARCHAR) + '''''','' + CAST(F_Rate AS VARCHAR) + '','' + CAST(F_SynStatus AS VARCHAR) AS F_Values 
	FROM dbo.tb_B_EntityTreeMetering
	WHERE F_EntityTreeNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_GEntityStr))
	UNION
	SELECT
		5 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_B_EntityTreeToDevice'' AS F_Table,
		''F_EntityTreeNo,F_EntityID,F_DeviceTreeNo,F_DeviceID'' AS F_Fields,
		CAST(F_EntityTreeNo AS VARCHAR) + '','' + CAST(F_EntityID AS VARCHAR) + '','' + CAST(F_DeviceTreeNo AS VARCHAR) + '','' + CAST(F_DeviceID AS VARCHAR) AS F_Values 
	FROM dbo.tb_B_EntityTreeToDevice
	WHERE F_EntityTreeNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_GEntityStr))
	ORDER BY F_RowNum
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetUserDeviceAuth]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetUserDeviceAuth]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetUserDeviceAuth] (
	@F_UserCode bigint,
	@F_DeviceTypeID varchar(max)
)
RETURNS @tb_UserDevice TABLE(id bigint) 
BEGIN
    DECLARE @F_UserType char(1)
	SELECT @F_UserType = F_UserType FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	IF @F_UserType = ''1'' OR @F_UserType = ''2''
	BEGIN
		INSERT INTO @tb_UserDevice
		SELECT
			A.F_EntityID
		FROM dbo.tb_B_EntityTreeModel A,
			dbo.fun_SplitByComma(@F_DeviceTypeID) D
		WHERE A.F_ObjectGroup = ''3''
			AND A.F_IsDisplay = 1
			AND dbo.fun_GetNodeDeviceType(A.F_EntityID) = D.F_ObjectID
	END
	ELSE
	BEGIN
		INSERT INTO @tb_UserDevice
		SELECT
			A.F_EntityID
		FROM dbo.tb_B_EntityTreeModel A,
			dbo.tb_A_LoginUser B,
			dbo.tb_A_RoleToTree C,
			dbo.fun_SplitByComma(@F_DeviceTypeID) D
		WHERE A.F_ObjectGroup = ''3''
			AND A.F_IsDisplay = 1
			AND dbo.fun_GetNodeDeviceType(A.F_EntityID) = D.F_ObjectID
			AND B.F_UserCode = @F_UserCode
			AND B.F_RoleCode = C.F_RoleCode
			AND C.F_EntityID = A.F_EntityID
	END

    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetDayHourInterval]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetDayHourInterval]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetDayHourInterval] (
	@F_StartDate date,
	@F_EndDate date
) RETURNS @tb_date TABLE(F_DateTime datetime2(0)) 
BEGIN
	DECLARE @temp datetime2(0)
	DECLARE @i int
	SET @temp = @F_StartDate
	WHILE @temp <= @F_EndDate
	BEGIN
		SET @i = 0
		WHILE @i <= 23
		BEGIN
			INSERT INTO @tb_date VALUES(DATEADD(hh,@i,@temp))
			SET @i = @i + 1
		END
		SET @temp = DATEADD(d,1,@temp)
	END
	RETURN
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntityDayHourData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntityDayHourData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntityDayHourData] 
	@F_EntityID varchar(max),		-- 对象编号
	@F_EnergyType bigint,			-- 能源类型
	@F_ValueLabel varchar(32),		-- 累计参数
	@F_StartDate date,				-- 起始日期yyyy-MM-dd
	@F_EndDate date					-- 截止日期yyyy-MM-dd
AS
BEGIN
	SELECT
		A.F_EntityID,
		dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
		CONVERT(VARCHAR,A.F_DateTime,120) AS F_HourDate,
		CAST(DATEDIFF(s,''1970-01-01'',A.F_DateTime) AS NUMERIC) * 1000 AS F_TimeStamp,
		CONVERT(VARCHAR(10),A.F_DateTime,120) AS F_Day,
		DATEPART(HH,A.F_DateTime) AS F_Hour,
		ISNULL(B.F_EnergyData,0.00) AS F_EnergyData
	FROM
	(
		SELECT 
			A.F_ObjectID AS F_EntityID,
			B.F_DateTime 
		FROM dbo.fun_SplitByComma(@F_EntityID) A,
			dbo.fun_GetDayHourInterval(@F_StartDate,@F_EndDate) B
	) A 
	LEFT OUTER JOIN tb_C_EntityHourData B
		ON A.F_EntityID = B.F_EntityID
		AND B.F_EnergyTypeID = @F_EnergyType
		AND B.F_ValueLabel = @F_ValueLabel
		AND B.F_DataGranularity = ''''
		AND A.F_DateTime = B.F_ReadingDate	
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_MakeSerialNum]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_MakeSerialNum]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_MakeSerialNum]()
RETURNS bigint
BEGIN
	DECLARE @SerialNum bigint
	SET @SerialNum = DATEDIFF(s,''1970-01-01'',GETDATE())
	RETURN @SerialNum
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetWeekdayName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetWeekdayName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetWeekdayName] (
	@F_Date date
)
RETURNS varchar(16)
BEGIN
    DECLARE @WeekFlag varchar(16)
    
    SELECT @WeekFlag = 
		CASE datepart(weekday, @F_Date)
			WHEN 1 THEN ''星期日''
			WHEN 2 THEN ''星期一''
			WHEN 3 THEN ''星期二''
			WHEN 4 THEN ''星期三''
			WHEN 5 THEN ''星期四''
			WHEN 6 THEN ''星期五''
			WHEN 7 THEN ''星期六''
		END
    RETURN @WeekFlag
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetSplityString]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetSplityString]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetSplityString] (
	@F_StartDate int,
	@F_EndDate int
)
RETURNS @tb_year TABLE(F_DayDate int) 
BEGIN
    DECLARE @TempDate int	
    SET @TempDate = @F_StartDate
    
    WHILE @TempDate <= @F_EndDate
	BEGIN	
		INSERT INTO @tb_year VALUES(@TempDate)
		SET @TempDate = @TempDate + 1
	END
    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetSplityMString]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetSplityMString]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetSplityMString] (
	@F_StartDate varchar(7),
	@F_EndDate varchar(7)
)
RETURNS @tb_yMonth TABLE(F_DayDate varchar(7)) 
BEGIN
    DECLARE @TempDate date	
    SET @TempDate = @F_StartDate + ''-01''
    
    WHILE @TempDate <= @F_EndDate + ''-01''
	BEGIN	
		INSERT INTO @tb_yMonth VALUES(CAST(@TempDate AS VARCHAR(7)))
		SET @TempDate = DATEADD(M,1,@TempDate)
	END
    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetSplityMdhDate]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetSplityMdhDate]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetSplityMdhDate] (
	@F_StartDate datetime2(0),
	@F_EndDate datetime2(0)
)
RETURNS @tb_date TABLE(sYear int,sMonth int,sDay int,sHour int) 
BEGIN
    DECLARE @TempDate datetime2(0)
    SET @TempDate = @F_StartDate
    
    WHILE DATEDIFF(HH,@TempDate,@F_EndDate) >= 0
	BEGIN	
		INSERT INTO @tb_date VALUES(YEAR(@TempDate),MONTH(@TempDate),DAY(@TempDate),DATEPART(HH,@TempDate))
		SET @TempDate = DATEADD(HH,1,@TempDate)
	END
    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetSplityMdDate]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetSplityMdDate]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetSplityMdDate] (
	@F_StartDate date,
	@F_EndDate date,
	@F_Type int
)
RETURNS @tb_date TABLE(sYear int,sMonth int,sDay int) 
BEGIN
    DECLARE @TempDate date	
    SET @TempDate = @F_StartDate
    
    IF @F_Type = 1
    BEGIN
		WHILE DATEDIFF(YY,@TempDate,@F_EndDate) >= 0
		BEGIN	
			INSERT INTO @tb_date VALUES(YEAR(@TempDate),NULL,NULL)
			SET @TempDate = DATEADD(YY,1,@TempDate)
		END
	END
	ELSE IF @F_Type = 2
    BEGIN
		WHILE DATEDIFF(M,@TempDate,@F_EndDate) >= 0
		BEGIN	
			INSERT INTO @tb_date VALUES(YEAR(@TempDate),MONTH(@TempDate),NULL)
			SET @TempDate = DATEADD(M,1,@TempDate)
		END
	END
	ELSE IF @F_Type = 3
    BEGIN
		WHILE DATEDIFF(D,@TempDate,@F_EndDate) >= 0
		BEGIN	
			INSERT INTO @tb_date VALUES(YEAR(@TempDate),MONTH(@TempDate),DAY(@TempDate))
			SET @TempDate = DATEADD(D,1,@TempDate)
		END
	END
    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetSplityMDate]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetSplityMDate]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetSplityMDate] (
	@F_StartDate varchar(7),
	@F_EndDate varchar(7)
)
RETURNS @tb_yMonth TABLE(F_Year int,F_Month int) 
BEGIN
    DECLARE @TempDate date	
    SET @TempDate = @F_StartDate + ''-01''
    
    WHILE @TempDate <= @F_EndDate + ''-01''
	BEGIN	
		INSERT INTO @tb_yMonth VALUES(YEAR(@TempDate),MONTH(@TempDate))
		SET @TempDate = DATEADD(M,1,@TempDate)
	END
    RETURN
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntitySameEnergy]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntitySameEnergy]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntitySameEnergy]
	@EntityStr varchar(max),	-- 逗号分割对象
	@EnergyTypeID bigint,		-- 能源内部编码
	@ValueLabel varchar(32),	-- 参数标签
	@BaseType varchar(1),		-- M：月；D：日
	@BaseDate int,				-- 1~12,1~31
	@StartDate varchar(7),		-- 起始日期
	@EndDate varchar(7)			-- 截至日期
AS
BEGIN
	DECLARE @SqlText varchar(max)
	
	IF @BaseType = ''M''
	BEGIN
		SELECT
			A.F_EntityID,
			dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
			A.F_OrderTag,
			A.F_Year,
			A.F_Month,
			ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
			ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
			ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
			ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
			ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
			ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
			ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
			ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
			ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
			ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
			ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost,
			ISNULL(SUM(B.F_DJtceData),0) AS F_CoalData_DJ,
			ISNULL(SUM(B.F_DLtceData),0) AS F_CoalData_DL,
			dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_EnergyData)) AS F_CarbonData,
			dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_EnergyData)) * 44 / 12 AS F_CO2Data,
			dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_BuildingArea'',A.F_Year,A.F_Month) AS F_BuildingArea,
			dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_UserNum'',A.F_Year,A.F_Month) AS F_UserNum
		FROM
		(
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_OrderTag,
				C.F_Year,
				C.F_Month
			FROM tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma(@EntityStr) B,
				dbo.fun_GetSplityMDate(@StartDate + ''-'' + RIGHT(''0'' + CAST(@BaseDate AS VARCHAR),2),@EndDate + ''-'' + RIGHT(''0'' + CAST(@BaseDate AS VARCHAR),2)) C
			WHERE A.F_EntityID = B.F_ObjectID 
		) A
		LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
			ON A.F_EntityID = B.F_EntityID
			AND B.F_EnergyTypeID = @EnergyTypeID
			AND B.F_ValueLabel = @ValueLabel
			AND B.F_DataGranularity = ''''
			AND A.F_Year = B.F_ReadingYear
			AND A.F_Month = B.F_ReadingMonth
		GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month
		ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month
	END
	ELSE IF @BaseType = ''D''
	BEGIN
		SELECT
			A.F_EntityID,
			dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
			A.F_OrderTag,
			A.F_Year,
			A.F_Month,
			A.F_Day,
			ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
			ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
			ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
			ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
			ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
			ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
			ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
			ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
			ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
			ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
			ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost,
			dbo.fun_GetEnergyDJStandardCoal(@EnergyTypeID,SUM(B.F_EnergyData)) AS F_CoalData_DJ,
			dbo.fun_GetEnergyDLStandardCoal(@EnergyTypeID,SUM(B.F_EnergyData)) AS F_CoalData_DL,
			dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_EnergyData)) AS F_CarbonData,
			dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_EnergyData)) * 44 / 12 AS F_CO2Data,
			dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_BuildingArea'',A.F_Year,A.F_Month) AS F_BuildingArea,
			dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_UserNum'',A.F_Year,A.F_Month) AS F_UserNum
		FROM
		(
			SELECT DISTINCT
				A.F_EntityID,
				A.F_EntityName,
				A.F_OrderTag,
				C.sYear AS F_Year,
				C.sMonth AS F_Month,
				C.sDay AS F_Day
			FROM tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma(@EntityStr) B,
				dbo.fun_GetSplityMdDate(@StartDate + ''-'' + RIGHT(''0'' + CAST(@BaseDate AS VARCHAR),2),@EndDate + ''-'' + RIGHT(''0'' + CAST(@BaseDate AS VARCHAR),2),3) C
			WHERE A.F_EntityID = B.F_ObjectID 
		) A
		LEFT OUTER JOIN dbo.tb_C_EntityDayData B
			ON A.F_EntityID = B.F_EntityID
			AND B.F_EnergyTypeID = @EnergyTypeID
			AND B.F_ValueLabel = @ValueLabel
			AND B.F_DataGranularity = ''''
			AND A.F_Year = YEAR(B.F_ReadingDate)
			AND A.F_Month = MONTH(B.F_ReadingDate)
			AND A.F_Day = DAY(B.F_ReadingDate)
		GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day
		ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetExEntityMonthWorkTime]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetExEntityMonthWorkTime]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetExEntityMonthWorkTime] (
	@F_EntityStr varchar(max),
	@F_StartDate varchar(7), 
	@F_EndDate varchar(7)
) RETURNS @tb_m_time TABLE(entity_id bigint,entity_name varchar(256),entity_tag varchar(32),year int,month int,work_start_time int,work_end_time int,tran_start_time1 int,tran_end_time1 int,tran_start_time2 int,tran_end_time2 int,data_src varchar(1)) 
BEGIN
	DECLARE @cur_entity cursor
	DECLARE @F_EntityID bigint
	DECLARE @F_Year int
	DECLARE @F_Month int
	
	SET @cur_entity = CURSOR forward_only static FOR SELECT A.F_ObjectID,B.F_Year,B.F_Month FROM dbo.fun_SplitByComma(@F_EntityStr) A,dbo.fun_GetSplityMDate(@F_StartDate,@F_EndDate) B
	OPEN @cur_entity
	FETCH NEXT FROM @cur_entity INTO @F_EntityID,@F_Year,@F_Month
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_Month AND F_EntityID = @F_EntityID)
			INSERT INTO @tb_m_time SELECT @F_EntityID,dbo.fun_GetEntityPathName(@F_EntityID),dbo.fun_GetEntityOrderTag(@F_EntityID),@F_Year,@F_Month,DATEPART(hh,F_WorkingStime),DATEPART(hh,F_WorkingEtime),DATEPART(hh,F_TransitionStime1),DATEPART(hh,F_TransitionEtime1),DATEPART(hh,F_TransitionStime2),DATEPART(hh,F_TransitionEtime2),''1'' FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_Month AND F_EntityID = @F_EntityID
		ELSE IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = @F_EntityID)
			INSERT INTO @tb_m_time SELECT @F_EntityID,dbo.fun_GetEntityPathName(@F_EntityID),dbo.fun_GetEntityOrderTag(@F_EntityID),@F_Year,@F_Month,DATEPART(hh,F_WorkingStime),DATEPART(hh,F_WorkingEtime),DATEPART(hh,F_TransitionStime1),DATEPART(hh,F_TransitionEtime1),DATEPART(hh,F_TransitionStime2),DATEPART(hh,F_TransitionEtime2),''1'' FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = @F_EntityID
		ELSE IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_Month AND F_EntityID = '''')
			INSERT INTO @tb_m_time SELECT @F_EntityID,dbo.fun_GetEntityPathName(@F_EntityID),dbo.fun_GetEntityOrderTag(@F_EntityID),@F_Year,@F_Month,DATEPART(hh,F_WorkingStime),DATEPART(hh,F_WorkingEtime),DATEPART(hh,F_TransitionStime1),DATEPART(hh,F_TransitionEtime1),DATEPART(hh,F_TransitionStime2),DATEPART(hh,F_TransitionEtime2),''2'' FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_Month AND F_EntityID = ''''
		ELSE IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = '''')
			INSERT INTO @tb_m_time SELECT @F_EntityID,dbo.fun_GetEntityPathName(@F_EntityID),dbo.fun_GetEntityOrderTag(@F_EntityID),@F_Year,@F_Month,DATEPART(hh,F_WorkingStime),DATEPART(hh,F_WorkingEtime),DATEPART(hh,F_TransitionStime1),DATEPART(hh,F_TransitionEtime1),DATEPART(hh,F_TransitionStime2),DATEPART(hh,F_TransitionEtime2),''2'' FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = ''''
		ELSE INSERT INTO @tb_m_time SELECT @F_EntityID,dbo.fun_GetEntityPathName(@F_EntityID),dbo.fun_GetEntityOrderTag(@F_EntityID),@F_Year,@F_Month,NULL,NULL,NULL,NULL,NULL,NULL,''0''
		
		FETCH NEXT FROM @cur_entity INTO @F_EntityID,@F_Year,@F_Month
	END
	
	CLOSE @cur_entity
	DEALLOCATE @cur_entity
	
	RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetSplityDate]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetSplityDate]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetSplityDate] (
	@F_StartDate int,
	@F_EndDate int
)
RETURNS @tb_year TABLE(F_Year int) 
BEGIN
    DECLARE @TempDate int	
    SET @TempDate = @F_StartDate
    
    WHILE @TempDate <= @F_EndDate
	BEGIN	
		INSERT INTO @tb_year VALUES(@TempDate)
		SET @TempDate = @TempDate + 1
	END
    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityPropertyValueByY]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityPropertyValueByY]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityPropertyValueByY] (
	@EntityID bigint,
	@PropertyTag varchar(16),
	@CalculateType varchar(10),
	@Year int
) RETURNS numeric(18,4)
BEGIN
	DECLARE @PropertyValue numeric(18,4)
	DECLARE @GroupTypeID varchar(1)
	DECLARE @i int
	DECLARE @SumValue numeric(18,4)
	DECLARE @TempValue numeric(18,4)
	
	SELECT 
		@GroupTypeID = A.F_GroupTypeID
	FROM dbo.tb_B_ObjectProperty A,
		dbo.tb_B_DictTreeProperty B,
		dbo.tb_B_EntityTreeModel C
	WHERE C.F_EntityID = @EntityID
		AND A.F_PropertyIdentifier = @PropertyTag
		AND C.F_TemplateID = B.F_GroupID
		AND B.F_PropertyID = A.F_PropertyID
		
	SET @i = 1
	SET @SumValue = 0
	WHILE @i <= 12
	BEGIN
		SET @TempValue = 0
		IF @GroupTypeID = ''B''
		BEGIN
			SELECT
				@TempValue = CASE WHEN A.F_PropertyValue <> '''' THEN CAST(A.F_PropertyValue AS NUMERIC(18,4)) ELSE 0 END
			FROM dbo.tb_B_EntityTreeProperty A,
				dbo.tb_B_ObjectProperty B
			WHERE A.F_EntityID = @EntityID
				AND CAST(@Year AS VARCHAR) + ''-'' + CAST(@i AS VARCHAR) + ''-1'' BETWEEN A.F_StartYM AND A.F_EndYM
				AND B.F_PropertyIdentifier = @PropertyTag
				AND A.F_PropertyID = B.F_PropertyID
		END
		ELSE
		BEGIN
			SELECT
				@TempValue = CASE WHEN A.F_PropertyValue <> '''' THEN CAST(A.F_PropertyValue AS NUMERIC(18,4)) ELSE 0 END
			FROM dbo.tb_B_EntityTreeProperty A,
				dbo.tb_B_ObjectProperty B
			WHERE A.F_EntityID = @EntityID
				AND A.F_EndYM = ''9999-12-31''
				AND B.F_PropertyIdentifier = @PropertyTag
				AND A.F_PropertyID = B.F_PropertyID
		END
		SET @SumValue = @SumValue + @TempValue
		SET @i = @i + 1
	END
	IF @CalculateType = ''SUM'' SET @PropertyValue = @SumValue
	ELSE IF @CalculateType = ''AVG'' SET @PropertyValue = @SumValue / 12
	
	RETURN ISNULL(@PropertyValue,0)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntitySumUnitEnergy]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntitySumUnitEnergy]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntitySumUnitEnergy]
	@EntityStr varchar(max),	-- 逗号分割对象
	@EnergyTypeID bigint,		-- 能源内部编码
	@ValueLabel varchar(32),	-- 参数标签
	@DateType varchar(1),		-- Y：年；M：月；D：日
	@StartDate varchar(10),		-- 起始日期
	@EndDate varchar(10),		-- 截至日期
	@GroupByTag varchar(16)		-- 分组属性标签
AS
BEGIN
	DECLARE @SqlText varchar(max)
	
	IF @DateType = ''Y''
	BEGIN
		IF @GroupByTag IS NULL OR @GroupByTag = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
				A.F_OrderTag,
				A.F_Year,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
				ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
				ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
				ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
				ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
				ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
				ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
				ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
				ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
				ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
				ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost,
				ISNULL(SUM(B.F_DJtceData),0) AS F_CoalData_DJ,
				ISNULL(SUM(B.F_DLtceData),0) AS F_CoalData_DL,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_DLtceData)) AS F_CarbonData,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_DLtceData)) * 44 / 12 AS F_CO2Data,
				dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''P_BuildingArea'',''AVG'',A.F_Year) AS F_BuildingArea,
				dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''P_UserNum'',''AVG'',A.F_Year) AS F_UserNum
			FROM 
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_Year
				FROM dbo.fun_GetSplityDate(@StartDate,@EndDate) C,
					dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@EntityStr) B
				WHERE A.F_EntityID = B.F_ObjectID
			) A LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @EnergyTypeID
				AND B.F_ValueLabel = @ValueLabel
				AND B.F_DataGranularity = ''''
				AND A.F_Year = B.F_ReadingYear
			GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year
			ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year
		END
		ELSE
		BEGIN
			SELECT
				A.F_EntityID,
				dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
				A.F_OrderTag,
				A.F_GranularityValue AS F_PropertyTag,
				dbo.fun_GetPropertyTreeText(@GroupByTag,A.F_GranularityValue) AS F_PropertyTagName,
				A.F_Year,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
				ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
				ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
				ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
				ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
				ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
				ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
				ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
				ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
				ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
				ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost,
				ISNULL(SUM(B.F_DJtceData),0) AS F_CoalData_DJ,
				ISNULL(SUM(B.F_DLtceData),0) AS F_CoalData_DL,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_DLtceData)) AS F_CarbonData,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_DLtceData)) * 44 / 12 AS F_CO2Data,
				dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''P_BuildingArea'',''AVG'',A.F_Year) AS F_BuildingArea,
				dbo.fun_GetEntityPropertyValueByY(A.F_EntityID,''P_UserNum'',''AVG'',A.F_Year) AS F_UserNum
			FROM 
			(
				SELECT DISTINCT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					E.F_PropertyValue AS F_GranularityValue,
					D.F_Year
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@EntityStr) B,
					dbo.tb_B_EntityTreeMetering C,
					dbo.fun_GetSplityDate(@StartDate,@EndDate) D,
					dbo.view_EntityPropertyValue E
				WHERE A.F_EntityID = B.F_ObjectID
					AND B.F_ObjectID = C.F_EntityID
					AND C.F_EndDate IS NULL
					AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
					AND E.F_PropertyIdentifier = @GroupByTag
					AND E.F_PropertyValue <> ''''
					AND E.F_EntityID = C.F_NodeID
			) A LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @EnergyTypeID
				AND B.F_ValueLabel = @ValueLabel
				AND B.F_DataGranularity = @GroupByTag
				AND B.F_GranularityValue = A.F_GranularityValue
				AND A.F_Year = B.F_ReadingYear
			GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year
			ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year
		END		
	END
	ELSE IF @DateType = ''M''
	BEGIN
		IF @GroupByTag IS NULL OR @GroupByTag = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
				A.F_OrderTag,
				A.F_Year,
				A.F_Month,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
				ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
				ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
				ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
				ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
				ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
				ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
				ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
				ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
				ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
				ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost,
				ISNULL(SUM(B.F_DJtceData),0) AS F_CoalData_DJ,
				ISNULL(SUM(B.F_DLtceData),0) AS F_CoalData_DL,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_DLtceData)) AS F_CarbonData,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_DLtceData)) * 44 / 12 AS F_CO2Data,
				dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_BuildingArea'',A.F_Year,A.F_Month) AS F_BuildingArea,
				dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_UserNum'',A.F_Year,A.F_Month) AS F_UserNum
			FROM 
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_Year,
					C.F_Month
				FROM dbo.fun_GetSplityMDate(@StartDate,@EndDate) C,
					dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@EntityStr) B
				WHERE A.F_EntityID = B.F_ObjectID
			) A LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @EnergyTypeID
				AND B.F_ValueLabel = @ValueLabel
				AND B.F_DataGranularity = ''''
				AND A.F_Year = B.F_ReadingYear
				AND A.F_Month = B.F_ReadingMonth
			GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month
			ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month
		END
		ELSE
		BEGIN
			SELECT
				A.F_EntityID,
				dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
				A.F_OrderTag,
				A.F_GranularityValue AS F_PropertyTag,
				dbo.fun_GetPropertyTreeText(@GroupByTag,A.F_GranularityValue) AS F_PropertyTagName,
				A.F_Year,
				A.F_Month,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
				ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
				ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
				ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
				ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
				ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
				ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
				ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
				ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
				ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
				ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost,
				ISNULL(SUM(B.F_DJtceData),0) AS F_CoalData_DJ,
				ISNULL(SUM(B.F_DLtceData),0) AS F_CoalData_DL,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_DLtceData)) AS F_CarbonData,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_DLtceData)) * 44 / 12 AS F_CO2Data,
				dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_BuildingArea'',A.F_Year,A.F_Month) AS F_BuildingArea,
				dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_UserNum'',A.F_Year,A.F_Month) AS F_UserNum
			FROM 
			(
				SELECT DISTINCT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					E.F_PropertyValue AS F_GranularityValue,
					D.F_Year,
					D.F_Month
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@EntityStr) B,
					dbo.tb_B_EntityTreeMetering C,
					dbo.fun_GetSplityMDate(@StartDate,@EndDate) D,
					dbo.view_EntityPropertyValue E
				WHERE A.F_EntityID = B.F_ObjectID
					AND B.F_ObjectID = C.F_EntityID
					AND C.F_EndDate IS NULL
					AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
					AND E.F_PropertyIdentifier = @GroupByTag
					AND E.F_PropertyValue <> ''''
					AND E.F_EntityID = C.F_NodeID
			) A LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @EnergyTypeID
				AND B.F_ValueLabel = @ValueLabel
				AND B.F_DataGranularity = @GroupByTag
				AND B.F_GranularityValue = A.F_GranularityValue
				AND A.F_Year = B.F_ReadingYear
				AND A.F_Month = B.F_ReadingMonth
			GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month
			ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month
		END
	END
	ELSE IF @DateType = ''D''
	BEGIN
		IF @GroupByTag IS NULL OR @GroupByTag = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
				A.F_OrderTag,
				A.F_Year,
				A.F_Month,
				A.F_Day,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
				ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
				ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
				ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
				ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
				ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
				ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
				ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
				ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
				ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
				ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost,
				dbo.fun_GetEnergyDJStandardCoal(@EnergyTypeID,SUM(B.F_EnergyData)) AS F_CoalData_DJ,
				dbo.fun_GetEnergyDLStandardCoal(@EnergyTypeID,SUM(B.F_EnergyData)) AS F_CoalData_DL,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_EnergyData)) AS F_CarbonData,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_EnergyData)) * 44 / 12 AS F_CO2Data,
				dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_BuildingArea'',A.F_Year,A.F_Month) AS F_BuildingArea,
				dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_UserNum'',A.F_Year,A.F_Month) AS F_UserNum
			FROM 
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.sYear AS F_Year,
					C.sMonth AS F_Month,
					C.sDay AS F_Day
				FROM dbo.fun_GetSplityMdDate(@StartDate,@EndDate,3) C,
					dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@EntityStr) B
				WHERE A.F_EntityID = B.F_ObjectID
			) A LEFT OUTER JOIN dbo.tb_C_EntityDayData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @EnergyTypeID
				AND B.F_ValueLabel = @ValueLabel
				AND B.F_DataGranularity = ''''
				AND A.F_Year = YEAR(B.F_ReadingDate)
				AND A.F_Month = MONTH(B.F_ReadingDate)
				AND A.F_Day = DAY(B.F_ReadingDate)
			GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day
			ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day
		END
		ELSE
		BEGIN
			SELECT
				A.F_EntityID,
				dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
				A.F_OrderTag,
				A.F_GranularityValue AS F_PropertyTag,
				dbo.fun_GetPropertyTreeText(@GroupByTag,A.F_GranularityValue) AS F_PropertyTagName,
				A.F_Year,
				A.F_Month,
				A.F_Day,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
				ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
				ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
				ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
				ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
				ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
				ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
				ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
				ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
				ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
				ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost,
				dbo.fun_GetEnergyDJStandardCoal(@EnergyTypeID,SUM(B.F_EnergyData)) AS F_CoalData_DJ,
				dbo.fun_GetEnergyDLStandardCoal(@EnergyTypeID,SUM(B.F_EnergyData)) AS F_CoalData_DL,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_EnergyData)) AS F_CarbonData,
				dbo.fun_GetEnergyCarbonEmission(@EnergyTypeID,SUM(B.F_EnergyData)) * 44 / 12 AS F_CO2Data,
				dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_BuildingArea'',A.F_Year,A.F_Month) AS F_BuildingArea,
				dbo.fun_GetEntityPropertyValueByYm(A.F_EntityID,''P_UserNum'',A.F_Year,A.F_Month) AS F_UserNum
			FROM 
			(
				SELECT DISTINCT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					E.F_PropertyValue AS F_GranularityValue,
					D.sYear AS F_Year,
					D.sMonth AS F_Month,
					D.sDay AS F_Day
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@EntityStr) B,
					dbo.tb_B_EntityTreeMetering C,
					dbo.fun_GetSplityMdDate(@StartDate,@EndDate,3) D,
					dbo.view_EntityPropertyValue E
				WHERE A.F_EntityID = B.F_ObjectID
					AND B.F_ObjectID = C.F_EntityID
					AND C.F_EndDate IS NULL
					AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
					AND E.F_PropertyIdentifier = @GroupByTag
					AND E.F_PropertyValue <> ''''
					AND E.F_EntityID = C.F_NodeID
			) A LEFT OUTER JOIN dbo.tb_C_EntityDayData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @EnergyTypeID
				AND B.F_ValueLabel = @ValueLabel
				AND B.F_DataGranularity = @GroupByTag
				AND B.F_GranularityValue = A.F_GranularityValue
				AND A.F_Year = YEAR(B.F_ReadingDate)
				AND A.F_Month = MONTH(B.F_ReadingDate)
				AND A.F_Day = DAY(B.F_ReadingDate)
			GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month,A.F_Day
			ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month,A.F_Day
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntityDateGroupData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntityDateGroupData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntityDateGroupData]
	@EntityStr varchar(max),	-- 逗号分割对象
	@EnergyTypeID bigint,		-- 能源内部编码
	@ValueLabel varchar(32),	-- 参数标签
	@DateType varchar(1),		-- Y：年；M：月；D：日；H：时
	@StartDate varchar(32),		-- 起始日期
	@EndDate varchar(32),		-- 截至日期
	@GroupByTag varchar(16),	-- 分组属性标签
	@GroupByValue varchar(16)	-- 分组值
AS
BEGIN
	DECLARE @SqlText varchar(max)
	
	IF @DateType = ''Y''
	BEGIN
		IF @GroupByTag IS NULL OR @GroupByTag = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
				A.F_OrderTag,
				A.F_Year,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
				ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
				ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
				ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
				ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
				ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
				ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
				ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
				ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
				ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
				ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost
			FROM 
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_Year
				FROM dbo.fun_GetSplityDate(@StartDate,@EndDate) C,
					dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@EntityStr) B
				WHERE A.F_EntityID = B.F_ObjectID
			) A LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @EnergyTypeID
				AND B.F_ValueLabel = @ValueLabel
				AND B.F_DataGranularity = ''''
				AND A.F_Year = B.F_ReadingYear
			GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year
			ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year
		END
		ELSE
		BEGIN
			IF @GroupByValue = ''''
			BEGIN
				SELECT
					A.F_EntityID,
					dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
					A.F_OrderTag,
					A.F_GranularityValue AS F_PropertyTag,
					dbo.fun_GetPropertyTreeText(@GroupByTag,A.F_GranularityValue) AS F_PropertyTagName,
					A.F_Year,
					ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
					ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
					ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
					ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
					ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
					ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
					ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
					ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
					ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
					ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
					ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost
				FROM 
				(
					SELECT DISTINCT
						A.F_EntityID,
						A.F_EntityName,
						A.F_OrderTag,
						E.F_PropertyValue AS F_GranularityValue,
						D.F_Year
					FROM dbo.tb_B_EntityTreeModel A,
						dbo.fun_SplitByComma(@EntityStr) B,
						dbo.tb_B_EntityTreeMetering C,
						dbo.fun_GetSplityDate(@StartDate,@EndDate) D,
						dbo.view_EntityPropertyValue E
					WHERE A.F_EntityID = B.F_ObjectID
						AND B.F_ObjectID = C.F_EntityID
						AND C.F_EndDate IS NULL
						AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
						AND E.F_PropertyIdentifier = @GroupByTag
						AND E.F_PropertyValue <> ''''
						AND E.F_EntityID = C.F_NodeID
				) A LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
					ON A.F_EntityID = B.F_EntityID
					AND B.F_EnergyTypeID = @EnergyTypeID
					AND B.F_ValueLabel = @ValueLabel
					AND B.F_DataGranularity = @GroupByTag
					AND B.F_GranularityValue = A.F_GranularityValue
					AND A.F_Year = B.F_ReadingYear
				GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year
				ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year
			END
			ELSE
			BEGIN
				SELECT
					A.F_EntityID,
					dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
					A.F_OrderTag,
					@GroupByValue AS F_PropertyTag,
					dbo.fun_GetPropertyTreeText(@GroupByTag,@GroupByValue) AS F_PropertyTagName,
					A.F_Year,
					ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
					ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
					ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
					ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
					ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
					ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
					ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
					ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
					ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
					ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
					ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost
				FROM 
				(
					SELECT DISTINCT
						A.F_EntityID,
						A.F_EntityName,
						A.F_OrderTag,
						E.F_PropertyValue AS F_GranularityValue,
						D.F_Year
					FROM dbo.tb_B_EntityTreeModel A,
						dbo.fun_SplitByComma(@EntityStr) B,
						dbo.tb_B_EntityTreeMetering C,
						dbo.fun_GetSplityDate(@StartDate,@EndDate) D,
						dbo.view_EntityPropertyValue E
					WHERE A.F_EntityID = B.F_ObjectID
						AND B.F_ObjectID = C.F_EntityID
						AND C.F_EndDate IS NULL
						AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
						AND E.F_PropertyIdentifier = @GroupByTag
						AND E.F_PropertyValue = @GroupByValue
						AND E.F_EntityID = C.F_NodeID
				) A LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
					ON A.F_EntityID = B.F_EntityID
					AND B.F_EnergyTypeID = @EnergyTypeID
					AND B.F_ValueLabel = @ValueLabel
					AND B.F_DataGranularity = @GroupByTag
					AND B.F_GranularityValue = @GroupByValue
					AND A.F_Year = B.F_ReadingYear
				GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year
				ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year
			END
		END		
	END
	ELSE IF @DateType = ''M''
	BEGIN
		IF @GroupByTag IS NULL OR @GroupByTag = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
				A.F_OrderTag,
				A.F_Year,
				A.F_Month,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
				ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
				ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
				ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
				ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
				ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
				ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
				ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
				ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
				ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
				ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost
			FROM 
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_Year,
					C.F_Month
				FROM dbo.fun_GetSplityMDate(@StartDate,@EndDate) C,
					dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@EntityStr) B
				WHERE A.F_EntityID = B.F_ObjectID
			) A LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @EnergyTypeID
				AND B.F_ValueLabel = @ValueLabel
				AND B.F_DataGranularity = ''''
				AND A.F_Year = B.F_ReadingYear
				AND A.F_Month = B.F_ReadingMonth
			GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month
			ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month
		END
		ELSE
		BEGIN
			IF @GroupByValue = ''''
			BEGIN
				SELECT
					A.F_EntityID,
					dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
					A.F_OrderTag,
					A.F_GranularityValue AS F_PropertyTag,
					dbo.fun_GetPropertyTreeText(@GroupByTag,A.F_GranularityValue) AS F_PropertyTagName,
					A.F_Year,
					A.F_Month,
					ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
					ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
					ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
					ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
					ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
					ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
					ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
					ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
					ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
					ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
					ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost
				FROM 
				(
					SELECT DISTINCT
						A.F_EntityID,
						A.F_EntityName,
						A.F_OrderTag,
						E.F_PropertyValue AS F_GranularityValue,
						D.F_Year,
						D.F_Month
					FROM dbo.tb_B_EntityTreeModel A,
						dbo.fun_SplitByComma(@EntityStr) B,
						dbo.tb_B_EntityTreeMetering C,
						dbo.fun_GetSplityMDate(@StartDate,@EndDate) D,
						dbo.view_EntityPropertyValue E
					WHERE A.F_EntityID = B.F_ObjectID
						AND B.F_ObjectID = C.F_EntityID
						AND C.F_EndDate IS NULL
						AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
						AND E.F_PropertyIdentifier = @GroupByTag
						AND E.F_PropertyValue <> ''''
						AND E.F_EntityID = C.F_NodeID
				) A LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
					ON A.F_EntityID = B.F_EntityID
					AND B.F_EnergyTypeID = @EnergyTypeID
					AND B.F_ValueLabel = @ValueLabel
					AND B.F_DataGranularity = @GroupByTag
					AND B.F_GranularityValue = A.F_GranularityValue
					AND A.F_Year = B.F_ReadingYear
					AND A.F_Month = B.F_ReadingMonth
				GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month
				ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month
			END
			ELSE
			BEGIN
				SELECT
					A.F_EntityID,
					dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
					A.F_OrderTag,
					@GroupByValue AS F_PropertyTag,
					dbo.fun_GetPropertyTreeText(@GroupByTag,@GroupByValue) AS F_PropertyTagName,
					A.F_Year,
					A.F_Month,
					ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
					ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
					ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
					ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
					ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
					ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
					ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
					ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
					ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
					ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
					ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost
				FROM 
				(
					SELECT DISTINCT
						A.F_EntityID,
						A.F_EntityName,
						A.F_OrderTag,
						E.F_PropertyValue AS F_GranularityValue,
						D.F_Year,
						D.F_Month
					FROM dbo.tb_B_EntityTreeModel A,
						dbo.fun_SplitByComma(@EntityStr) B,
						dbo.tb_B_EntityTreeMetering C,
						dbo.fun_GetSplityMDate(@StartDate,@EndDate) D,
						dbo.view_EntityPropertyValue E
					WHERE A.F_EntityID = B.F_ObjectID
						AND B.F_ObjectID = C.F_EntityID
						AND C.F_EndDate IS NULL
						AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
						AND E.F_PropertyIdentifier = @GroupByTag
						AND E.F_PropertyValue = @GroupByValue
						AND E.F_EntityID = C.F_NodeID
				) A LEFT OUTER JOIN dbo.tb_C_EntityMonthData B
					ON A.F_EntityID = B.F_EntityID
					AND B.F_EnergyTypeID = @EnergyTypeID
					AND B.F_ValueLabel = @ValueLabel
					AND B.F_DataGranularity = @GroupByTag
					AND B.F_GranularityValue = @GroupByValue
					AND A.F_Year = B.F_ReadingYear
					AND A.F_Month = B.F_ReadingMonth
				GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month
				ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month
			END
		END
	END
	ELSE IF @DateType = ''D''
	BEGIN
		IF @GroupByTag IS NULL OR @GroupByTag = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
				A.F_OrderTag,
				A.F_Year,
				A.F_Month,
				A.F_Day,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
				ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
				ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
				ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
				ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
				ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
				ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
				ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
				ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
				ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
				ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost
			FROM 
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.sYear AS F_Year,
					C.sMonth AS F_Month,
					C.sDay AS F_Day
				FROM dbo.fun_GetSplityMdDate(@StartDate,@EndDate,3) C,
					dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@EntityStr) B
				WHERE A.F_EntityID = B.F_ObjectID
			) A LEFT OUTER JOIN dbo.tb_C_EntityDayData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @EnergyTypeID
				AND B.F_ValueLabel = @ValueLabel
				AND B.F_DataGranularity = ''''
				AND A.F_Year = YEAR(B.F_ReadingDate)
				AND A.F_Month = MONTH(B.F_ReadingDate)
				AND A.F_Day = DAY(B.F_ReadingDate)
			GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day
			ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day
		END
		ELSE
		BEGIN
			IF @GroupByValue = ''''
			BEGIN
				SELECT
					A.F_EntityID,
					dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
					A.F_OrderTag,
					A.F_GranularityValue AS F_PropertyTag,
					dbo.fun_GetPropertyTreeText(@GroupByTag,A.F_GranularityValue) AS F_PropertyTagName,
					A.F_Year,
					A.F_Month,
					A.F_Day,
					ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
					ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
					ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
					ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
					ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
					ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
					ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
					ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
					ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
					ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
					ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost
				FROM 
				(
					SELECT DISTINCT
						A.F_EntityID,
						A.F_EntityName,
						A.F_OrderTag,
						E.F_PropertyValue AS F_GranularityValue,
						D.sYear AS F_Year,
						D.sMonth AS F_Month,
						D.sDay AS F_Day
					FROM dbo.tb_B_EntityTreeModel A,
						dbo.fun_SplitByComma(@EntityStr) B,
						dbo.tb_B_EntityTreeMetering C,
						dbo.fun_GetSplityMdDate(@StartDate,@EndDate,3) D,
						dbo.view_EntityPropertyValue E
					WHERE A.F_EntityID = B.F_ObjectID
						AND B.F_ObjectID = C.F_EntityID
						AND C.F_EndDate IS NULL
						AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
						AND E.F_PropertyIdentifier = @GroupByTag
						AND E.F_PropertyValue <> ''''
						AND E.F_EntityID = C.F_NodeID
				) A LEFT OUTER JOIN dbo.tb_C_EntityDayData B
					ON A.F_EntityID = B.F_EntityID
					AND B.F_EnergyTypeID = @EnergyTypeID
					AND B.F_ValueLabel = @ValueLabel
					AND B.F_DataGranularity = @GroupByTag
					AND B.F_GranularityValue = A.F_GranularityValue
					AND A.F_Year = YEAR(B.F_ReadingDate)
					AND A.F_Month = MONTH(B.F_ReadingDate)
					AND A.F_Day = DAY(B.F_ReadingDate)
				GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month,A.F_Day
				ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month,A.F_Day
			END
			ELSE
			BEGIN
				SELECT
					A.F_EntityID,
					dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
					A.F_OrderTag,
					@GroupByValue AS F_PropertyTag,
					dbo.fun_GetPropertyTreeText(@GroupByTag,@GroupByValue) AS F_PropertyTagName,
					A.F_Year,
					A.F_Month,
					A.F_Day,
					ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
					ISNULL(SUM(B.F_EnergyCost),0) AS F_EnergyCost,
					ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
					ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
					ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData,
					ISNULL(SUM(B.F_PeakData),0) AS F_PeakData,
					ISNULL(SUM(B.F_ValleyData),0) AS F_ValleyData,
					ISNULL(SUM(B.F_LevelData),0) AS F_LevelData,
					ISNULL(SUM(B.F_PeakCost),0) AS F_PeakCost,
					ISNULL(SUM(B.F_ValleyCost),0) AS F_ValleyCost,
					ISNULL(SUM(B.F_LevelCost),0) AS F_LevelCost
				FROM 
				(
					SELECT DISTINCT
						A.F_EntityID,
						A.F_EntityName,
						A.F_OrderTag,
						E.F_PropertyValue AS F_GranularityValue,
						D.sYear AS F_Year,
						D.sMonth AS F_Month,
						D.sDay AS F_Day
					FROM dbo.tb_B_EntityTreeModel A,
						dbo.fun_SplitByComma(@EntityStr) B,
						dbo.tb_B_EntityTreeMetering C,
						dbo.fun_GetSplityMdDate(@StartDate,@EndDate,3) D,
						dbo.view_EntityPropertyValue E
					WHERE A.F_EntityID = B.F_ObjectID
						AND B.F_ObjectID = C.F_EntityID
						AND C.F_EndDate IS NULL
						AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
						AND E.F_PropertyIdentifier = @GroupByTag
						AND E.F_PropertyValue = @GroupByValue
						AND E.F_EntityID = C.F_NodeID
				) A LEFT OUTER JOIN dbo.tb_C_EntityDayData B
					ON A.F_EntityID = B.F_EntityID
					AND B.F_EnergyTypeID = @EnergyTypeID
					AND B.F_ValueLabel = @ValueLabel
					AND B.F_DataGranularity = @GroupByTag
					AND B.F_GranularityValue = @GroupByValue
					AND A.F_Year = YEAR(B.F_ReadingDate)
					AND A.F_Month = MONTH(B.F_ReadingDate)
					AND A.F_Day = DAY(B.F_ReadingDate)
				GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month,A.F_Day
				ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day
			END
		END
	END
	ELSE IF @DateType = ''H''
	BEGIN
		IF @GroupByTag IS NULL OR @GroupByTag = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
				A.F_OrderTag,
				A.F_Year,
				A.F_Month,
				A.F_Day,
				A.F_Hour,
				ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData
			FROM 
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.sYear AS F_Year,
					C.sMonth AS F_Month,
					C.sDay AS F_Day,
					C.sHour AS F_Hour
				FROM dbo.fun_GetSplityMdhDate(@StartDate,@EndDate) C,
					dbo.tb_B_EntityTreeModel A,
					dbo.fun_SplitByComma(@EntityStr) B
				WHERE A.F_EntityID = B.F_ObjectID
			) A LEFT OUTER JOIN dbo.tb_C_EntityHourData B
				ON A.F_EntityID = B.F_EntityID
				AND B.F_EnergyTypeID = @EnergyTypeID
				AND B.F_ValueLabel = @ValueLabel
				AND B.F_DataGranularity = ''''
				AND A.F_Year = YEAR(B.F_ReadingDate)
				AND A.F_Month = MONTH(B.F_ReadingDate)
				AND A.F_Day = DAY(B.F_ReadingDate)
				AND A.F_Hour = DATEPART(HH,B.F_ReadingDate)
			GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day,A.F_Hour
			ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day,A.F_Hour
		END
		ELSE
		BEGIN
			IF @GroupByValue = ''''
			BEGIN
				SELECT
					A.F_EntityID,
					dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
					A.F_OrderTag,
					A.F_GranularityValue AS F_PropertyTag,
					dbo.fun_GetPropertyTreeText(@GroupByTag,A.F_GranularityValue) AS F_PropertyTagName,
					A.F_Year,
					A.F_Month,
					A.F_Day,
					A.F_Hour,
					ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData
				FROM 
				(
					SELECT DISTINCT
						A.F_EntityID,
						A.F_EntityName,
						A.F_OrderTag,
						E.F_PropertyValue AS F_GranularityValue,
						D.sYear AS F_Year,
						D.sMonth AS F_Month,
						D.sDay AS F_Day,
						D.sHour AS F_Hour
					FROM dbo.tb_B_EntityTreeModel A,
						dbo.fun_SplitByComma(@EntityStr) B,
						dbo.tb_B_EntityTreeMetering C,
						dbo.fun_GetSplityMdhDate(@StartDate,@EndDate) D,
						dbo.view_EntityPropertyValue E
					WHERE A.F_EntityID = B.F_ObjectID
						AND B.F_ObjectID = C.F_EntityID
						AND C.F_EndDate IS NULL
						AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
						AND E.F_PropertyIdentifier = @GroupByTag
						AND E.F_PropertyValue <> ''''
						AND E.F_EntityID = C.F_NodeID
				) A LEFT OUTER JOIN dbo.tb_C_EntityHourData B
					ON A.F_EntityID = B.F_EntityID
					AND B.F_EnergyTypeID = @EnergyTypeID
					AND B.F_ValueLabel = @ValueLabel
					AND B.F_DataGranularity = @GroupByTag
					AND B.F_GranularityValue = A.F_GranularityValue
					AND A.F_Year = YEAR(B.F_ReadingDate)
					AND A.F_Month = MONTH(B.F_ReadingDate)
					AND A.F_Day = DAY(B.F_ReadingDate)
					AND A.F_Hour = DATEPART(HH,B.F_ReadingDate)
				GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month,A.F_Day,A.F_Hour
				ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month,A.F_Day,A.F_Hour
			END
			ELSE
			BEGIN
				SELECT
					A.F_EntityID,
					dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
					A.F_OrderTag,
					@GroupByValue AS F_PropertyTag,
					dbo.fun_GetPropertyTreeText(@GroupByTag,@GroupByValue) AS F_PropertyTagName,
					A.F_Year,
					A.F_Month,
					A.F_Day,
					A.F_Hour,
					ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData
				FROM 
				(
					SELECT DISTINCT
						A.F_EntityID,
						A.F_EntityName,
						A.F_OrderTag,
						E.F_PropertyValue AS F_GranularityValue,
						D.sYear AS F_Year,
						D.sMonth AS F_Month,
						D.sDay AS F_Day,
						D.sHour AS F_Hour
					FROM dbo.tb_B_EntityTreeModel A,
						dbo.fun_SplitByComma(@EntityStr) B,
						dbo.tb_B_EntityTreeMetering C,
						dbo.fun_GetSplityMdhDate(@StartDate,@EndDate) D,
						dbo.view_EntityPropertyValue E
					WHERE A.F_EntityID = B.F_ObjectID
						AND B.F_ObjectID = C.F_EntityID
						AND C.F_EndDate IS NULL
						AND dbo.fun_GetNodeEnergyType(C.F_NodeID) = @EnergyTypeID
						AND E.F_PropertyIdentifier = @GroupByTag
						AND E.F_PropertyValue = @GroupByValue
						AND E.F_EntityID = C.F_NodeID
				) A LEFT OUTER JOIN dbo.tb_C_EntityHourData B
					ON A.F_EntityID = B.F_EntityID
					AND B.F_EnergyTypeID = @EnergyTypeID
					AND B.F_ValueLabel = @ValueLabel
					AND B.F_DataGranularity = @GroupByTag
					AND B.F_GranularityValue = @GroupByValue
					AND A.F_Year = YEAR(B.F_ReadingDate)
					AND A.F_Month = MONTH(B.F_ReadingDate)
					AND A.F_Day = DAY(B.F_ReadingDate)
					AND A.F_Hour = DATEPART(HH,B.F_ReadingDate)
				GROUP BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_GranularityValue,A.F_Year,A.F_Month,A.F_Day,A.F_Hour
				ORDER BY A.F_OrderTag,A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day,A.F_Hour
			END
		END
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetSplitDate]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetSplitDate]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetSplitDate] (
	@F_StartDate date,
	@F_EndDate date
)
RETURNS @tb_daydate TABLE(F_DayDate date) 
BEGIN
    DECLARE @TempDate date	
    SET @TempDate = @F_StartDate
    
    WHILE DATEDIFF(D,@TempDate,@F_EndDate) >= 0
	BEGIN	
		INSERT INTO @tb_daydate VALUES(@TempDate)
		SET @TempDate = DATEADD(D,1,@TempDate)
	END
    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetRenameEntityTree]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetRenameEntityTree]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetRenameEntityTree] (
	@F_FunctionCode bigint,
	@F_PluginCode bigint,
	@F_EntityTreeNo int
)
RETURNS varchar(64) 
BEGIN
	DECLARE @Name varchar(64)
	SELECT @Name = F_EntityTreeRename FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo = @F_EntityTreeNo
	RETURN ISNULL(@Name,'''')
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPVLTime]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPVLTime]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetPVLTime] (
	@F_EnergyTypeID bigint
)
RETURNS @tb_pvl TABLE(F_StartTime varchar(32),F_EndTime varchar(32)) 
BEGIN
    INSERT INTO @tb_pvl SELECT F_PeakStime1,F_PeakEtime1 FROM dbo.tb_D_PVLTimePrice WHERE F_EnergyTypeID = @F_EnergyTypeID AND F_PeakStime1 IS NOT NULL
    INSERT INTO @tb_pvl SELECT F_PeakStime2,F_PeakEtime2 FROM dbo.tb_D_PVLTimePrice WHERE F_EnergyTypeID = @F_EnergyTypeID AND F_PeakStime2 IS NOT NULL
    INSERT INTO @tb_pvl SELECT F_ValleyStime,F_ValleyEtime FROM dbo.tb_D_PVLTimePrice WHERE F_EnergyTypeID = @F_EnergyTypeID AND F_ValleyStime IS NOT NULL
    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPeakStartTime2]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPeakStartTime2]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetPeakStartTime2] (
) RETURNS time(0) 
BEGIN
	DECLARE @StartTime time(0) 

	SELECT @StartTime = F_PeakStime2 FROM dbo.tb_D_PVLTimePrice

	RETURN @StartTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPeakStartTime1]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPeakStartTime1]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetPeakStartTime1] (
) RETURNS time(0) 
BEGIN
	DECLARE @StartTime time(0) 

	SELECT @StartTime = F_PeakStime1 FROM dbo.tb_D_PVLTimePrice

	RETURN @StartTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPeakEndTime2]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPeakEndTime2]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetPeakEndTime2] (
) RETURNS time(0) 
BEGIN
	DECLARE @EndTime time(0) 

	SELECT @EndTime = F_PeakEtime2 FROM dbo.tb_D_PVLTimePrice

	RETURN @EndTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPeakEndTime1]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPeakEndTime1]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetPeakEndTime1] (
) RETURNS time(0) 
BEGIN
	DECLARE @EndTime time(0) 

	SELECT @EndTime = F_PeakEtime1 FROM dbo.tb_D_PVLTimePrice

	RETURN @EndTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityNodeMeterStatus]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityNodeMeterStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityNodeMeterStatus] (
	@F_EntityID bigint,
	@F_DayDate date,
	@F_EnergyTypeID bigint,
	@F_DataGranularity varchar(32),
	@F_NodeID bigint
) RETURNS bit
BEGIN
	DECLARE @IsMetering bit
	
	IF EXISTS(SELECT F_NodeCode FROM tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate = @F_DayDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = @F_DataGranularity AND F_NodeCode = @F_NodeID) SET @IsMetering = 1
	ELSE IF EXISTS(SELECT F_NodeCode FROM tb_C_EntitySplitNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate = @F_DayDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = @F_DataGranularity AND F_NodeCode = @F_NodeID) SET @IsMetering = 1
	ELSE SET @IsMetering = 0
	
	RETURN @IsMetering
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntityMeteringInfo]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntityMeteringInfo]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntityMeteringInfo]
	@F_EntityID varchar(max),
	@F_EnergyTypeID bigint,
	@F_DataGranularity varchar(32),
	@F_GranularityValue varchar(32),
	@F_GroupBy varchar(32)
AS
BEGIN
	IF @F_DataGranularity = ''''
	BEGIN
		IF @F_GroupBy = ''1''
		BEGIN
			SELECT
				F_EntityID,
				dbo.fun_GetEntityPathName(F_EntityID) AS F_EntityName,
				F_NodeRelation,
				F_RelationName,
				COUNT(F_NodeID) AS F_NodeCount 
			FROM
			(
				SELECT
					T.F_ObjectID AS F_EntityID, 
					dbo.fun_GetEntityPropertyValue(A.F_NodeID,''P2_NodeRelation'') AS F_NodeRelation,
					dbo.fun_GetEntityPropertyText(A.F_NodeID,''P2_NodeRelation'') AS F_RelationName,
					A.F_NodeID 
				FROM dbo.fun_SplitByComma(@F_EntityID) T 
					LEFT OUTER JOIN dbo.tb_B_EntityTreeMetering A 
						ON T.F_ObjectID = A.F_EntityID AND A.F_EndDate IS NULL AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID
			) AS A 
			GROUP BY F_EntityID,F_NodeRelation,F_RelationName 
			ORDER BY dbo.fun_GetEntityOrderTag(F_EntityID),F_NodeRelation
		END
		ELSE
		BEGIN
			SELECT 
				T.F_ObjectID AS F_EntityID, 
				dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName,
				A.F_NodeID,
				dbo.fun_GetEntityName(B.F_EntityID) AS F_NodeName,
				dbo.fun_GetEntityPathName(B.F_EntityID) AS F_NodeFullName,
				dbo.fun_GetEntityPropertyValue(A.F_NodeID,''P2_NodeRelation'') AS F_NodeRelation,
				dbo.fun_GetEntityPropertyText(A.F_NodeID,''P2_NodeRelation'') AS F_RelationName,
				dbo.fun_GetEntityNodeMeterStatus(@F_EntityID,GETDATE(),@F_EnergyTypeID,@F_DataGranularity,A.F_NodeID) AS F_MeteringBit
			FROM dbo.fun_SplitByComma(@F_EntityID) T 
				LEFT OUTER JOIN dbo.tb_B_EntityTreeMetering A
					ON T.F_ObjectID = A.F_EntityID AND A.F_EndDate IS NULL AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID
				LEFT OUTER JOIN dbo.tb_B_EntityTreeModel B
					ON A.F_NodeTreeNo = B.F_EntityTreeNo AND A.F_NodeID = B.F_EntityID 
			ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),F_NodeRelation,B.F_OrderTag
		END
	END
	ELSE
	BEGIN
		IF @F_GranularityValue = ''''
		BEGIN
			IF @F_GroupBy = ''1''
			BEGIN
				SELECT 
					F_EntityID,
					dbo.fun_GetEntityPathName(F_EntityID) AS F_EntityName,
					F_NodeRelation,
					F_RelationName,
					COUNT(F_NodeID) AS F_NodeCount 
				FROM
				(
					SELECT 
						T.F_ObjectID AS F_EntityID, 
						dbo.fun_GetEntityPropertyValue(A.F_NodeID,''P2_NodeRelation'') AS F_NodeRelation,
						dbo.fun_GetEntityPropertyText(A.F_NodeID,''P2_NodeRelation'') AS F_RelationName,
						A.F_NodeID 
					FROM dbo.fun_SplitByComma(@F_EntityID) T 
						LEFT OUTER JOIN dbo.tb_B_EntityTreeMetering A
							ON T.F_ObjectID = A.F_EntityID AND A.F_EndDate IS NULL AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID AND ISNULL(dbo.fun_GetEntityPropertyValue(A.F_NodeID,@F_DataGranularity),'''') = @F_GranularityValue
				) AS A 
				GROUP BY F_EntityID,F_NodeRelation,F_RelationName 
				ORDER BY dbo.fun_GetEntityOrderTag(F_EntityID),F_NodeRelation
			END
			ELSE
			BEGIN
				SELECT
					T.F_ObjectID AS F_EntityID, 
					dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName,
					A.F_NodeID,
					dbo.fun_GetEntityName(B.F_EntityID) AS F_NodeName,
					dbo.fun_GetEntityPathName(B.F_EntityID) AS F_NodeFullName,
					dbo.fun_GetEntityPropertyValue(A.F_NodeID,''P2_NodeRelation'') AS F_NodeRelation,
					dbo.fun_GetEntityPropertyText(A.F_NodeID,''P2_NodeRelation'') AS F_RelationName,
					dbo.fun_GetEntityNodeMeterStatus(@F_EntityID,GETDATE(),@F_EnergyTypeID,@F_DataGranularity,A.F_NodeID) AS F_MeteringBit
				FROM dbo.fun_SplitByComma(@F_EntityID) T 
					LEFT OUTER JOIN dbo.tb_B_EntityTreeMetering A
						ON T.F_ObjectID = A.F_EntityID AND A.F_EndDate IS NULL AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID AND ISNULL(dbo.fun_GetEntityPropertyValue(A.F_NodeID,@F_DataGranularity),'''') = @F_GranularityValue
					LEFT OUTER JOIN dbo.tb_B_EntityTreeModel B
						ON A.F_NodeTreeNo = B.F_EntityTreeNo AND A.F_NodeID = B.F_EntityID 			
				ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),F_NodeRelation,B.F_OrderTag
			END
		END
		ELSE
		BEGIN
			IF @F_GroupBy = ''1''
			BEGIN
				SELECT 
					F_EntityID,
					dbo.fun_GetEntityPathName(F_EntityID) AS F_EntityName,
					F_NodeRelation,
					F_RelationName,
					COUNT(F_NodeID) AS F_NodeCount 
				FROM
				(
					SELECT 
						T.F_ObjectID AS F_EntityID, 
						dbo.fun_GetEntityPropertyValue(A.F_NodeID,''P2_NodeRelation'') AS F_NodeRelation,
						dbo.fun_GetEntityPropertyText(A.F_NodeID,''P2_NodeRelation'') AS F_RelationName,
						A.F_NodeID 
					FROM dbo.fun_SplitByComma(@F_EntityID) T 
						LEFT OUTER JOIN dbo.tb_B_EntityTreeMetering A
							ON T.F_ObjectID = A.F_EntityID AND A.F_EndDate IS NULL AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID AND ISNULL(dbo.fun_GetEntityPropertyValue(A.F_NodeID,@F_DataGranularity),'''') = @F_GranularityValue
				) AS A 
				GROUP BY F_EntityID,F_NodeRelation,F_RelationName 
				ORDER BY dbo.fun_GetEntityOrderTag(F_EntityID),F_NodeRelation
			END
			ELSE
			BEGIN
				SELECT 
					T.F_ObjectID AS F_EntityID, 
					dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName,
					A.F_NodeID,
					dbo.fun_GetEntityName(B.F_EntityID) AS F_NodeName,
					dbo.fun_GetEntityPathName(B.F_EntityID) AS F_NodeFullName,
					dbo.fun_GetEntityPropertyValue(A.F_NodeID,''P2_NodeRelation'') AS F_NodeRelation,
					dbo.fun_GetEntityPropertyText(A.F_NodeID,''P2_NodeRelation'') AS F_RelationName,
					dbo.fun_GetEntityNodeMeterStatus(@F_EntityID,GETDATE(),@F_EnergyTypeID,@F_DataGranularity,A.F_NodeID) AS F_MeteringBit
				FROM dbo.fun_SplitByComma(@F_EntityID) T 
					LEFT OUTER JOIN dbo.tb_B_EntityTreeMetering A
						ON T.F_ObjectID = A.F_EntityID AND A.F_EndDate IS NULL AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID AND ISNULL(dbo.fun_GetEntityPropertyValue(A.F_NodeID,@F_DataGranularity),'''') = @F_GranularityValue
					LEFT OUTER JOIN dbo.tb_B_EntityTreeModel B
						ON A.F_NodeTreeNo = B.F_EntityTreeNo AND A.F_NodeID = B.F_EntityID 
				ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),F_NodeRelation,B.F_OrderTag
			END
		END
	END	
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetFilterMeteringNode]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetFilterMeteringNode]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetFilterMeteringNode] (
	@F_EntityID bigint,
	@F_EnergyTypeID bigint,
	@F_DataGranularity varchar(32),
	@F_StartDate DATE,
	@F_EndDate DATE
)
RETURNS @tb_node TABLE (F_NodeID BIGINT,F_DayDate DATE,F_Rate numeric(18,2),F_MeteringBit bit) 
BEGIN
    INSERT INTO @tb_node 
    SELECT 
		A.F_NodeID,
		B.F_DayDate,
		A.F_Rate,
		dbo.fun_GetEntityNodeMeterStatus(@F_EntityID,B.F_DayDate,@F_EnergyTypeID,@F_DataGranularity,A.F_NodeID)
	FROM dbo.tb_B_EntityTreeMetering A,
		dbo.fun_GetSplitDate(@F_StartDate,@F_EndDate) B
	WHERE A.F_EntityID = @F_EntityID
		AND dbo.fun_GetNodeEnergyType(A.F_NodeID) = @F_EnergyTypeID
		AND B.F_DayDate BETWEEN A.F_StartDate AND ISNULL(A.F_EndDate,''9999-12-31'')
	
    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeTemplateByName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeTemplateByName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeTemplateByName] (
	@F_TemplateName varchar(128)
) RETURNS bigint
BEGIN
	DECLARE @F_TemplateID bigint
	SELECT @F_TemplateID = F_TemplateCode FROM dbo.tb_A_Template WHERE F_TemplateName = @F_TemplateName
	
	RETURN @F_TemplateID
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetMonthWorkTime]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetMonthWorkTime]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetMonthWorkTime] (
	@F_Year int, 
	@F_Month int
) RETURNS @tb_m_time TABLE(year int,month int,work_start_time int,work_end_time int,tran_start_time1 int,tran_end_time1 int,tran_start_time2 int,tran_end_time2 int) 
BEGIN
	IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_Month AND F_EntityID = '''')
		INSERT INTO @tb_m_time SELECT @F_Year,@F_Month,DATEPART(hh,F_WorkingStime),DATEPART(hh,F_WorkingEtime),DATEPART(hh,F_TransitionStime1),DATEPART(hh,F_TransitionEtime1),DATEPART(hh,F_TransitionStime2),DATEPART(hh,F_TransitionEtime2) FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_Month AND F_EntityID = ''''
	ELSE IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = '''')
		INSERT INTO @tb_m_time SELECT @F_Year,@F_Month,DATEPART(hh,F_WorkingStime),DATEPART(hh,F_WorkingEtime),DATEPART(hh,F_TransitionStime1),DATEPART(hh,F_TransitionEtime1),DATEPART(hh,F_TransitionStime2),DATEPART(hh,F_TransitionEtime2) FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = ''''
	ELSE INSERT INTO @tb_m_time SELECT @F_Year,@F_Month,NULL,NULL,NULL,NULL,NULL,NULL
	RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetHoliday]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetHoliday]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetHoliday] (
	@F_StartDate date,
	@F_EndDate date
)
RETURNS @tb_Holiday TABLE(F_Day date) 
BEGIN
    DECLARE @WeekFlag int
    DECLARE @TempDate date	
    SET @TempDate = @F_StartDate
    
    WHILE DATEDIFF(D,@TempDate,@F_EndDate) >= 0
    BEGIN	
		SELECT @WeekFlag = datepart(weekday, @TempDate)

		IF EXISTS(SELECT F_Date FROM dbo.tb_D_WorkCalendar WHERE F_Date = @TempDate)
		BEGIN
			INSERT INTO @tb_Holiday SELECT F_Date FROM dbo.tb_D_WorkCalendar WHERE F_Date = @TempDate AND F_Status = ''0''
		END
		ELSE
		BEGIN
			IF @WeekFlag = 7 OR @WeekFlag = 1 INSERT INTO @tb_Holiday VALUES(@TempDate)
		END
		SET @TempDate = DATEADD(D,1,@TempDate)
	END
    RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetFunctionToTree]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetFunctionToTree]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetFunctionToTree] (
	@F_PluginCode bigint,
	@F_FunctionCode bigint
)
RETURNS varchar(256) 
BEGIN
	DECLARE @Tree varchar(128)
	SELECT
		@Tree = F_EntityTreeNo
	FROM
	(
		SELECT
			T1.F_PluginCode,
			T1.F_FunctionCode,
			F_EntityTreeNo = STUFF((SELECT '','' + CAST(T2.F_EntityTreeNo AS VARCHAR) FROM dbo.tb_A_PluginToTree T2 WHERE T1.F_FunctionCode = T2.F_FunctionCode AND T1.F_PluginCode = T2.F_PluginCode FOR xml path('''')),1,1,'''') 
		FROM dbo.tb_A_PluginToTree T1
		WHERE T1.F_FunctionCode = @F_FunctionCode
			AND T1.F_PluginCode = @F_PluginCode
		GROUP BY T1.F_PluginCode,T1.F_FunctionCode
	) T
	RETURN ISNULL(@Tree,'''')
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetTransitionStime2]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetTransitionStime2]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetTransitionStime2] (
	@F_EntityID varchar(32),
	@F_Date date
) RETURNS time(0) 
BEGIN
	DECLARE @TransitionTime time(0) 

	SELECT @TransitionTime = F_TransitionStime2 FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = @F_EntityID
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionStime2 FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = @F_EntityID
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionStime2 FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = ''''
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionStime2 FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = ''''

	RETURN @TransitionTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetTransitionStime1]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetTransitionStime1]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetTransitionStime1] (
	@F_EntityID varchar(32),
	@F_Date date
) RETURNS time(0) 
BEGIN
	DECLARE @TransitionTime time(0) 

	SELECT @TransitionTime = F_TransitionStime1 FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = @F_EntityID
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionStime1 FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = @F_EntityID
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionStime1 FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = ''''
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionStime1 FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = ''''

	RETURN @TransitionTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetTransitionEtime2]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetTransitionEtime2]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetTransitionEtime2] (
	@F_EntityID varchar(32),
	@F_Date date
) RETURNS time(0) 
BEGIN
	DECLARE @TransitionTime time(0) 

	SELECT @TransitionTime = F_TransitionEtime2 FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = @F_EntityID
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionEtime2 FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = @F_EntityID
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionEtime2 FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = ''''
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionEtime2 FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = ''''
	RETURN @TransitionTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetTransitionEtime1]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetTransitionEtime1]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetTransitionEtime1] (
	@F_EntityID varchar(32),
	@F_Date date
) RETURNS time(0) 
BEGIN
	DECLARE @TransitionTime time(0) 

	SELECT @TransitionTime = F_TransitionEtime1 FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = @F_EntityID
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionEtime1 FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = @F_EntityID
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionEtime1 FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@F_Date) AND F_Month = MONTH(@F_Date) AND F_EntityID = ''''
	IF @TransitionTime IS NULL SELECT @TransitionTime = F_TransitionEtime1 FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = ''''
	RETURN @TransitionTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetTimePointTable]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetTimePointTable]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetTimePointTable] (
	@F_StartDate date,
	@F_EndDate date
) RETURNS @tb_time TABLE(F_Timepoint datetime2(0)) 
BEGIN
	DECLARE @temp date

	INSERT INTO @tb_time VALUES (CAST(@F_StartDate AS VARCHAR) + '' 00:00:00'')
	SET @temp = @F_StartDate
	WHILE @temp <= @F_EndDate
	BEGIN
		IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = YEAR(@temp) AND F_Month = MONTH(@temp) AND F_EntityID IS NULL)
		BEGIN
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_TransitionStime1 AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = YEAR(@temp) AND F_Month = MONTH(@temp) AND F_EntityID IS NULL AND F_TransitionStime1 IS NOT NULL
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_TransitionEtime1 AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = YEAR(@temp) AND F_Month = MONTH(@temp) AND F_EntityID IS NULL AND F_TransitionEtime1 IS NOT NULL
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_WorkingStime AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = YEAR(@temp) AND F_Month = MONTH(@temp) AND F_EntityID IS NULL AND F_WorkingStime IS NOT NULL
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_WorkingEtime AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = YEAR(@temp) AND F_Month = MONTH(@temp) AND F_EntityID IS NULL AND F_WorkingEtime IS NOT NULL
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_TransitionStime2 AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = YEAR(@temp) AND F_Month = MONTH(@temp) AND F_EntityID IS NULL AND F_TransitionStime2 IS NOT NULL
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_TransitionEtime2 AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = YEAR(@temp) AND F_Month = MONTH(@temp) AND F_EntityID IS NULL AND F_TransitionEtime2 IS NOT NULL
		END
		ELSE
		BEGIN
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_TransitionStime1 AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID IS NULL AND F_TransitionStime1 IS NOT NULL
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_TransitionEtime1 AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID IS NULL AND F_TransitionEtime1 IS NOT NULL
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_WorkingStime AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID IS NULL AND F_WorkingStime IS NOT NULL
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_WorkingEtime AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID IS NULL AND F_WorkingEtime IS NOT NULL
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_TransitionStime2 AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID IS NULL AND F_TransitionStime2 IS NOT NULL
			INSERT INTO @tb_time 
			SELECT 
				CAST(@temp AS VARCHAR) + '' '' + CAST(F_TransitionEtime2 AS VARCHAR) 
			FROM dbo.tb_D_WorkingTime 
			WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID IS NULL AND F_TransitionEtime2 IS NOT NULL
		END
		SET @temp = DATEADD(d,1,@temp)
	END
	INSERT INTO @tb_time VALUES (CAST(@F_EndDate AS VARCHAR) + '' 23:00:00'')
	RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityMonthWorkTime]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityMonthWorkTime]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityMonthWorkTime] (
	@F_EntityID bigint,
	@F_Year int, 
	@F_StartMonth int, 
	@F_EndMonth int
) RETURNS @tb_m_time TABLE(year int,month int,work_start_time int,work_end_time int,tran_start_time1 int,tran_end_time1 int,tran_start_time2 int,tran_end_time2 int,data_src varchar(1)) 
BEGIN
	DECLARE @F_TempMonth int
	SET @F_TempMonth = @F_StartMonth
	WHILE @F_TempMonth <= @F_EndMonth
	BEGIN
		IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_TempMonth AND F_EntityID = @F_EntityID)
			INSERT INTO @tb_m_time SELECT @F_Year,@F_TempMonth,DATEPART(hh,F_WorkingStime),DATEPART(hh,F_WorkingEtime),DATEPART(hh,F_TransitionStime1),DATEPART(hh,F_TransitionEtime1),DATEPART(hh,F_TransitionStime2),DATEPART(hh,F_TransitionEtime2),''1'' FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_TempMonth AND F_EntityID = @F_EntityID
		ELSE IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = @F_EntityID)
			INSERT INTO @tb_m_time SELECT @F_Year,@F_TempMonth,DATEPART(hh,F_WorkingStime),DATEPART(hh,F_WorkingEtime),DATEPART(hh,F_TransitionStime1),DATEPART(hh,F_TransitionEtime1),DATEPART(hh,F_TransitionStime2),DATEPART(hh,F_TransitionEtime2),''1'' FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = @F_EntityID
		ELSE IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_TempMonth AND F_EntityID = '''')
			INSERT INTO @tb_m_time SELECT @F_Year,@F_TempMonth,DATEPART(hh,F_WorkingStime),DATEPART(hh,F_WorkingEtime),DATEPART(hh,F_TransitionStime1),DATEPART(hh,F_TransitionEtime1),DATEPART(hh,F_TransitionStime2),DATEPART(hh,F_TransitionEtime2),''2'' FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_TempMonth AND F_EntityID = ''''
		ELSE IF EXISTS(SELECT F_Month FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = '''')
			INSERT INTO @tb_m_time SELECT @F_Year,@F_TempMonth,DATEPART(hh,F_WorkingStime),DATEPART(hh,F_WorkingEtime),DATEPART(hh,F_TransitionStime1),DATEPART(hh,F_TransitionEtime1),DATEPART(hh,F_TransitionStime2),DATEPART(hh,F_TransitionEtime2),''2'' FROM dbo.tb_D_WorkingTime WHERE F_Year = 9999 AND F_Month = 99 AND F_EntityID = ''''
		ELSE INSERT INTO @tb_m_time SELECT @F_Year,@F_TempMonth,NULL,NULL,NULL,NULL,NULL,NULL,''0''
		
		SET @F_TempMonth = @F_TempMonth + 1
	END
	
	RETURN
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityTreeTypeByNo]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityTreeTypeByNo]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityTreeTypeByNo] (
	@F_EntityTreeNo int
) RETURNS char(1) 
BEGIN
	DECLARE @F_EntityTreeType char(1)
	SELECT @F_EntityTreeType = F_EntityTreeType FROM dbo.tb_B_EntityTreeType WHERE F_EntityTreeNo = @F_EntityTreeNo
	RETURN @F_EntityTreeType
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPluginToEntityRenamePId]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPluginToEntityRenamePId]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetPluginToEntityRenamePId] (
	@F_FunctionCode bigint,
	@F_PluginCode bigint,
	@F_EntityTreeNo int
)
RETURNS INT
BEGIN
	DECLARE @PId int
	IF EXISTS(SELECT F_EntityTreeRename FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo = @F_EntityTreeNo)
		SET @PId = @F_EntityTreeNo
	ELSE SET @PId = 0
	
	RETURN @PId
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetUserNameByCode]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetUserNameByCode]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetUserNameByCode] (
	@F_UserCode bigint
) RETURNS varchar(32) 
BEGIN
	DECLARE @F_UserName varchar(32)
	SELECT @F_UserName = F_UserName FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	RETURN @F_UserName
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetUserTypeEvent]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetUserTypeEvent]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetUserTypeEvent]
	@F_UserCode bigint,
	@F_TypeNo int,
	@F_BeginDate datetime2(0),
	@F_EndDate datetime2(0),
	@F_Status varchar(2)
AS
BEGIN
	IF @F_TypeNo = 1
	BEGIN
		IF @F_Status = ''''
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode,
				dbo.tb_B_EntityTreeModel C
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ObjectCode = C.F_EntityID
			ORDER BY A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				A.F_Detail,
				B.F_PushWay,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode AND B.F_ACKStatus = @F_Status,
				dbo.tb_B_EntityTreeModel C
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ObjectCode = C.F_EntityID
			ORDER BY A.F_DateTime DESC	
		END
	END
	ELSE IF @F_TypeNo = 2
	BEGIN
		IF @F_Status = ''''
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				A.F_ValueLabel,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode,
				dbo.tb_B_EntityTreeModel C
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ObjectCode = C.F_EntityID
			ORDER BY A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				A.F_ValueLabel,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode AND B.F_ACKStatus = @F_Status,
				dbo.tb_B_EntityTreeModel C
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ObjectCode = C.F_EntityID
			ORDER BY A.F_DateTime DESC	
		END
	END
	ELSE IF @F_TypeNo = 3
	BEGIN
		IF @F_Status = ''''
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				A.F_ValueLabel,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				A.F_ValueLabel,
				E.F_ProjectName,
				A.F_Detail,
				B.F_PushWay,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode AND B.F_ACKStatus = @F_Status,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC	
		END
	END
	ELSE IF @F_TypeNo = 4
	BEGIN
		IF @F_Status = ''''
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode AND B.F_ACKStatus = @F_Status,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC	
		END
	END
	ELSE IF @F_TypeNo = 5
	BEGIN
		IF @F_Status = ''''
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_ItemName AS F_ItemName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode,
				dbo.tb_A_EventItem C
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND C.F_TypeNo = @F_TypeNo
				AND A.F_ItemNo = C.F_ItemNo
			ORDER BY A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_ItemName AS F_ItemName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode AND B.F_ACKStatus = @F_Status,
				dbo.tb_A_EventItem C
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND C.F_TypeNo = @F_TypeNo
				AND A.F_ItemNo = C.F_ItemNo
			ORDER BY A.F_DateTime DESC	
		END
	END
	ELSE IF @F_TypeNo = 6
	BEGIN
		IF @F_Status = ''''
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode AND B.F_ACKStatus = @F_Status,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC	
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetUserProjectEvent]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetUserProjectEvent]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetUserProjectEvent]
	@F_UserCode bigint,
	@F_TypeNo int,
	@F_ProjectNo int,
	@F_BeginDate datetime2(0),
	@F_EndDate datetime2(0),
	@F_Status varchar(2)
AS
BEGIN
	IF @F_TypeNo = 3
	BEGIN
		IF @F_Status = ''''
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				A.F_ValueLabel,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ProjectNo = @F_ProjectNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				A.F_ValueLabel,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode AND B.F_ACKStatus = @F_Status,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_TypeNo = @F_TypeNo
				AND A.F_ProjectNo = @F_ProjectNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC
		END
	END
	ELSE IF @F_TypeNo = 4
	BEGIN
		IF @F_Status = ''''
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ProjectNo = @F_ProjectNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode AND B.F_ACKStatus = @F_Status,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ProjectNo = @F_ProjectNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC	
		END
	END
	ELSE IF @F_TypeNo = 6
	BEGIN
		IF @F_Status = ''''
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ProjectNo = @F_ProjectNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				A.F_EventCode,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				C.F_EntityName AS F_DeviceName,
				E.F_ProjectName,
				A.F_Detail,
				dbo.fun_GetUserNameByCode(@F_UserCode) AS F_ToUser,
				CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
				B.F_ACKStatus
			FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode AND B.F_ACKStatus = @F_Status,
				dbo.tb_B_EntityTreeModel C,
				dbo.tb_A_Project E
			WHERE A.F_DateTime BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_TypeNo = @F_TypeNo
				AND A.F_ProjectNo = @F_ProjectNo
				AND A.F_ObjectCode = C.F_EntityID
				AND A.F_ProjectNo = E.F_ProjectNo
			ORDER BY A.F_DateTime DESC	
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetEventList]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetEventList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetEventList]
	@F_TypeNo int,
	@F_DeviceType varchar(32),
	@F_BeginDate date,
	@F_EndDate date,
	@F_Rank varchar(1),
	@F_User varchar(32),
	@F_Status varchar(2)
AS
BEGIN
	IF @F_TypeNo = 1
	BEGIN
		IF @F_DeviceType = ''''
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
		ELSE
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
	END
	ELSE IF @F_TypeNo = 2
	BEGIN
		IF @F_DeviceType = ''''
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
		ELSE
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
	END
	ELSE IF @F_TypeNo = 3
	BEGIN
		IF @F_DeviceType = ''''
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
		ELSE
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							A.F_ValueLabel,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
	END
	ELSE IF @F_TypeNo = 4
	BEGIN
		IF @F_DeviceType = ''''
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
		ELSE
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
	END
	ELSE IF @F_TypeNo = 5
	BEGIN
		IF @F_DeviceType = ''''
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
		ELSE
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_ItemName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_A_EventItem C
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND C.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ItemNo = C.F_ItemNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
	END
	ELSE IF @F_TypeNo = 6
	BEGIN
		IF @F_DeviceType = ''''
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
		ELSE
		BEGIN
			IF @F_Rank = ''''
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
			ELSE
			BEGIN
				IF @F_Status = ''''
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
				ELSE
				BEGIN
					IF @F_User = ''''
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
					ELSE
					BEGIN
						SELECT 
							ROW_NUMBER()OVER(ORDER BY A.F_DateTime,A.F_EventCode DESC) AS F_RowNum,
							A.F_EventCode,
							CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
							C.F_EntityName,
							E.F_ProjectName,
							A.F_Detail,
							dbo.fun_GetUserNameByCode(B.F_PushUser) AS F_ToUser,
							CONVERT(varchar,B.F_PushDate,120) AS F_PushDate,
							B.F_ACKStatus,
							CONVERT(varchar,B.F_ACKDate,120) AS F_ACKDate
						FROM dbo.tb_A_Event A LEFT OUTER JOIN dbo.tb_A_EventToUser B ON B.F_PushUser = @F_User AND A.F_EventCode = B.F_EventCode,
							dbo.tb_B_EntityTreeModel C,
							dbo.tb_A_Project E
						WHERE CAST(A.F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
							AND A.F_TypeNo = @F_TypeNo
							AND A.F_Rank = @F_Rank
							AND B.F_ACKStatus = @F_Status
							AND dbo.fun_GetNodeDeviceType(A.F_ObjectCode) = @F_DeviceType
							AND A.F_ObjectCode = C.F_EntityID
							AND A.F_ProjectNo = E.F_ProjectNo
						ORDER BY A.F_DateTime,A.F_EventCode DESC
					END
				END
			END
		END
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetUserGuideProject]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetUserGuideProject]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetUserGuideProject] (
	@F_UserCode bigint
) RETURNS varchar(128)
BEGIN
	DECLARE @F_UserType char(1)
	DECLARE @F_Project varchar(128)
	
	SELECT @F_UserType = F_UserType FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	IF @F_UserType = ''1'' OR @F_UserType = ''2'' SET @F_Project = NULL
	ELSE SELECT @F_Project = CAST(B.F_Project AS VARCHAR) + ''@'' + C.F_ProjectTag FROM dbo.tb_A_LoginUser A,tb_A_Role B,dbo.tb_A_Project C WHERE A.F_UserCode = @F_UserCode AND A.F_RoleCode = B.F_RoleCode AND B.F_Project = C.F_ProjectNo
	
	RETURN @F_Project
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetWorkingday]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetWorkingday]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetWorkingday] (
	@F_StartDate date,
	@F_EndDate date
)
RETURNS @tb_workingday TABLE(F_Day date) 
BEGIN
    DECLARE @WeekFlag int
    DECLARE @TempDate date	
    SET @TempDate = @F_StartDate
    
    WHILE DATEDIFF(D,@TempDate,@F_EndDate) >= 0
    BEGIN	
		SELECT @WeekFlag = datepart(weekday, @TempDate)

		IF EXISTS(SELECT F_Date FROM dbo.tb_D_WorkCalendar WHERE F_Date = @TempDate)
		BEGIN
			INSERT INTO @tb_workingday SELECT F_Date FROM dbo.tb_D_WorkCalendar WHERE F_Date = @TempDate AND F_Status = ''1''
		END
		ELSE
		BEGIN
			IF @WeekFlag BETWEEN 2 AND 6  INSERT INTO @tb_workingday VALUES(@TempDate)
		END
		SET @TempDate = DATEADD(D,1,@TempDate)
	END
    RETURN
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntityDayAvgData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntityDayAvgData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntityDayAvgData] 
	@F_EntityID bigint,				-- 对象编号
	@F_EnergyType bigint,			-- 能源类型
	@F_ValueLabel varchar(32),		-- 累计参数
	@F_Year int						-- 指定年份yyyy
AS
BEGIN
	SELECT
		@F_EntityID AS F_EntityID,
		dbo.fun_GetEntityPathName(@F_EntityID) AS F_EntityName,
		A.F_Year,
		A.F_Month,
		A.F_EnergyData AS F_DayAvgData,
		B.F_EnergyData AS F_WorkingAvgData,
		C.F_EnergyData AS F_UnWorkingAvgData
	FROM
	(
		SELECT
			A.F_Year,
			A.F_Month,
			AVG(B.F_EnergyData) AS F_EnergyData
		FROM
		(
			SELECT F_Year,F_Month FROM dbo.fun_GetSplityMDate(CAST(@F_Year AS VARCHAR) + ''-01'',CAST(@F_Year AS VARCHAR) + ''-12'')
		) A 
		LEFT OUTER JOIN tb_C_EntityDayData B
			ON B.F_EntityID = @F_EntityID
			AND B.F_EnergyTypeID = @F_EnergyType
			AND B.F_ValueLabel = @F_ValueLabel
			AND B.F_DataGranularity = ''''
			AND YEAR(B.F_ReadingDate) = A.F_Year
			AND MONTH(B.F_ReadingDate) = A.F_Month
		GROUP BY A.F_Year,A.F_Month
	) A,
	(
		SELECT
			A.F_Year,
			A.F_Month,
			AVG(B.F_EnergyData) AS F_EnergyData
		FROM
		(
			SELECT F_Year,F_Month FROM dbo.fun_GetSplityMDate(CAST(@F_Year AS VARCHAR) + ''-01'',CAST(@F_Year AS VARCHAR) + ''-12'')
		) A 
		LEFT OUTER JOIN tb_C_EntityDayData B
			ON B.F_EntityID = @F_EntityID
			AND B.F_EnergyTypeID = @F_EnergyType
			AND B.F_ValueLabel = @F_ValueLabel
			AND B.F_DataGranularity = ''''
			AND B.F_ReadingDate IN (SELECT F_Day FROM dbo.fun_GetWorkingday(CAST(@F_Year AS VARCHAR) + ''-01-01'',CAST(@F_Year AS VARCHAR) + ''-12-31''))
			AND YEAR(B.F_ReadingDate) = A.F_Year
			AND MONTH(B.F_ReadingDate) = A.F_Month
		GROUP BY A.F_Year,A.F_Month
	) B,
	(
		SELECT
			@F_EntityID AS F_EntityID,
			A.F_Year,
			A.F_Month,
			AVG(B.F_EnergyData) AS F_EnergyData
		FROM
		(
			SELECT F_Year,F_Month FROM dbo.fun_GetSplityMDate(CAST(@F_Year AS VARCHAR) + ''-01'',CAST(@F_Year AS VARCHAR) + ''-12'')
		) A 
		LEFT OUTER JOIN tb_C_EntityDayData B
			ON B.F_EntityID = @F_EntityID
			AND B.F_EnergyTypeID = @F_EnergyType
			AND B.F_ValueLabel = @F_ValueLabel
			AND B.F_DataGranularity = ''''
			AND B.F_ReadingDate NOT IN (SELECT F_Day FROM dbo.fun_GetWorkingday(CAST(@F_Year AS VARCHAR) + ''-01-01'',CAST(@F_Year AS VARCHAR) + ''-12-31''))
			AND YEAR(B.F_ReadingDate) = A.F_Year
			AND MONTH(B.F_ReadingDate) = A.F_Month
		GROUP BY A.F_Year,A.F_Month
	) C
	WHERE A.F_Year = B.F_Year
		AND A.F_Month = B.F_Month
		AND B.F_Year = C.F_Year
		AND B.F_Month = C.F_Month
	ORDER BY A.F_Year,A.F_Month		
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetValleyStartTime]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetValleyStartTime]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetValleyStartTime] (
) RETURNS time(0) 
BEGIN
	DECLARE @StartTime time(0) 

	SELECT @StartTime = F_ValleyStime FROM dbo.tb_D_PVLTimePrice

	RETURN @StartTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetValleyEndTime]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetValleyEndTime]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetValleyEndTime] (
) RETURNS time(0) 
BEGIN
	DECLARE @EndTime time(0) 

	SELECT @EndTime = F_ValleyEtime FROM dbo.tb_D_PVLTimePrice

	RETURN @EndTime
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyValleyCost]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyValleyCost]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyValleyCost] (
	@F_EnergyTypeID bigint,
	@F_EnergyData numeric(18,4)
) RETURNS money
BEGIN
	DECLARE @Price money
	SELECT @Price = F_ValleyPrice FROM dbo.tb_D_PVLTimePrice WHERE F_EnergyTypeID = @F_EnergyTypeID

	RETURN ISNULL(@Price * @F_EnergyData,0)
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyPeakCost]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyPeakCost]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyPeakCost] (
	@F_EnergyTypeID bigint,
	@F_EnergyData numeric(18,4)
) RETURNS money
BEGIN
	DECLARE @Price money
	SELECT @Price = F_PeakPrice FROM dbo.tb_D_PVLTimePrice WHERE F_EnergyTypeID = @F_EnergyTypeID

	RETURN ISNULL(@Price * @F_EnergyData,0)
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyLevelCost]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyLevelCost]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyLevelCost] (
	@F_EnergyTypeID bigint,
	@F_EnergyData numeric(18,4)
) RETURNS money
BEGIN
	DECLARE @Price money
	SELECT @Price = F_LevelPrice FROM dbo.tb_D_PVLTimePrice WHERE F_EnergyTypeID = @F_EnergyTypeID

	RETURN ISNULL(@Price * @F_EnergyData,0)
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetChildDocumentNum]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetChildDocumentNum]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetChildDocumentNum] (
	@F_DocumentCode bigint,
	@F_DocumentType varchar(16)
) RETURNS int
BEGIN
	DECLARE @Num int
	SET @Num = 0
	SELECT @Num = COUNT(F_DocumentCode) FROM dbo.tb_A_DocumentInfo WHERE F_ParentCode = @F_DocumentCode AND F_DocumentType = @F_DocumentType
	RETURN @Num
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetAppConfigStatus]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetAppConfigStatus]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetAppConfigStatus](
	@F_AppCode bigint
) 
RETURNS int
BEGIN
	DECLARE @Status int
	
	IF NOT EXISTS(SELECT F_TemplateCode FROM dbo.tb_A_Template WHERE F_AppCode = @F_AppCode)
		SET @Status = -1
	ELSE IF NOT EXISTS(SELECT F_TemplateCode FROM dbo.tb_A_Template WHERE F_AppCode = @F_AppCode AND F_EnergyTypeID IS NULL AND F_DeviceTypeID IS NULL)
		SET @Status = 1
	ELSE SET @Status = 0
	RETURN @Status
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetNetNodeTree]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetNetNodeTree]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetNetNodeTree] 
AS
BEGIN
	SELECT 
		CAST(F_RouterCode AS VARCHAR) AS id, 
		F_RouterName AS name, 
		''0'' AS pId,
		''router'' AS type,
		'''' AS tpl_type,
		null AS is_cnf
	FROM dbo.tb_A_IoTRouter 
	UNION
	SELECT
		A.F_AppCode AS id,
		A.F_AppName AS name,
		CAST(A.F_RouterCode AS VARCHAR) AS pId,
		''app'' AS type,
		'''' AS tpl_type,
		dbo.fun_GetAppConfigStatus(A.F_AppCode) AS is_cnf
	FROM dbo.tb_A_IoTApp A
	UNION 
	SELECT 
		CAST(F_TemplateCode AS VARCHAR) AS id, 
		F_TemplateName AS name, 
		F_AppCode AS pId,
		''tpl'' AS type,
		'''' AS tpl_type,
		null AS is_cnf
	FROM dbo.tb_A_Template
	WHERE F_AppCode IS NOT NULL
	UNION
	SELECT 
		CAST(A.F_NodeCode AS VARCHAR) AS id, 
		A.F_NodeName AS name, 
		B.F_TemplateCode AS pId,
		''node'' AS type,
		B.F_TemplateType AS tpl_type,
		null AS is_cnf
	FROM dbo.tb_A_IoTNode A,dbo.tb_A_Template B
	WHERE A.F_TemplateCode = B.F_TemplateCode
	ORDER BY pId,name
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetAlarmTypeSum]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetAlarmTypeSum]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetAlarmTypeSum] (
	@F_TypeNo int,
	@F_UserCode bigint,
	@F_ACKStatus bit
) RETURNS int 
BEGIN
	DECLARE @F_TotalCount int
	IF @F_UserCode IS NULL
	BEGIN
		IF @F_ACKStatus IS NULL SELECT @F_TotalCount = COUNT(F_EventCode) FROM dbo.tb_A_Event WHERE F_TypeNo = @F_TypeNo
		ELSE SELECT @F_TotalCount = COUNT(B.F_EventCode) FROM dbo.tb_A_Event A,dbo.tb_A_EventToUser B WHERE A.F_TypeNo = @F_TypeNo AND A.F_EventCode = B.F_EventCode AND B.F_ACKStatus = @F_ACKStatus
	END
	ELSE
	BEGIN
		IF @F_ACKStatus IS NULL SELECT @F_TotalCount = COUNT(A.F_EventCode) FROM dbo.tb_A_Event A,dbo.tb_A_EventToUser B WHERE A.F_TypeNo = @F_TypeNo AND A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode
		ELSE SELECT @F_TotalCount = COUNT(B.F_EventCode) FROM dbo.tb_A_Event A,dbo.tb_A_EventToUser B WHERE A.F_TypeNo = @F_TypeNo AND A.F_EventCode = B.F_EventCode AND B.F_ACKStatus = @F_ACKStatus AND B.F_PushUser = @F_UserCode
	END
	RETURN @F_TotalCount
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetAlarmProjectSum]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetAlarmProjectSum]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetAlarmProjectSum] (
	@F_TypeNo int,
	@F_ProjectNo int,
	@F_UserCode bigint,
	@F_ACKStatus bit
) RETURNS int 
BEGIN
	DECLARE @F_TotalCount int
	IF @F_UserCode IS NULL
	BEGIN
		IF @F_ACKStatus IS NULL SELECT @F_TotalCount = COUNT(F_EventCode) FROM dbo.tb_A_Event WHERE F_TypeNo = @F_TypeNo AND F_ProjectNo = @F_ProjectNo
		ELSE SELECT @F_TotalCount = COUNT(B.F_EventCode) FROM dbo.tb_A_Event A,dbo.tb_A_EventToUser B WHERE A.F_TypeNo = @F_TypeNo AND A.F_ProjectNo = @F_ProjectNo AND A.F_EventCode = B.F_EventCode AND B.F_ACKStatus = @F_ACKStatus
	END
	ELSE
	BEGIN
		IF @F_ACKStatus IS NULL SELECT @F_TotalCount = COUNT(B.F_EventCode) FROM dbo.tb_A_Event A,dbo.tb_A_EventToUser B WHERE A.F_ProjectNo = @F_ProjectNo AND A.F_EventCode = B.F_EventCode AND B.F_PushUser = @F_UserCode
		ELSE SELECT @F_TotalCount = COUNT(B.F_EventCode) FROM dbo.tb_A_Event A,dbo.tb_A_EventToUser B WHERE A.F_ProjectNo = @F_ProjectNo AND A.F_EventCode = B.F_EventCode AND B.F_ACKStatus = @F_ACKStatus AND B.F_PushUser = @F_UserCode
	END
	RETURN @F_TotalCount
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeDaySumData]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeDaySumData]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeDaySumData] (
	@F_NodeCode bigint,
	@F_ValueTag varchar(32),
	@F_StartDate date,
	@F_EndDate date
) RETURNS numeric(18,4)
BEGIN
	DECLARE @F_SumData numeric(18,4)
	SELECT @F_SumData = SUM(F_EnergyData)
	FROM dbo.tb_C_NodeDayData
	WHERE F_NodeCode = @F_NodeCode
		AND F_ValueLabel = @F_ValueTag
		AND F_ReadingDate BETWEEN @F_StartDate AND @F_EndDate
	RETURN @F_SumData
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetMyApps]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetMyApps]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetMyApps]
	@F_UserCode bigint
AS
BEGIN
	SELECT
		1 AS F_AppType,
		A.F_ProjectNo,
		A.F_ProjectName,
		A.F_ProjectAbbr,
		A.F_ProjectTag,
		A.F_ProjectType,
		A.F_ProjectColor,
		A.F_ProjectDes,
		NULL AS F_AgentURL,
		NULL AS F_PublicKey,
		B.F_AppSize,
		B.F_Date
	FROM dbo.tb_A_Project A,dbo.tb_A_MyApp B
	WHERE B.F_UserCode = @F_UserCode
		AND B.F_AppCode = A.F_ProjectNo
	UNION
	SELECT
		2 AS F_AppType,
		A.F_AgentCode AS F_ProjectNo,
		A.F_AgentName AS F_ProjectName,
		A.F_AgentAbbr AS F_ProjectAbbr,
		A.F_ProjectTag,
		A.F_ProjectType,
		A.F_ProjectColor,
		A.F_ProjectDes,
		A.F_AgentURL,
		A.F_PublicKey,
		B.F_AppSize,
		B.F_Date
	FROM dbo.tb_A_Agent A,dbo.tb_A_MyApp B
	WHERE B.F_UserCode = @F_UserCode
		AND B.F_AppCode = A.F_AgentCode
	ORDER BY B.F_Date
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_CustomToTree]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_CustomToTree]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_CustomToTree]
	@F_FunctionCode bigint,
	@F_PluginCode bigint,
	@F_TreeStr varchar(max)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	
	DELETE FROM dbo.tb_A_PluginToEntity WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode
	INSERT INTO dbo.tb_A_PluginToEntity 
	SELECT 
		@F_FunctionCode,
		@F_PluginCode,
		B.F_EntityTreeNo,
		A.F_ObjectID
	FROM dbo.fun_SplitByComma(@F_TreeStr) A,dbo.tb_A_PluginToTree B
	WHERE B.F_FunctionCode = @F_FunctionCode AND B.F_PluginCode = @F_PluginCode

END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_IsWorkingday]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_IsWorkingday]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_IsWorkingday] (
	@F_DayDate date
) RETURNS bit
BEGIN
	DECLARE @F_Result bit
    DECLARE @WeekFlag int
	SELECT @WeekFlag = datepart(weekday, @F_DayDate)

	IF EXISTS(SELECT F_Date FROM dbo.tb_D_WorkCalendar WHERE F_Date = @F_DayDate AND F_Status = ''1'') SET @F_Result = 1
	ELSE IF NOT EXISTS(SELECT F_Date FROM dbo.tb_D_WorkCalendar WHERE F_Date = @F_DayDate AND F_Status = ''0'') AND @WeekFlag BETWEEN 2 AND 6  SET @F_Result = 1
	ELSE SET @F_Result = 0
	RETURN @F_Result
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_C_SynchroEntityData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_C_SynchroEntityData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_C_SynchroEntityData] 
AS
BEGIN
	DECLARE @cur_entity cursor
	DECLARE @cur_node cursor
	DECLARE @F_EntityID bigint
	DECLARE @F_NodeCode bigint
	DECLARE @F_ValueLabel varchar(32)
	DECLARE @F_ReadingDate date
	DECLARE @F_ReadingHour datetime2(0)
	DECLARE @F_ReadingYear smallint
	DECLARE @F_ReadingMonth smallint
	DECLARE @F_EnergyData numeric(18,4)
	DECLARE @F_EnergyCost numeric(18,4)
	DECLARE @F_WorkingData numeric(18,4)
	DECLARE @F_UnWorkingData numeric(18,4)
	DECLARE @F_FlexibleData numeric(18,4)
	DECLARE @F_PeakData numeric(18,4)
	DECLARE @F_ValleyData numeric(18,4)
	DECLARE @F_LevelData numeric(18,4)
	DECLARE @F_PeakCost money
	DECLARE @F_ValleyCost money
	DECLARE @F_LevelCost money
	DECLARE @F_DataGranularity varchar(32)
	DECLARE @F_GranularityValue varchar(32)
	DECLARE @F_StartDate date
	DECLARE @F_EndDate date
	DECLARE @F_EnergyTypeID bigint
	DECLARE @F_Rate numeric(18,2)
	DECLARE @SqlText nvarchar(max)
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT 
		A.F_EntityID,
		A.F_EnergyTypeID,
		A.F_ValueLabel,
		A.F_DataGranularity,
		A.F_GranularityValue,
		B.F_ReadingDate,
		SUM(A.F_EnergyData),
		SUM(CASE WHEN dbo.fun_IsWorkingday(A.F_ReadingDate) = 1 THEN CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetWorkingStartTime(A.F_EntityID,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetWorkingEndTime(A.F_EntityID,A.F_ReadingDate) THEN A.F_EnergyData ELSE 0 END ELSE 0 END) AS F_WorkingData,
		SUM(CASE WHEN dbo.fun_IsWorkingday(A.F_ReadingDate) = 1 THEN CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetTransitionStime1(A.F_EntityID,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetTransitionEtime1(A.F_EntityID,A.F_ReadingDate) THEN A.F_EnergyData WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetTransitionStime2(A.F_EntityID,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetTransitionEtime2(A.F_EntityID,A.F_ReadingDate) THEN A.F_EnergyData ELSE 0 END ELSE 0 END) AS F_FlexibleData,
		SUM(CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetPeakStartTime1() AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetPeakEndTime1() THEN A.F_EnergyData WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetPeakStartTime2() AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetPeakEndTime2() THEN A.F_EnergyData ELSE 0 END) AS F_PeakData,
		SUM(CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetValleyStartTime() THEN A.F_EnergyData WHEN CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetValleyEndTime() THEN A.F_EnergyData ELSE 0 END) AS F_ValleyData
	FROM tb_C_EntityHourData A,
		(SELECT DISTINCT F_EntityID,F_EnergyTypeID,F_ValueLabel,F_DataGranularity,F_GranularityValue,CAST(F_ReadingDate AS DATE) AS F_ReadingDate FROM dbo.tb_C_EntityHourData WHERE F_SynEdStatus = 0) B
	WHERE A.F_EntityID = B.F_EntityID
		AND A.F_EnergyTypeID = B.F_EnergyTypeID
		AND A.F_ValueLabel = B.F_ValueLabel
		AND A.F_DataGranularity = B.F_DataGranularity
		AND A.F_GranularityValue = B.F_GranularityValue
		AND CAST(A.F_ReadingDate AS DATE) = B.F_ReadingDate
	GROUP BY A.F_EntityID,A.F_EnergyTypeID,A.F_ValueLabel,A.F_DataGranularity,A.F_GranularityValue,B.F_ReadingDate
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingDate,@F_EnergyData,@F_WorkingData,@F_FlexibleData,@F_PeakData,@F_ValleyData
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @F_UnWorkingData = @F_EnergyData - @F_WorkingData - @F_FlexibleData
		SET @F_LevelData = @F_EnergyData - ISNULL(@F_PeakData,0) - ISNULL(@F_ValleyData,0)
		IF EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntityDayData WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND F_ReadingDate = @F_ReadingDate)
		BEGIN
			UPDATE dbo.tb_C_EntityDayData 
			SET F_EnergyData = @F_EnergyData,
				F_WorkingData = @F_WorkingData,
				F_UnWorkingData = @F_UnWorkingData,
				F_FlexibleData = @F_FlexibleData,
				F_PeakData = @F_PeakData,
				F_ValleyData = @F_ValleyData,
				F_LevelData = @F_LevelData,
				F_PeakCost = dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData),
				F_ValleyCost = dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData),
				F_LevelCost = dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData),
				F_EnergyCost = CASE WHEN dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData) + dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData) + dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData) > 0 THEN dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData) + dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData) + dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData) ELSE CASE WHEN @F_DataGranularity = '''' THEN dbo.fun_GetEnergyCost(@F_EnergyTypeID,@F_EnergyData,YEAR(@F_ReadingDate),MONTH(@F_ReadingDate)) ELSE dbo.fun_GetEnergyItemCost(@F_EnergyTypeID,@F_DataGranularity,@F_GranularityValue,@F_EnergyData,YEAR(@F_ReadingDate),MONTH(@F_ReadingDate)) END END,
				F_SynEmStatus = 0
			WHERE F_EntityID = @F_EntityID 
				AND F_EnergyTypeID = @F_EnergyTypeID 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_DataGranularity = @F_DataGranularity 
				AND F_GranularityValue = @F_GranularityValue 
				AND F_ReadingDate = @F_ReadingDate
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_EntityDayData
			(
				F_EntityID,
				F_EnergyTypeID,
				F_ValueLabel,
				F_DataGranularity,
				F_GranularityValue,
				F_ReadingDate,
				F_EnergyData,
				F_WorkingData,
				F_UnWorkingData,
				F_FlexibleData,
				F_PeakData,
				F_ValleyData,
				F_LevelData,
				F_PeakCost,
				F_ValleyCost,
				F_LevelCost,
				F_EnergyCost,
				F_SynEmStatus
			)
			VALUES
			(
				@F_EntityID,
				@F_EnergyTypeID,
				@F_ValueLabel,
				@F_DataGranularity,
				@F_GranularityValue,
				@F_ReadingDate,
				@F_EnergyData,
				@F_WorkingData,
				@F_UnWorkingData,
				@F_FlexibleData,
				@F_PeakData,
				@F_ValleyData,
				@F_LevelData,
				dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData),
				dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData),
				dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData),
				CASE WHEN dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData) + dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData) + dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData) > 0 THEN dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData) + dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData) + dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData) ELSE CASE WHEN @F_DataGranularity = '''' THEN dbo.fun_GetEnergyCost(@F_EnergyTypeID,@F_EnergyData,YEAR(@F_ReadingDate),MONTH(@F_ReadingDate)) ELSE dbo.fun_GetEnergyItemCost(@F_EnergyTypeID,@F_DataGranularity,@F_GranularityValue,@F_EnergyData,YEAR(@F_ReadingDate),MONTH(@F_ReadingDate)) END END,
				0
			)
		END
		UPDATE dbo.tb_C_EntityHourData SET F_SynEdStatus = 1 WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND CAST(F_ReadingDate AS DATE) = @F_ReadingDate AND F_SynEdStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingDate,@F_EnergyData,@F_WorkingData,@F_FlexibleData,@F_PeakData,@F_ValleyData
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT 
		A.F_EntityID,
		A.F_EnergyTypeID,
		A.F_ValueLabel,
		A.F_DataGranularity,
		A.F_GranularityValue,
		B.F_ReadingYear,
		B.F_ReadingMonth,
		SUM(F_EnergyData),
		SUM(F_EnergyCost),
		SUM(F_WorkingData),
		SUM(F_UnWorkingData),
		SUM(F_FlexibleData),
		SUM(F_PeakData),
		SUM(F_ValleyData),
		SUM(F_LevelData),
		SUM(F_PeakCost),
		SUM(F_ValleyCost),
		SUM(F_LevelCost)
	FROM tb_C_EntityDayData A,
		(SELECT DISTINCT F_EntityID,F_EnergyTypeID,F_ValueLabel,F_DataGranularity,F_GranularityValue,YEAR(F_ReadingDate) AS F_ReadingYear,MONTH(F_ReadingDate) AS F_ReadingMonth FROM dbo.tb_C_EntityDayData WHERE F_SynEmStatus = 0) B
	WHERE A.F_EntityID = B.F_EntityID
		AND A.F_EnergyTypeID = B.F_EnergyTypeID 
		AND A.F_ValueLabel = B.F_ValueLabel 
		AND A.F_DataGranularity = B.F_DataGranularity 
		AND A.F_GranularityValue = B.F_GranularityValue 
		AND YEAR(A.F_ReadingDate) = B.F_ReadingYear 
		AND MONTH(A.F_ReadingDate) = B.F_ReadingMonth
	GROUP BY A.F_EntityID,A.F_EnergyTypeID,A.F_ValueLabel,A.F_DataGranularity,A.F_GranularityValue,B.F_ReadingYear,B.F_ReadingMonth
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingYear,@F_ReadingMonth,@F_EnergyData,@F_EnergyCost,@F_WorkingData,@F_UnWorkingData,@F_FlexibleData,@F_PeakData,@F_ValleyData,@F_LevelData,@F_PeakCost,@F_ValleyCost,@F_LevelCost
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntityMonthData WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND F_ReadingYear = @F_ReadingYear AND F_ReadingMonth = @F_ReadingMonth)
		BEGIN
			UPDATE dbo.tb_C_EntityMonthData 
			SET F_EnergyData = @F_EnergyData,
				F_WorkingData = @F_WorkingData,
				F_UnWorkingData = @F_UnWorkingData,
				F_FlexibleData = @F_FlexibleData,
				F_PeakData = @F_PeakData,
				F_ValleyData = @F_ValleyData,
				F_LevelData = @F_LevelData,
				F_PeakCost = @F_PeakCost,
				F_ValleyCost = @F_ValleyCost,
				F_LevelCost = @F_LevelCost,
				F_EnergyCost = @F_EnergyCost,
				F_DJtceData = dbo.fun_GetEnergyDJStandardCoal(@F_EnergyTypeID,@F_EnergyData),
				F_DLtceData = dbo.fun_GetEnergyDLStandardCoal(@F_EnergyTypeID,@F_EnergyData)
			WHERE F_EntityID = @F_EntityID 
				AND F_EnergyTypeID = @F_EnergyTypeID 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_DataGranularity = @F_DataGranularity 
				AND F_GranularityValue = @F_GranularityValue 
				AND F_ReadingYear = @F_ReadingYear 
				AND F_ReadingMonth = @F_ReadingMonth
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_EntityMonthData
			(
				F_EntityID,
				F_EnergyTypeID,
				F_ValueLabel,
				F_DataGranularity,
				F_GranularityValue,
				F_ReadingYear,
				F_ReadingMonth,
				F_EnergyData,
				F_WorkingData,
				F_UnWorkingData,
				F_FlexibleData,
				F_PeakData,
				F_ValleyData,
				F_LevelData,
				F_PeakCost,
				F_ValleyCost,
				F_LevelCost,
				F_EnergyCost,
				F_DJtceData,
				F_DLtceData,
				F_DataSource
			)
			VALUES
			(
				@F_EntityID,
				@F_EnergyTypeID,
				@F_ValueLabel,
				@F_DataGranularity,
				@F_GranularityValue,
				@F_ReadingYear,
				@F_ReadingMonth,
				@F_EnergyData,
				@F_WorkingData,
				@F_UnWorkingData,
				@F_FlexibleData,
				@F_PeakData,
				@F_ValleyData,
				@F_LevelData,
				@F_PeakCost,
				@F_ValleyCost,
				@F_LevelCost,
				@F_EnergyCost,
				dbo.fun_GetEnergyDJStandardCoal(@F_EnergyTypeID,@F_EnergyData),
				dbo.fun_GetEnergyDLStandardCoal(@F_EnergyTypeID,@F_EnergyData),
				''1''
			)
		END
		UPDATE dbo.tb_C_EntityDayData SET F_SynEmStatus = 1 WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND YEAR(F_ReadingDate) = @F_ReadingYear AND MONTH(F_ReadingDate) = @F_ReadingMonth AND F_SynEmStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingYear,@F_ReadingMonth,@F_EnergyData,@F_EnergyCost,@F_WorkingData,@F_UnWorkingData,@F_FlexibleData,@F_PeakData,@F_ValleyData,@F_LevelData,@F_PeakCost,@F_ValleyCost,@F_LevelCost
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_IsOnlyAdminUser]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_IsOnlyAdminUser]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_IsOnlyAdminUser] (

) RETURNS bit
BEGIN
	DECLARE @F_Result bit
	IF EXISTS(SELECT F_UserCode FROM tb_A_LoginUser WHERE F_UserType <> ''1'')
		SET @F_Result = 0
	ELSE SET @F_Result = 1
	RETURN @F_Result
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_WriteEventToUser]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_WriteEventToUser]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_WriteEventToUser]
	@F_EventCode bigint,
	@F_PushUser bigint,
	@F_PushWay varchar(2)
AS
BEGIN	
	INSERT INTO dbo.tb_A_EventToUser
	(
		F_EventCode,
		F_PushUser,
		F_PushWay,
		F_PushDate,
		F_ACKStatus
	)
	VALUES
	(
		@F_EventCode,
		@F_PushUser,
		@F_PushWay,
		GETDATE(),
		0
	)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_WriteEventLog]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_WriteEventLog]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_WriteEventLog]
	@F_TypeNo int,
	@F_UserID varchar(16),
	@F_IP varchar(32),
	@F_LogDetail varchar(512)
AS
BEGIN
	INSERT INTO dbo.tb_A_Log
	(
		F_TypeNo,
		F_DateTime,
		F_UserID,
		F_IP,
		F_LogDetail
	)
	VALUES
	(
		@F_TypeNo,
		GETDATE(),
		@F_UserID,
		@F_IP,
		@F_LogDetail
	)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_ExEntitySplitTimeOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_ExEntitySplitTimeOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_ExEntitySplitTimeOperate]
	@F_EntityStr varchar(max),
	@F_StartDate varchar(7), 
	@F_EndDate varchar(7),
	@F_WStartTime varchar(32),
	@F_WEndTime varchar(32),
	@F_TStartTime1 varchar(32),
	@F_TEndTime1 varchar(32),
	@F_TStartTime2 varchar(32),
	@F_TEndTime2 varchar(32),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @cur_entity cursor
	DECLARE @F_EntityID bigint
	DECLARE @F_Year int
	DECLARE @F_Month int
	DECLARE @F_Log varchar(512)

	SET @cur_entity = CURSOR forward_only static FOR SELECT A.F_ObjectID,B.F_Year,B.F_Month FROM dbo.fun_SplitByComma(@F_EntityStr) A,dbo.fun_GetSplityMDate(@F_StartDate,@F_EndDate) B
	OPEN @cur_entity
	FETCH NEXT FROM @cur_entity INTO @F_EntityID,@F_Year,@F_Month
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DELETE FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_Month AND F_EntityID = @F_EntityID
		INSERT INTO dbo.tb_D_WorkingTime VALUES(@F_Year,@F_Month,@F_EntityID,@F_TStartTime1,@F_TEndTime1,@F_WStartTime,@F_WEndTime,@F_TStartTime2,@F_TEndTime2)
		
		SELECT @F_Log = @F_UserID + ''设置对象（'' + dbo.fun_GetEntityPathName(@F_EntityID) + ''）'' + CASE @F_Year WHEN 9999 THEN ''所有月份'' ELSE CAST(@F_Year AS VARCHAR) + ''年'' + CAST(@F_Month AS VARCHAR) + ''月'' END + ''的工作时间为'' + @F_WStartTime + ''～'' + @F_WEndTime FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_EntityID
		IF @F_TStartTime1 <> '''' SET @F_Log = @F_Log + ''，过渡工作时间为'' + @F_TStartTime1 + ''～'' + @F_TEndTime1
		IF @F_TStartTime2 <> '''' SET @F_Log = @F_Log + ''，过渡工作时间为'' + @F_TStartTime2 + ''～'' + @F_TEndTime2
		EXEC dbo.proc_A_WriteEventLog 10,@F_UserID,@F_IP,@F_Log
		
		FETCH NEXT FROM @cur_entity INTO @F_EntityID,@F_Year,@F_Month
	END
	CLOSE @cur_entity
	DEALLOCATE @cur_entity
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_EntitySplitTimeOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_EntitySplitTimeOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_EntitySplitTimeOperate]
	@F_EntityID bigint,
	@F_Year int,
	@F_StartMonth int,
	@F_EndMonth int,
	@F_WStartTime varchar(32),
	@F_WEndTime varchar(32),
	@F_TStartTime1 varchar(32),
	@F_TEndTime1 varchar(32),
	@F_TStartTime2 varchar(32),
	@F_TEndTime2 varchar(32),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DECLARE @F_TempMonth int
	SET @F_TempMonth = @F_StartMonth
	WHILE @F_TempMonth <= @F_EndMonth
	BEGIN
		IF @F_Year = 9999 DELETE FROM dbo.tb_D_WorkingTime WHERE F_Year <> 9999 AND F_Month <> 99 AND F_EntityID = @F_EntityID
		DELETE FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_TempMonth AND F_EntityID = @F_EntityID
		INSERT INTO dbo.tb_D_WorkingTime VALUES(@F_Year,@F_TempMonth,@F_EntityID,@F_TStartTime1,@F_TEndTime1,@F_WStartTime,@F_WEndTime,@F_TStartTime2,@F_TEndTime2)
		
		SELECT @F_Log = @F_UserID + ''设置对象（'' + dbo.fun_GetEntityPathName(@F_EntityID) + ''）'' + CASE @F_Year WHEN 9999 THEN ''所有月份'' ELSE CAST(@F_Year AS VARCHAR) + ''年'' + CAST(@F_TempMonth AS VARCHAR) + ''月'' END + ''的工作时间为'' + @F_WStartTime + ''～'' + @F_WEndTime FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_EntityID
		IF @F_TStartTime1 <> '''' SET @F_Log = @F_Log + ''，过渡工作时间为'' + @F_TStartTime1 + ''～'' + @F_TEndTime1
		IF @F_TStartTime2 <> '''' SET @F_Log = @F_Log + ''，过渡工作时间为'' + @F_TStartTime2 + ''～'' + @F_TEndTime2
		EXEC dbo.proc_A_WriteEventLog 10,@F_UserID,@F_IP,@F_Log
		SET @F_TempMonth = @F_TempMonth + 1
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_NodeMeteringToEntity]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_NodeMeteringToEntity]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_NodeMeteringToEntity]
	@F_EntityTree int,
	@F_NodeTree int,
	@F_NodeID bigint,
	@F_EntityStr varchar(max),
	@F_UserName varchar(32),
	@F_VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	
	IF @F_EntityStr = ''''
		DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_NodeTreeNo = @F_NodeTree AND F_NodeID = @F_NodeID AND F_EntityTreeNo = @F_EntityTree AND F_EndDate IS NULL
	ELSE
	BEGIN
		DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_NodeTreeNo = @F_NodeTree AND F_NodeID = @F_NodeID AND F_EntityTreeNo = @F_EntityTree AND F_EndDate IS NULL AND F_EntityID NOT IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_EntityStr))
		INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @F_EntityTree,F_ObjectID,@F_NodeTree,@F_NodeID,ISNULL(dbo.fun_GetEntityMeteringStartDate(@F_EntityTree,F_ObjectID,@F_NodeTree),GETDATE()),NULL,1,0 FROM dbo.fun_SplitByComma(@F_EntityStr) WHERE F_ObjectID NOT IN (SELECT F_EntityID FROM dbo.tb_B_EntityTreeMetering WHERE F_NodeTreeNo = @F_NodeTree AND F_NodeID = @F_NodeID AND F_EntityTreeNo = @F_EntityTree AND F_EndDate IS NULL)
	END
	
	SELECT @F_Log = @F_UserName + ''更新了表具（'' + F_EntityName + ''）关联的对象实例计量关系（'' + @F_EntityStr + ''）。'' FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_NodeTree AND F_EntityID = @F_NodeID
	EXEC dbo.proc_A_WriteEventLog 6,@F_UserName,@F_VistorIP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_ImportEntityToMeterCsvFile]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_ImportEntityToMeterCsvFile]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_ImportEntityToMeterCsvFile]
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DECLARE @F_EntityTreeNo int
	DECLARE @F_EntityID bigint
	DECLARE @F_NodeTreeNo int
	DECLARE @F_NodeID bigint

	SELECT DISTINCT @F_EntityTreeNo = B.F_EntityTreeNo FROM dbo.tb_B_EntityTreeMeteringTemp A,dbo.tb_B_EntityTreeModel B WHERE A.F_EntityID = B.F_EntityID
	SELECT DISTINCT @F_NodeTreeNo = B.F_EntityTreeNo FROM dbo.tb_B_EntityTreeMeteringTemp A,dbo.tb_B_EntityTreeModel B WHERE A.F_NodeID = B.F_EntityID
	
	DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_NodeTreeNo = @F_NodeTreeNo
	
	INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @F_EntityTreeNo,F_EntityID,@F_NodeTreeNo,F_NodeID,F_StartDate,CASE F_EndDate WHEN ''1900-01-01'' THEN NULL ELSE F_EndDate END,F_Rate,0 FROM dbo.tb_B_EntityTreeMeteringTemp
	
		
	SELECT @F_Log = @UserName + ''导入了管理模型（'' + A.F_EntityTreeName + ''）与表具模型（'' + B.F_EntityTreeName + ''）之间的统计关系。IP:'' + @VistorIP FROM dbo.tb_B_EntityTreeType A,dbo.tb_B_EntityTreeType B WHERE A.F_EntityTreeNo = @F_EntityTreeNo AND B.F_EntityTreeNo = @F_NodeTreeNo
	EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_ImportEntityToDeviceCsvFile]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_ImportEntityToDeviceCsvFile]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_ImportEntityToDeviceCsvFile]
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DECLARE @F_EntityTreeNo int
	DECLARE @F_EntityID bigint
	DECLARE @F_DeviceTreeNo int
	DECLARE @F_DeviceID bigint

	SELECT DISTINCT @F_EntityTreeNo = B.F_EntityTreeNo FROM dbo.tb_B_EntityTreeToDeviceTemp A,dbo.tb_B_EntityTreeModel B WHERE A.F_EntityID = B.F_EntityID
	SELECT DISTINCT @F_DeviceTreeNo = B.F_EntityTreeNo FROM dbo.tb_B_EntityTreeToDeviceTemp A,dbo.tb_B_EntityTreeModel B WHERE A.F_DeviceID = B.F_EntityID
	
	DELETE FROM dbo.tb_B_EntityTreeToDevice WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_DeviceTreeNo = @F_DeviceTreeNo
	
	INSERT INTO dbo.tb_B_EntityTreeToDevice SELECT @F_EntityTreeNo,F_EntityID,@F_DeviceTreeNo,F_DeviceID FROM dbo.tb_B_EntityTreeToDeviceTemp
	
		
	SELECT @F_Log = @UserName + ''导入了管理模型（'' + A.F_EntityTreeName + ''）与设备模型（'' + B.F_EntityTreeName + ''）之间的设备关系。IP:'' + @VistorIP FROM dbo.tb_B_EntityTreeType A,dbo.tb_B_EntityTreeType B WHERE A.F_EntityTreeNo = @F_EntityTreeNo AND B.F_EntityTreeNo = @F_DeviceTreeNo
	EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log

END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_ImportEntityCsvFile]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_ImportEntityCsvFile]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_ImportEntityCsvFile]
	@F_EntityTreeNo int,
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DECLARE @F_EntityID bigint
	DECLARE @F_ParentID bigint
	DECLARE @F_EntityName varchar(128)
	DECLARE @F_EntitySName varchar(32)
	DECLARE @F_EntityDepth int
	DECLARE @F_TemplateID varchar(32)
	DECLARE @F_OrderTag varchar(32)
	DECLARE @F_IsHasChild bit
	DECLARE @cur_entity cursor
	DECLARE @index int
	
	SET @index = 1
	UPDATE dbo.tb_B_EntityTreeModelTemp SET F_EntityDepth = @index WHERE F_ParentID = ''0''
	WHILE @@ROWCOUNT <> 0
	BEGIN
		SET @index = @index + 1
		UPDATE dbo.tb_B_EntityTreeModelTemp SET F_EntityDepth = @index WHERE F_ParentID IN (SELECT F_EntityID FROM tb_B_EntityTreeModelTemp WHERE F_EntityDepth = @index - 1)
	END

	SET @cur_entity = CURSOR forward_only static FOR
	SELECT F_EntityID,F_ParentID,F_EntityName,F_EntitySName,F_EntityDepth,F_TemplateID,F_OrderTag FROM dbo.tb_B_EntityTreeModelTemp ORDER BY F_EntityDepth,F_EntityID

	OPEN @cur_entity
	FETCH NEXT FROM @cur_entity INTO @F_EntityID,@F_ParentID,@F_EntityName,@F_EntitySName,@F_EntityDepth,@F_TemplateID,@F_OrderTag
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT F_EntityID FROM dbo.tb_B_EntityTreeModelTemp WHERE F_ParentID = @F_EntityID) SET @F_IsHasChild = 1 ELSE SET @F_IsHasChild = 0
		IF NOT EXISTS(SELECT F_EntityID FROM tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID)
		BEGIN
			IF EXISTS(SELECT F_EntityID FROM tb_B_EntityTreeModel WHERE F_EntityID = @F_EntityID) OR EXISTS(SELECT F_NodeCode FROM tb_A_IoTNode WHERE F_NodeCode = @F_EntityID)
			BEGIN
				INSERT INTO dbo.tb_B_EntityTreeModel
				(
					F_EntityTreeNo,
					F_EntityID,
					F_ParentID,
					F_EntityName,
					F_EntitySName,
					F_EntityDepth,
					F_ObjectGroup,
					F_TemplateID,
					F_IsHasChild,
					F_IsDisplay,
					F_OrderTag
				)
				VALUES
				(
					@F_EntityTreeNo,
					dbo.fun_MakeSerialNum(),
					@F_ParentID,
					@F_EntityName,
					@F_EntitySName,
					@F_EntityDepth,
					CASE @F_TemplateID WHEN '''' THEN NULL ELSE ''1'' END,
					CASE @F_TemplateID WHEN '''' THEN NULL ELSE @F_TemplateID END,
					@F_IsHasChild,
					1,
					@F_OrderTag
				)
			END
			ELSE
			BEGIN
				INSERT INTO dbo.tb_B_EntityTreeModel
				(
					F_EntityTreeNo,
					F_EntityID,
					F_ParentID,
					F_EntityName,
					F_EntitySName,
					F_EntityDepth,
					F_ObjectGroup,
					F_TemplateID,
					F_IsHasChild,
					F_IsDisplay,
					F_OrderTag
				)
				VALUES
				(
					@F_EntityTreeNo,
					@F_EntityID,
					@F_ParentID,
					@F_EntityName,
					@F_EntitySName,
					@F_EntityDepth,
					CASE @F_TemplateID WHEN '''' THEN NULL ELSE ''1'' END,
					CASE @F_TemplateID WHEN '''' THEN NULL ELSE @F_TemplateID END,
					@F_IsHasChild,
					1,
					@F_OrderTag
				)
			END
		END
		ELSE
		BEGIN
			UPDATE dbo.tb_B_EntityTreeModel
			SET F_ParentID = @F_ParentID,
				F_EntityName = @F_EntityName,
				F_EntitySName = @F_EntitySName,
				F_EntityDepth = @F_EntityDepth,
				F_ObjectGroup = CASE @F_TemplateID WHEN '''' THEN NULL ELSE ''1'' END,
				F_TemplateID = CASE @F_TemplateID WHEN '''' THEN NULL ELSE @F_TemplateID END,				
				F_IsHasChild = @F_IsHasChild,
				F_OrderTag = @F_OrderTag
			WHERE F_EntityTreeNo = @F_EntityTreeNo 
				AND F_EntityID = @F_EntityID
		END
		
		UPDATE dbo.tb_B_EntityTreeType SET F_TreeDepth = @F_EntityDepth WHERE F_EntityTreeNo = @F_EntityTreeNo AND (F_TreeDepth IS NULL OR @F_EntityDepth > F_TreeDepth)
		
		SELECT @F_Log = @UserName + ''导入了管理模型（'' + F_EntityTreeName + ''）中的对象（'' + @F_EntityName + ''）。IP:'' + @VistorIP FROM dbo.tb_B_EntityTreeType WHERE F_EntityTreeNo = @F_EntityTreeNo
		EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
		
		FETCH NEXT FROM @cur_entity INTO @F_EntityID,@F_ParentID,@F_EntityName,@F_EntitySName,@F_EntityDepth,@F_TemplateID,@F_OrderTag
	END
	CLOSE @cur_entity
	DEALLOCATE @cur_entity
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_EntityTreeTypeOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_EntityTreeTypeOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_EntityTreeTypeOperate]
	@OperFlg char(1),
	@F_EntityTreeNo int,
	@F_EntityTreeName varchar(32),
	@F_EntityTreeType char(1),
	@F_Memo varchar(256),
	@F_User varchar(15),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_B_EntityTreeType
		(
			F_EntityTreeName,
			F_EntityTreeType,
			F_CreateUser,
			F_CreateDate,
			F_Memo
		)
		VALUES
		(
			@F_EntityTreeName,
			@F_EntityTreeType,
			@F_User,
			GETDATE(),
			@F_Memo
		)
		SET @F_Log = @F_User + ''添加了对象实例树（'' + @F_EntityTreeName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_B_EntityTreeType
		SET F_EntityTreeName = @F_EntityTreeName,
			F_EntityTreeType = @F_EntityTreeType,
			F_UpdateUser = @F_User,
			F_UpdateDate = GETDATE(),
			F_Memo = @F_Memo
		WHERE F_EntityTreeNo = @F_EntityTreeNo
		SET @F_Log = @F_User + ''修改了对象实例树（'' + @F_EntityTreeName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了对象实例树（'' + F_EntityTreeName + ''）。''  FROM dbo.tb_B_EntityTreeType WHERE F_EntityTreeNo = @F_EntityTreeNo
		DELETE FROM dbo.tb_B_EntityTreeType WHERE F_EntityTreeNo = @F_EntityTreeNo
		DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @F_EntityTreeNo OR F_NodeTreeNo = @F_EntityTreeNo
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_EntityTreeRelation]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_EntityTreeRelation]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_EntityTreeRelation]
	@EntityTree int,
	@EntityID bigint,
	@NodeTree int,
	@NodeStr varchar(max),
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF EXISTS(SELECT F_DeviceID FROM dbo.tb_B_EntityTreeToDevice WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_DeviceTreeNo = @NodeTree)
	BEGIN
		DELETE FROM dbo.tb_B_EntityTreeToDevice WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_DeviceTreeNo = @NodeTree
		SELECT @F_Log = @UserName + ''更新对象实例（'' + F_EntityName + ''）的设备关系。IP:'' + @VistorIP FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID
	END
	ELSE
	BEGIN
		SELECT @F_Log = @UserName + ''添加对象实例（'' + F_EntityName + ''）的设备关系。IP:'' + @VistorIP FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID
	END
	INSERT INTO dbo.tb_B_EntityTreeToDevice SELECT @EntityTree,@EntityID,@NodeTree,F_ObjectID FROM dbo.fun_SplitByComma(@NodeStr)
	EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_EntityTreeNodeDrog]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_EntityTreeNodeDrog]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_EntityTreeNodeDrog]
	@EntityTreeNo int, 
	@DropNode bigint,
	@NewParent varchar(16),
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DECLARE @OldParent bigint
	DECLARE @OldDepth smallint
	DECLARE @NewDepth smallint
	
	SELECT @OldParent = F_ParentID,@OldDepth = F_EntityDepth FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @DropNode
	SELECT @NewDepth = F_EntityDepth + 1 FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @NewParent
	
	UPDATE dbo.tb_B_EntityTreeModel SET F_ParentID = @NewParent,F_EntityDepth = @NewDepth WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @DropNode
	UPDATE dbo.tb_B_EntityTreeModel SET F_EntityDepth = F_EntityDepth + (@NewDepth - @OldDepth) WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID IN (SELECT id FROM dbo.fun_GetChildNodeByParent(@DropNode))

	IF NOT EXISTS(SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTreeNo AND F_ParentID = @OldParent)
	BEGIN
		UPDATE dbo.tb_B_EntityTreeModel SET F_IsHasChild = 0 WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @OldParent
	END
	UPDATE dbo.tb_B_EntityTreeModel SET F_IsHasChild = 1 WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @NewParent
	UPDATE dbo.tb_B_EntityTreeType SET F_TreeDepth = (SELECT MAX(F_EntityDepth) FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTreeNo) ,F_UpdateUser = @UserName,F_UpdateDate = GETDATE() WHERE F_EntityTreeNo = @EntityTreeNo
	SELECT @F_Log = @UserName + ''修改了对象实例（'' + F_EntityName + ''）的父节点。'' FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @DropNode
	EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_EntityTreeMetering]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_EntityTreeMetering]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_EntityTreeMetering]
	@EntityTree int,
	@EntityID bigint,
	@NodeTree int,
	@NodeStr varchar(max),
	@StartDate date,
	@EndDate varchar(16),
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_MinDate date
	DECLARE @F_MaxDate date
	DECLARE @F_Log varchar(512)
	SET @EndDate = CASE @EndDate WHEN '''' THEN NULL ELSE @EndDate END
	
	IF NOT EXISTS(SELECT F_NodeID FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree)
	BEGIN
		INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),@StartDate,ISNULL(@EndDate,NULL),CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
	END
	ELSE
	BEGIN 
		SELECT @F_MinDate = MIN(F_StartDate) FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree
		IF EXISTS(SELECT F_NodeID FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_EndDate IS NULL)
			SELECT @F_MaxDate = MAX(F_StartDate) FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree
		ELSE 
			SELECT @F_MaxDate = MAX(F_EndDate) FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree
		
		IF @StartDate < @F_MinDate
		BEGIN
			IF @EndDate < @F_MinDate
			BEGIN
				INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),@StartDate,@EndDate,CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
			END
			ELSE IF @EndDate >= @F_MinDate AND @EndDate <= @F_MaxDate
			BEGIN
				UPDATE dbo.tb_B_EntityTreeMetering SET F_StartDate = DATEADD(DAY,1,@EndDate),F_SynStatus = 0 WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND @EndDate BETWEEN F_StartDate AND F_EndDate
				DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_StartDate >= @StartDate AND F_EndDate <= @EndDate
				INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),@StartDate,ISNULL(@EndDate,NULL),CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
			END
			ELSE IF @EndDate > @F_MaxDate
			BEGIN
				UPDATE dbo.tb_B_EntityTreeMetering SET F_StartDate = DATEADD(DAY,1,@EndDate),F_SynStatus = 0 WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_EndDate IS NULL
				DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_StartDate >= @StartDate AND F_EndDate <= @EndDate
				INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),@StartDate,ISNULL(@EndDate,NULL),CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
			END
			ELSE IF @EndDate IS NULL
			BEGIN
				DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_StartDate >= @StartDate
				INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),@StartDate,ISNULL(@EndDate,NULL),CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
			END
		END
		ELSE IF @StartDate >= @F_MinDate AND @StartDate <= @F_MaxDate
		BEGIN
			IF @EndDate >= @F_MinDate AND @EndDate <= @F_MaxDate
			BEGIN
				UPDATE dbo.tb_B_EntityTreeMetering SET F_EndDate = DATEADD(DAY,-1,@StartDate),F_SynStatus = 0 WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND @StartDate BETWEEN F_StartDate AND F_EndDate
				UPDATE dbo.tb_B_EntityTreeMetering SET F_StartDate = DATEADD(DAY,1,@EndDate),F_SynStatus = 0 WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND @EndDate BETWEEN F_StartDate AND F_EndDate
				DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_StartDate >= @StartDate AND F_EndDate <= @EndDate
				INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),@StartDate,ISNULL(@EndDate,NULL),CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
			END
			ELSE IF @EndDate > @F_MaxDate
			BEGIN
				UPDATE dbo.tb_B_EntityTreeMetering SET F_EndDate = DATEADD(DAY,-1,@StartDate),F_SynStatus = 0 WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND @StartDate BETWEEN F_StartDate AND F_EndDate
				UPDATE dbo.tb_B_EntityTreeMetering SET F_StartDate = DATEADD(DAY,1,@EndDate),F_SynStatus = 0 WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_EndDate IS NULL
				DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_StartDate >= @StartDate AND F_EndDate <= @EndDate
				INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),@StartDate,ISNULL(@EndDate,NULL),CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
			END
			ELSE IF @EndDate IS NULL
			BEGIN
				UPDATE dbo.tb_B_EntityTreeMetering SET F_EndDate = DATEADD(DAY,-1,@StartDate),F_SynStatus = 0 WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND @StartDate BETWEEN F_StartDate AND F_EndDate
				DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_StartDate >= @StartDate
				INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),@StartDate,ISNULL(@EndDate,NULL),CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
			END
		END
		ELSE IF @StartDate > @F_MaxDate
		BEGIN
			IF @EndDate IS NULL
			BEGIN
				UPDATE dbo.tb_B_EntityTreeMetering SET F_EndDate = DATEADD(DAY,-1,@StartDate),F_SynStatus = 0 WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_EndDate IS NULL
				INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),@StartDate,ISNULL(@EndDate,NULL),CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
			END
			ELSE
			BEGIN
				IF EXISTS(SELECT F_NodeID FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_EndDate IS NULL)
				BEGIN
					UPDATE dbo.tb_B_EntityTreeMetering SET F_EndDate = DATEADD(DAY,-1,@StartDate),F_SynStatus = 0 WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeTreeNo = @NodeTree AND F_EndDate IS NULL
					INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),DATEADD(DAY,1,@EndDate),NULL,CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
				END
				INSERT INTO dbo.tb_B_EntityTreeMetering SELECT @EntityTree,@EntityID,@NodeTree,SUBSTRING(F_ObjectID,1,CHARINDEX(''@'',F_ObjectID,1) - 1),@StartDate,ISNULL(@EndDate,NULL),CAST(SUBSTRING(F_ObjectID,CHARINDEX(''@'',F_ObjectID,1) + 1,LEN(F_ObjectID)) AS NUMERIC(18,2)) / 100,0 FROM dbo.fun_SplitByComma(@NodeStr)
			END
		END
	END 
	SELECT @F_Log = @UserName + ''更新对象实例（'' + F_EntityName + ''）的在期间（'' + CAST(@StartDate AS VARCHAR) + ''～'' + ISNULL(CAST(@EndDate AS VARCHAR),''∞'') + ''）的计量关系。'' FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID
	EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_EntityPropertyOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_EntityPropertyOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_EntityPropertyOperate]
	@EntityTreeNo int, 
	@EntityID bigint,
	@PropertyID bigint,
	@PropertyValue varchar(512),
	@StartYM varchar(7),
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DECLARE @GroupTypeID varchar(3)
	SELECT @GroupTypeID = F_GroupTypeID FROM dbo.tb_B_ObjectProperty WHERE F_PropertyID = @PropertyID
	
	IF @GroupTypeID = ''A''
	BEGIN
		IF EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID)
		BEGIN
			UPDATE dbo.tb_B_EntityTreeProperty
			SET F_PropertyValue = @PropertyValue,
				F_UpdateDate = GETDATE(),
				F_UpdateUser = @UserName
			WHERE F_EntityTreeNo = @EntityTreeNo 
				AND F_EntityID = @EntityID 
				AND F_PropertyID = @PropertyID 
			SELECT @F_Log = @UserName + ''更新了对象实例（'' + A.F_EntityName + ''）的属性（'' + B.F_PropertyName + ''）。'' FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_ObjectProperty B WHERE A.F_EntityTreeNo = @EntityTreeNo AND A.F_EntityID = @EntityID AND B.F_PropertyID = @PropertyID
			EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_B_EntityTreeProperty
			(
				F_EntityTreeNo,
				F_EntityID,
				F_PropertyID,
				F_PropertyValue,
				F_StartYM,
				F_EndYM,
				F_UpdateDate,
				F_UpdateUser
			)
			VALUES
			(
				@EntityTreeNo,
				@EntityID,
				@PropertyID,
				@PropertyValue,
				@StartYM + ''-01'',
				''9999-12-31'',
				GETDATE(),
				@UserName
			)
			SELECT @F_Log = @UserName + ''录入了对象实例（'' + A.F_EntityName + ''）的属性（'' + B.F_PropertyName + ''）。'' FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_ObjectProperty B WHERE A.F_EntityTreeNo = @EntityTreeNo AND A.F_EntityID = @EntityID AND B.F_PropertyID = @PropertyID
			EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
		END
	END
	ELSE IF @GroupTypeID = ''B''
	BEGIN
		IF EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID)
		BEGIN
			IF EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID AND CONVERT(varchar(7),F_StartYM,120) = @StartYM)
			BEGIN
				UPDATE dbo.tb_B_EntityTreeProperty
				SET F_PropertyValue = @PropertyValue,
					F_UpdateDate = GETDATE(),
					F_UpdateUser = @UserName
				WHERE F_EntityTreeNo = @EntityTreeNo 
					AND F_EntityID = @EntityID 
					AND F_PropertyID = @PropertyID 
					AND CONVERT(varchar(7),F_StartYM,120) = @StartYM
				SELECT @F_Log = @UserName + ''更新了对象实例（'' + A.F_EntityName + ''）的属性（'' + B.F_PropertyName + ''）。'' FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_ObjectProperty B WHERE A.F_EntityTreeNo = @EntityTreeNo AND A.F_EntityID = @EntityID AND B.F_PropertyID = @PropertyID
				EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
			END
			ELSE IF NOT EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID AND CONVERT(varchar(7),F_StartYM,120) > @StartYM)
			BEGIN
				UPDATE dbo.tb_B_EntityTreeProperty SET F_EndYM = DATEADD(D,-1,CAST(@StartYM + ''-01'' AS date)) WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID AND F_EndYM = ''9999-12-31''
				INSERT INTO dbo.tb_B_EntityTreeProperty
				(
					F_EntityTreeNo,
					F_EntityID,
					F_PropertyID,
					F_PropertyValue,
					F_StartYM,
					F_EndYM,
					F_UpdateDate,
					F_UpdateUser
				)
				VALUES
				(
					@EntityTreeNo,
					@EntityID,
					@PropertyID,
					@PropertyValue,
					@StartYM + ''-01'',
					''9999-12-31'',
					GETDATE(),
					@UserName
				)
				SELECT @F_Log = @UserName + ''更新了对象实例（'' + A.F_EntityName + ''）的属性（'' + B.F_PropertyName + ''）。'' FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_ObjectProperty B WHERE A.F_EntityTreeNo = @EntityTreeNo AND A.F_EntityID = @EntityID AND B.F_PropertyID = @PropertyID
				EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
			END
			ELSE
			BEGIN
				UPDATE dbo.tb_B_EntityTreeProperty 
				SET F_EndYM = DATEADD(D,-1,CAST(@StartYM + ''-01'' AS date)) 
				WHERE F_EntityTreeNo = @EntityTreeNo 
					AND F_EntityID = @EntityID 
					AND F_PropertyID = @PropertyID
					AND F_StartYM = 
					(
						SELECT TOP 1 F_StartYM 
						FROM dbo.tb_B_EntityTreeProperty
						WHERE F_EntityTreeNo = @EntityTreeNo 
							AND F_EntityID = @EntityID 
							AND F_PropertyID = @PropertyID 
							AND CONVERT(varchar(7),F_StartYM,120) < @StartYM
						ORDER BY F_StartYM DESC
					)
				INSERT INTO dbo.tb_B_EntityTreeProperty
				(
					F_EntityTreeNo,
					F_EntityID,
					F_PropertyID,
					F_PropertyValue,
					F_StartYM,
					F_EndYM,
					F_UpdateDate,
					F_UpdateUser
				)
				SELECT TOP 1
					@EntityTreeNo,
					@EntityID,
					@PropertyID,
					@PropertyValue,
					@StartYM + ''-01'',
					DATEADD(D,-1,F_StartYM),
					GETDATE(),
					@UserName
				FROM dbo.tb_B_EntityTreeProperty
				WHERE F_EntityTreeNo = @EntityTreeNo 
					AND F_EntityID = @EntityID 
					AND F_PropertyID = @PropertyID 
					AND CONVERT(varchar(7),F_StartYM,120) > @StartYM
				ORDER BY F_StartYM
				SELECT @F_Log = @UserName + ''更新了对象实例（'' + A.F_EntityName + ''）的属性（'' + B.F_PropertyName + ''）。'' FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_ObjectProperty B WHERE A.F_EntityTreeNo = @EntityTreeNo AND A.F_EntityID = @EntityID AND B.F_PropertyID = @PropertyID
				EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
			END
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_B_EntityTreeProperty
			(
				F_EntityTreeNo,
				F_EntityID,
				F_PropertyID,
				F_PropertyValue,
				F_StartYM,
				F_EndYM,
				F_UpdateDate,
				F_UpdateUser
			)
			VALUES
			(
				@EntityTreeNo,
				@EntityID,
				@PropertyID,
				@PropertyValue,
				SUBSTRING(@StartYM,1,4) + ''-01-01'',
				''9999-12-31'',
				GETDATE(),
				@UserName
			)
			SELECT @F_Log = @UserName + ''录入了对象实例（'' + A.F_EntityName + ''）的属性（'' + B.F_PropertyName + ''）。'' FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_ObjectProperty B WHERE A.F_EntityTreeNo = @EntityTreeNo AND A.F_EntityID = @EntityID AND B.F_PropertyID = @PropertyID
			EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_DelEntityRelationNode]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_DelEntityRelationNode]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_DelEntityRelationNode]
	@EntityTree varchar(1),
	@EntityID bigint,
	@NodeID bigint,
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DELETE FROM dbo.tb_B_EntityTreeToDevice WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_DeviceID = @NodeID
	SELECT @F_Log = @UserName + ''删除对象实例（'' + A.F_EntityName + ''）的设备关系（'' + B.F_EntityName + ''）。'' FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_EntityTreeModel B WHERE A.F_EntityTreeNo = @EntityTree AND A.F_EntityID = @EntityID AND B.F_EntityID = @NodeID

	EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_DelEntityMeteringNode]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_DelEntityMeteringNode]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_DelEntityMeteringNode]
	@EntityTree varchar(1),
	@EntityID bigint,
	@NodeID bigint,
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @EntityTree AND F_EntityID = @EntityID AND F_NodeID = @NodeID
	SELECT @F_Log = @UserName + ''删除对象实例（'' + A.F_EntityName + ''）的计量关系（'' + B.F_EntityName + ''）。'' FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_EntityTreeModel B WHERE A.F_EntityTreeNo = @EntityTree AND A.F_EntityID = @EntityID AND B.F_EntityID = @NodeID

	EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_VirtualComputeOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_VirtualComputeOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_VirtualComputeOperate]
	@F_VirtualNCode bigint,
	@F_VirtualVLabel varchar(32),
	@F_Formula varchar(max),
	@F_FromulaHtml varchar(max),
	@F_NAndV varchar(max),
	@F_MType char(1),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @F_Formula = '''' OR @F_FromulaHtml = '''' DELETE FROM dbo.tb_B_VirtualCompute WHERE F_VirtualNCode = @F_VirtualNCode AND F_VirtualVLabel = @F_VirtualVLabel 
	ELSE IF EXISTS(SELECT F_VirtualNCode FROM dbo.tb_B_VirtualCompute WHERE F_VirtualNCode = @F_VirtualNCode AND F_VirtualVLabel = @F_VirtualVLabel)
	BEGIN
		UPDATE dbo.tb_B_VirtualCompute
		SET F_Formula = @F_Formula,
			F_FromulaHtml = @F_FromulaHtml,
			F_NAndV = @F_NAndV,
			F_MType = @F_MType
		WHERE F_VirtualNCode = @F_VirtualNCode 
			AND F_VirtualVLabel = @F_VirtualVLabel
		SELECT @F_Log = @F_UserID + ''更新变量（'' + F_EntityName + ''.'' + @F_VirtualVLabel + ''）的虚拟计算公式为：'' + @F_Formula FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_VirtualNCode
		EXEC dbo.proc_A_WriteEventLog 6,@F_UserID,@F_IP,@F_Log
	END
	ELSE
	BEGIN
		INSERT INTO dbo.tb_B_VirtualCompute
		(
			F_VirtualNCode,
			F_VirtualVLabel,
			F_Formula,
			F_FromulaHtml,
			F_NAndV,
			F_MType
		)
		VALUES
		(
			@F_VirtualNCode,
			@F_VirtualVLabel,
			@F_Formula,
			@F_FromulaHtml,
			@F_NAndV,
			@F_MType
		)
		SELECT @F_Log = @F_UserID + ''添加变量（'' + F_EntityName + ''.'' + @F_VirtualVLabel + ''）的虚拟计算公式为：'' + @F_Formula FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_VirtualNCode
		EXEC dbo.proc_A_WriteEventLog 6,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_EntityPropertyImport]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_EntityPropertyImport]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_EntityPropertyImport]
	@EntityTreeNo int, 
	@EntityID bigint,
	@PropertyTag varchar(32),
	@PropertyValue varchar(512),
	@UserName varchar(32)
AS
BEGIN
	DECLARE @GroupTypeID varchar(3)
	DECLARE @PropertyID bigint
	
	SELECT 
		@GroupTypeID = A.F_GroupTypeID,
		@PropertyID = A.F_PropertyID
	FROM dbo.tb_B_ObjectProperty A,
		dbo.tb_B_EntityTreeModel B,
		dbo.tb_B_DictTreeProperty D
	WHERE A.F_PropertyIdentifier = @PropertyTag
		AND B.F_EntityTreeNo = @EntityTreeNo
		AND B.F_EntityID = @EntityID
		AND B.F_TemplateID = D.F_GroupID
		AND D.F_PropertyID = A.F_PropertyID
	
	IF @GroupTypeID = ''A''
	BEGIN
		IF EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID)
		BEGIN
			UPDATE dbo.tb_B_EntityTreeProperty
			SET F_PropertyValue = @PropertyValue,
				F_UpdateDate = GETDATE(),
				F_UpdateUser = @UserName
			WHERE F_EntityTreeNo = @EntityTreeNo 
				AND F_EntityID = @EntityID 
				AND F_PropertyID = @PropertyID
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_B_EntityTreeProperty
			(
				F_EntityTreeNo,
				F_EntityID,
				F_PropertyID,
				F_PropertyValue,
				F_StartYM,
				F_EndYM,
				F_UpdateDate,
				F_UpdateUser
			)
			VALUES
			(
				@EntityTreeNo,
				@EntityID,
				@PropertyID,
				@PropertyValue,
				CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'',
				''9999-12-31'',
				GETDATE(),
				@UserName
			)
		END
	END
	ELSE IF @GroupTypeID = ''B''
	BEGIN
		IF EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID)
		BEGIN
			IF EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID AND CONVERT(varchar(7),F_StartYM,120) = CONVERT(VARCHAR(7),GETDATE(),120))
			BEGIN
				UPDATE dbo.tb_B_EntityTreeProperty
				SET F_PropertyValue = @PropertyValue,
					F_UpdateDate = GETDATE(),
					F_UpdateUser = @UserName
				WHERE F_EntityTreeNo = @EntityTreeNo 
					AND F_EntityID = @EntityID 
					AND F_PropertyID = @PropertyID 
					AND CONVERT(varchar(7),F_StartYM,120) = CONVERT(VARCHAR(7),GETDATE(),120)
			END
			ELSE IF NOT EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID AND CONVERT(varchar(7),F_StartYM,120) > CONVERT(VARCHAR(7),GETDATE(),120))
			BEGIN
				UPDATE dbo.tb_B_EntityTreeProperty SET F_EndYM = DATEADD(D,-1,CAST(CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'' AS date)) WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID AND F_EndYM = ''9999-12-31''
				INSERT INTO dbo.tb_B_EntityTreeProperty
				(
					F_EntityTreeNo,
					F_EntityID,
					F_PropertyID,
					F_PropertyValue,
					F_StartYM,
					F_EndYM,
					F_UpdateDate,
					F_UpdateUser
				)
				VALUES
				(
					@EntityTreeNo,
					@EntityID,
					@PropertyID,
					@PropertyValue,
					CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'',
					''9999-12-31'',
					GETDATE(),
					@UserName
				)
			END
			ELSE
			BEGIN
				UPDATE dbo.tb_B_EntityTreeProperty 
				SET F_EndYM = DATEADD(D,-1,CAST(CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'' AS date)) 
				WHERE F_EntityTreeNo = @EntityTreeNo 
					AND F_EntityID = @EntityID 
					AND F_PropertyID = @PropertyID
					AND F_StartYM = 
					(
						SELECT TOP 1 F_StartYM 
						FROM dbo.tb_B_EntityTreeProperty
						WHERE F_EntityTreeNo = @EntityTreeNo 
							AND F_EntityID = @EntityID 
							AND F_PropertyID = @PropertyID 
							AND CONVERT(varchar(7),F_StartYM,120) < CONVERT(VARCHAR(7),GETDATE(),120)
						ORDER BY F_StartYM DESC
					)
				INSERT INTO dbo.tb_B_EntityTreeProperty
				(
					F_EntityTreeNo,
					F_EntityID,
					F_PropertyID,
					F_PropertyValue,
					F_StartYM,
					F_EndYM,
					F_UpdateDate,
					F_UpdateUser
				)
				SELECT TOP 1
					@EntityTreeNo,
					@EntityID,
					@PropertyID,
					@PropertyValue,
					CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'',
					DATEADD(D,-1,F_StartYM),
					GETDATE(),
					@UserName
				FROM dbo.tb_B_EntityTreeProperty
				WHERE F_EntityTreeNo = @EntityTreeNo 
					AND F_EntityID = @EntityID 
					AND F_PropertyID = @PropertyID 
					AND CONVERT(varchar(7),F_StartYM,120) > CONVERT(VARCHAR(7),GETDATE(),120)
				ORDER BY F_StartYM
			END
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_B_EntityTreeProperty
			(
				F_EntityTreeNo,
				F_EntityID,
				F_PropertyID,
				F_PropertyValue,
				F_StartYM,
				F_EndYM,
				F_UpdateDate,
				F_UpdateUser
			)
			VALUES
			(
				@EntityTreeNo,
				@EntityID,
				@PropertyID,
				@PropertyValue,
				CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'',
				''9999-12-31'',
				GETDATE(),
				@UserName
			)
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_SynNodeOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_SynNodeOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_SynNodeOperate]
	@F_AppCode bigint,
	@F_TemplateID varchar(16),
	@F_NodeNo varchar(16),
	@F_NodeID bigint,
	@F_NodeName varchar(128),
	@F_Location varchar(512),
	@F_Remark varchar(512),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_EntityTreeNo int
	DECLARE @F_EntityID bigint
	DECLARE @F_NodeCode bigint
	DECLARE @F_TemplateCode bigint
	DECLARE @F_Log varchar(512)
	
	SELECT @F_NodeCode = F_NodeCode FROM dbo.tb_A_IoTNode WHERE F_AppCode = @F_AppCode AND F_NodeNo = @F_NodeNo
	SELECT @F_TemplateCode = F_TemplateCode FROM dbo.tb_A_Template WHERE F_TemplateID = @F_TemplateID
	IF @F_NodeCode IS NOT NULL
	BEGIN
		UPDATE dbo.tb_A_IoTNode 
		SET F_NodeNo = @F_NodeNo,
			F_NodeID = @F_NodeID,
			F_NodeName = @F_NodeName,
			F_TemplateCode = @F_TemplateCode,
			F_Location = @F_Location,
			F_Remark = @F_Remark
		WHERE F_NodeCode = @F_NodeCode
		SELECT @F_Log = @F_UserID + ''同步更新了物联应用（'' + F_AppName + ''）的设备（'' + @F_NodeName + ''）信息。'' FROM dbo.tb_A_IoTApp WHERE F_AppCode = @F_AppCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
		
		SELECT @F_EntityTreeNo = F_EntityTreeNo,@F_EntityID = F_EntityID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_NodeCode
		IF @F_EntityID IS NOT NULL
		BEGIN
			UPDATE dbo.tb_B_EntityTreeModel SET F_EntityName = @F_NodeName,F_NodeTemplate = @F_TemplateCode WHERE F_EntityID = @F_EntityID AND (F_EntityName <> @F_NodeName OR F_NodeTemplate <> @F_TemplateCode)
			EXEC dbo.proc_B_EntityPropertyImport @F_EntityTreeNo,@F_EntityID,''P2_NodePosition'',@F_Location,@F_UserID
		END
	END
	ELSE
	BEGIN
		INSERT INTO dbo.tb_A_IoTNode
		(
			F_NodeCode,
			F_NodeNo,
			F_NodeID,
			F_NodeName,
			F_TemplateCode,
			F_Location,
			F_Remark,
			F_IsVisible,
			F_IsStorage,
			F_AppCode
		)
		SELECT
			dbo.fun_MakeNodeSerial(),
			@F_NodeNo,
			@F_NodeID,
			@F_NodeName,
			F_TemplateCode,
			@F_Location,
			@F_Remark,
			1,
			1,
			@F_AppCode
		FROM dbo.tb_A_Template
		WHERE F_AppCode = @F_AppCode
			AND F_TemplateID = @F_TemplateID
		SELECT @F_Log = @F_UserID + ''同步添加了物联应用（'' + F_AppName + ''）的设备（'' + @F_NodeName + ''）信息。'' FROM dbo.tb_A_IoTApp WHERE F_AppCode = @F_AppCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_RoleToTree]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_RoleToTree]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_RoleToTree]
	@F_RoleCode bigint,
	@F_EntityTreeNo int,
	@F_TreeStr varchar(max),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	
	DELETE FROM dbo.tb_A_RoleToTree WHERE F_RoleCode = @F_RoleCode AND F_EntityTreeNo = @F_EntityTreeNo
	INSERT INTO dbo.tb_A_RoleToTree SELECT @F_RoleCode,@F_EntityTreeNo,SUBSTRING(F_ObjectID,1,CHARINDEX(''_'',F_ObjectID,1)-1),SUBSTRING(F_ObjectID,CHARINDEX(''_'',F_ObjectID,1)+1,LEN(F_ObjectID)) FROM dbo.fun_SplitByComma(@F_TreeStr)
	SELECT @F_Log = @F_UserID + ''更新了角色（'' + F_RoleName + ''）的对象实例树权限。'' FROM dbo.tb_A_Role WHERE F_RoleCode = @F_RoleCode
	EXEC dbo.proc_A_WriteEventLog 8,@F_UserID,@F_IP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_IotNodeOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_IotNodeOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_IotNodeOperate]
	@OperFlg char(1),
	@F_NodeCode varchar(max),
	@F_NodeName varchar(128),
	@F_TemplateCode bigint,
	@F_IsVisible bit,
	@F_IsStorage bit,
	@F_EnergyTypeID varchar(32),
	@F_DeviceTypeID varchar(32),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_A_IoTNode
		(
			F_NodeCode,
			F_NodeName,
			F_TemplateCode,
			F_IsVisible,
			F_IsStorage,
			F_EnergyTypeID,
			F_DeviceTypeID
		)
		VALUES
		(
			dbo.fun_MakeSerialNum(),
			@F_NodeName,
			@F_TemplateCode,
			@F_IsVisible,
			@F_IsStorage,
			CASE @F_EnergyTypeID WHEN '''' THEN NULL ELSE @F_EnergyTypeID END,
			CASE @F_DeviceTypeID WHEN '''' THEN NULL ELSE @F_DeviceTypeID END
		)
		SET @F_Log = @F_UserID + ''添加了现场设备（'' + @F_NodeName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_IoTNode
		SET F_NodeName = CASE WHEN @F_NodeName = '''' THEN F_NodeName ELSE @F_NodeName END,
			F_TemplateCode = @F_TemplateCode,
			F_IsVisible = @F_IsVisible,
			F_IsStorage = @F_IsStorage,
			F_EnergyTypeID = CASE @F_EnergyTypeID WHEN '''' THEN NULL ELSE @F_EnergyTypeID END,
			F_DeviceTypeID = CASE @F_DeviceTypeID WHEN '''' THEN NULL ELSE @F_DeviceTypeID END
		WHERE F_NodeCode IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_NodeCode))
		UPDATE dbo.tb_B_EntityTreeModel 
		SET F_EntityName = CASE WHEN @F_NodeName = '''' THEN F_EntityName ELSE @F_NodeName END,
			F_NodeTemplate = @F_TemplateCode,
			F_TemplateID = CASE @F_DeviceTypeID WHEN '''' THEN NULL ELSE @F_DeviceTypeID END,
			F_EnergyTypeID = CASE @F_EnergyTypeID WHEN '''' THEN NULL ELSE @F_EnergyTypeID END,
			F_DeviceTypeID = CASE @F_DeviceTypeID WHEN '''' THEN NULL ELSE @F_DeviceTypeID END
		WHERE F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_NodeCode))
		SET @F_Log = @F_UserID + ''更新了现场设备（'' + @F_NodeName + ''）配置信息。''
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_UserID + ''删除了现场设备（'' + F_NodeName + ''）。'' FROM dbo.tb_A_IoTNode WHERE F_NodeCode = @F_NodeCode
		DELETE FROM dbo.tb_A_IoTNode WHERE F_NodeCode = @F_NodeCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_ImportNodeCsvFile]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_ImportNodeCsvFile]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_ImportNodeCsvFile]
	@EntityTreeNo int,
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DECLARE @F_NodeCode bigint
	DECLARE @F_NodeName varchar(128)
	DECLARE @F_ParentCode bigint
	DECLARE @F_NodeDepth int
	DECLARE @F_NodeTemplate varchar(128)
	DECLARE @F_ToEntity varchar(MAX)
	DECLARE @F_EnergyTypeID varchar(32)
	DECLARE @F_DeviceTypeID varchar(32)
	DECLARE @F_PropertyIdentifier varchar(32)
	DECLARE @F_PropertyValue varchar(512)
	DECLARE @F_IsVisible bit
	DECLARE @cur_node cursor
	DECLARE @cur_property cursor
	DECLARE @index int
	
	SET @index = 2
	UPDATE dbo.tb_A_IoTNodeTemp SET F_NodeDepth = @index WHERE F_ParentCode = ''0''
	WHILE @@ROWCOUNT <> 0
	BEGIN
		SET @index = @index + 1
		UPDATE dbo.tb_A_IoTNodeTemp SET F_NodeDepth = @index WHERE F_ParentCode IN (SELECT F_NodeCode FROM tb_A_IoTNodeTemp WHERE F_NodeDepth = @index - 1)
	END

	SET @cur_node = CURSOR forward_only static FOR SELECT A.F_NodeCode,A.F_NodeName,A.F_NodeDepth,A.F_NodeTemplate,A.F_ParentCode,A.F_ToEntity,A.F_EnergyTypeID,A.F_DeviceTypeID,B.F_IsVisible FROM dbo.tb_A_IoTNodeTemp A LEFT OUTER JOIN dbo.tb_A_IoTNode B ON A.F_NodeCode = B.F_NodeCode ORDER BY F_NodeDepth,F_NodeCode

	SET @F_ToEntity = ''''
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_NodeName,@F_NodeDepth,@F_NodeTemplate,@F_ParentCode,@F_ToEntity,@F_EnergyTypeID,@F_DeviceTypeID,@F_IsVisible
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @F_NodeDepth IS NULL SELECT @F_NodeDepth = F_EntityDepth + 1 FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @F_ParentCode
		IF NOT EXISTS(SELECT F_EntityID FROM tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @F_NodeCode)
		BEGIN
			IF @F_ParentCode = 0
			BEGIN
				INSERT INTO dbo.tb_B_EntityTreeModel
				(
					F_EntityTreeNo,
					F_EntityID,
					F_ParentID,
					F_EntityName,
					F_EntityDepth,
					F_ObjectGroup,
					F_TemplateID,
					F_NodeTemplate,
					F_EnergyTypeID,
					F_DeviceTypeID,
					F_IsHasChild,
					F_IsDisplay,
					F_OrderTag
				)
				SELECT
					@EntityTreeNo,
					@F_NodeCode,
					F_EntityID,
					@F_NodeName,
					@F_NodeDepth,
					CASE WHEN @F_EnergyTypeID IS NULL OR @F_EnergyTypeID = '''' THEN ''3'' ELSE ''2'' END,
					@F_DeviceTypeID,
					dbo.fun_GetNodeTemplateByName(@F_NodeTemplate),
					@F_EnergyTypeID,
					@F_DeviceTypeID,
					0,
					ISNULL(@F_IsVisible,1),
					@F_NodeCode
				FROM dbo.tb_B_EntityTreeModel
				WHERE F_EntityTreeNo = @EntityTreeNo
					AND F_ParentID = 0
				UPDATE dbo.tb_B_EntityTreeModel SET F_IsHasChild = 1 WHERE F_EntityTreeNo = @EntityTreeNo AND F_ParentID = 0
			END
			ELSE
			BEGIN
				INSERT INTO dbo.tb_B_EntityTreeModel
				(
					F_EntityTreeNo,
					F_EntityID,
					F_ParentID,
					F_EntityName,
					F_EntityDepth,
					F_ObjectGroup,
					F_TemplateID,
					F_NodeTemplate,
					F_EnergyTypeID,
					F_DeviceTypeID,
					F_IsHasChild,
					F_IsDisplay,
					F_OrderTag
				)
				VALUES
				(
					@EntityTreeNo,
					@F_NodeCode,
					@F_ParentCode,
					@F_NodeName,
					@F_NodeDepth,
					CASE WHEN @F_EnergyTypeID IS NULL OR @F_EnergyTypeID = '''' THEN ''3'' ELSE ''2'' END,
					@F_DeviceTypeID,
					dbo.fun_GetNodeTemplateByName(@F_NodeTemplate),
					@F_EnergyTypeID,
					@F_DeviceTypeID,
					0,
					ISNULL(@F_IsVisible,1),
					@F_NodeCode
				)
				UPDATE dbo.tb_B_EntityTreeModel SET F_IsHasChild = 1 WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @F_ParentCode
			END
		END
		ELSE
		BEGIN
			IF @F_ParentCode = 0
			BEGIN
				UPDATE dbo.tb_B_EntityTreeModel
				SET F_ParentID = (SELECT F_EntityID FROM  dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTreeNo AND F_ParentID = 0),
					F_EntityName = @F_NodeName,
					F_EntityDepth = @F_NodeDepth,
					F_ObjectGroup = CASE WHEN @F_EnergyTypeID IS NULL OR @F_EnergyTypeID = '''' THEN ''3'' ELSE ''2'' END,
					F_TemplateID = @F_DeviceTypeID,
					F_NodeTemplate = dbo.fun_GetNodeTemplateByName(@F_NodeTemplate),
					F_EnergyTypeID = @F_EnergyTypeID,
					F_DeviceTypeID = @F_DeviceTypeID,
					F_IsHasChild = 0,
					F_IsDisplay = ISNULL(@F_IsVisible,1)
				WHERE F_EntityTreeNo = @EntityTreeNo 
					AND F_EntityID = @F_NodeCode
				UPDATE dbo.tb_B_EntityTreeModel SET F_IsHasChild = 1 WHERE F_EntityTreeNo = @EntityTreeNo AND F_ParentID = 0
			END
			ELSE
			BEGIN
				UPDATE dbo.tb_B_EntityTreeModel
				SET F_ParentID = @F_ParentCode,
					F_EntityName = @F_NodeName,
					F_EntityDepth = @F_NodeDepth,
					F_ObjectGroup = CASE WHEN @F_EnergyTypeID IS NULL OR @F_EnergyTypeID = '''' THEN ''3'' ELSE ''2'' END,
					F_TemplateID = @F_DeviceTypeID,
					F_NodeTemplate = dbo.fun_GetNodeTemplateByName(@F_NodeTemplate),
					F_EnergyTypeID = @F_EnergyTypeID,
					F_DeviceTypeID = @F_DeviceTypeID,
					F_IsHasChild = 0,
					F_IsDisplay = ISNULL(@F_IsVisible,1)
				WHERE F_EntityTreeNo = @EntityTreeNo 
					AND F_EntityID = @F_NodeCode
				UPDATE dbo.tb_B_EntityTreeModel SET F_IsHasChild = 1 WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @F_ParentCode
			END
			IF NOT EXISTS(SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTreeNo AND F_ParentID = (SELECT F_ParentID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @F_NodeCode))
			BEGIN
				UPDATE dbo.tb_B_EntityTreeModel SET F_IsHasChild = 0 WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = (SELECT F_ParentID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @F_NodeCode)
			END
		END
		
		SET @cur_property = CURSOR forward_only static FOR SELECT F_PropertyIdentifier,F_PropertyValue FROM dbo.tb_A_IoTNodeTempV WHERE F_NodeCode = @F_NodeCode
		OPEN @cur_property
		FETCH NEXT FROM @cur_property INTO @F_PropertyIdentifier,@F_PropertyValue
		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC dbo.proc_B_EntityPropertyImport @EntityTreeNo,@F_NodeCode,@F_PropertyIdentifier,@F_PropertyValue,@UserName
			FETCH NEXT FROM @cur_property INTO @F_PropertyIdentifier,@F_PropertyValue
		END
		CLOSE @cur_property
		IF @F_ToEntity <> ''''
		BEGIN
			IF dbo.fun_GetNodeEnergyType(@F_NodeCode) IS NOT NULL
			BEGIN
				DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_NodeTreeNo = @EntityTreeNo AND F_NodeID = @F_NodeCode AND F_EndDate IS NULL AND F_EntityID NOT IN (SELECT F_ObjectID FROM dbo.fun_SplitBySemicolon(@F_ToEntity))
				INSERT INTO dbo.tb_B_EntityTreeMetering
				SELECT DISTINCT
					B.F_EntityTreeNo,
					B.F_EntityID,
					@EntityTreeNo,
					@F_NodeCode,
					ISNULL(dbo.fun_GetEntityMeteringStartDate(B.F_EntityTreeNo,B.F_EntityID,@EntityTreeNo),GETDATE()),
					NULL,
					1,
					0 
				FROM dbo.fun_SplitBySemicolon(@F_ToEntity) A,dbo.tb_B_EntityTreeModel B
				WHERE A.F_ObjectID NOT IN (SELECT F_EntityID FROM dbo.tb_B_EntityTreeMetering WHERE F_NodeTreeNo = @EntityTreeNo AND F_NodeID = @F_NodeCode AND F_EndDate IS NULL)
					AND A.F_ObjectID = B.F_EntityID
			END
			ELSE IF dbo.fun_GetNodeDeviceType(@F_NodeCode) IS NOT NULL
			BEGIN
				DELETE FROM dbo.tb_B_EntityTreeToDevice WHERE F_DeviceTreeNo = @EntityTreeNo AND F_DeviceID = @F_NodeCode
				INSERT INTO dbo.tb_B_EntityTreeToDevice
				SELECT DISTINCT
					B.F_EntityTreeNo,
					B.F_EntityID,
					@EntityTreeNo,
					@F_NodeCode
				FROM dbo.fun_SplitBySemicolon(@F_ToEntity) A,dbo.tb_B_EntityTreeModel B
				WHERE A.F_ObjectID = B.F_EntityID
			END
		END
		
		UPDATE dbo.tb_A_IoTNode SET F_NodeName = @F_NodeName,F_TemplateCode = dbo.fun_GetNodeTemplateByName(@F_NodeTemplate),F_ParentCode = @F_ParentCode,F_EnergyTypeID = @F_EnergyTypeID,F_DeviceTypeID = @F_DeviceTypeID WHERE F_NodeCode = @F_NodeCode
		UPDATE dbo.tb_B_EntityTreeType SET F_TreeDepth = @F_NodeDepth WHERE F_EntityTreeNo = @EntityTreeNo AND (F_TreeDepth IS NULL OR @F_NodeDepth > F_TreeDepth)
		
		SELECT @F_Log = @UserName + ''导入了模型（'' + F_EntityTreeName + ''）设备关系中的设备（'' + @F_NodeName + ''）。IP:'' + @VistorIP FROM dbo.tb_B_EntityTreeType WHERE F_EntityTreeNo = @EntityTreeNo
		EXEC dbo.proc_A_WriteEventLog 5,@UserName,@VistorIP,@F_Log

		SET @F_ToEntity = ''''
		FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_NodeName,@F_NodeDepth,@F_NodeTemplate,@F_ParentCode,@F_ToEntity,@F_EnergyTypeID,@F_DeviceTypeID,@F_IsVisible
	END
	DEALLOCATE @cur_property
	CLOSE @cur_node
	DEALLOCATE @cur_node
	INSERT INTO dbo.tb_A_ImportFile SELECT dbo.fun_MakeSerialNum(),F_FileName,@UserName,GETDATE(),@EntityTreeNo FROM dbo.tb_A_ImportTemp WHERE F_FileNum = 1
	DELETE FROM tb_A_ImportTemp
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_DeviationOperate]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_DeviationOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_DeviationOperate]
	@F_NodeCode bigint,
	@F_ValueLabel varchar(32),
	@F_DeviationValue numeric(18,2),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF NOT EXISTS(SELECT F_NodeCode FROM dbo.tb_A_DeviationValue WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel)
	BEGIN
		INSERT INTO dbo.tb_A_DeviationValue
		(
			F_NodeCode,
			F_ValueLabel,
			F_DeviationValue,
			F_CorrectionTime
		)
		VALUES
		(
			@F_NodeCode,
			@F_ValueLabel,
			@F_DeviationValue,
			GETDATE()
		)
		
		SELECT @F_Log = @F_UserID + ''对设备（'' + F_NodeName + ''）的变量（'' + @F_ValueLabel + ''）修正了偏差值'' + CAST(@F_DeviationValue AS VARCHAR) FROM dbo.tb_A_IoTNode WHERE F_NodeCode = @F_NodeCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE
	BEGIN
		UPDATE dbo.tb_A_DeviationValue
		SET F_DeviationValue = @F_DeviationValue,
			F_CorrectionTime = GETDATE()
		WHERE F_NodeCode = @F_NodeCode
			AND F_ValueLabel = @F_ValueLabel
		SELECT @F_Log = @F_UserID + ''对设备（'' + F_NodeName + ''）的变量（'' + @F_ValueLabel + ''）更新了偏差值'' + CAST(@F_DeviationValue AS VARCHAR) FROM dbo.tb_A_IoTNode WHERE F_NodeCode = @F_NodeCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_WriteEventAlarm]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_WriteEventAlarm]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_WriteEventAlarm]
	@F_TypeNo int,
	@F_ItemNo varchar(16),
	@F_Rank int,
	@F_ObjectType bigint,
	@F_ObjectCode varchar(32),
	@F_ValueLabel varchar(32),
	@F_ProjectNo varchar(16),
	@F_Detail varchar(512)
AS
BEGIN
	DECLARE @SerialNum bigint
	SELECT @SerialNum = F_SerialCode + 1 FROM dbo.tb_A_EventStamp
	IF @SerialNum IS NULL
	BEGIN
		SET @SerialNum = CAST(DATEDIFF(s,''1970-01-01'',GETDATE()) AS bigint)
		INSERT INTO dbo.tb_A_EventStamp VALUES (@SerialNum)
	END
	ELSE UPDATE dbo.tb_A_EventStamp SET F_SerialCode = @SerialNum
	
	INSERT INTO dbo.tb_A_Event
	(
		F_EventCode,
		F_DateTime,
		F_TypeNo,
		F_ItemNo,
		F_Rank,
		F_ObjectType,
		F_ObjectCode,
		F_ValueLabel,
		F_ProjectNo,
		F_Detail
	)
	VALUES
	(
		@SerialNum,
		GETDATE(),
		@F_TypeNo,
		CASE @F_ItemNo WHEN '''' THEN NULL ELSE @F_ItemNo END,
		@F_Rank,
		@F_ObjectType,
		CASE @F_ObjectCode WHEN '''' THEN NULL ELSE @F_ObjectCode END,
		CASE @F_ValueLabel WHEN '''' THEN NULL ELSE @F_ValueLabel END,
		CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
		@F_Detail
	)
	
	SELECT @SerialNum AS F_EventCode
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_ProjectToEParam]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_ProjectToEParam]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_ProjectToEParam]
	@F_ProjectNo bigint,
	@F_EnergyType bigint,
	@F_ParamStr varchar(max)
AS
BEGIN
	IF @F_ParamStr <> ''''
	BEGIN
		DELETE FROM dbo.tb_A_ProjectToEParam WHERE F_ProjectNo = @F_ProjectNo AND F_EnergyType = @F_EnergyType
		INSERT INTO dbo.tb_A_ProjectToEParam SELECT @F_ProjectNo,@F_EnergyType,F_ObjectID FROM dbo.fun_SplitByComma(@F_ParamStr)
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_ProjectToDParam]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_ProjectToDParam]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_ProjectToDParam]
	@F_ProjectNo bigint,
	@F_DeviceType bigint,
	@F_ParamStr varchar(max)
AS
BEGIN
	IF @F_ParamStr <> ''''
	BEGIN
		DELETE FROM dbo.tb_A_ProjectToDParam WHERE F_ProjectNo = @F_ProjectNo AND F_DeviceType = @F_DeviceType
		INSERT INTO dbo.tb_A_ProjectToDParam SELECT @F_ProjectNo,@F_DeviceType,F_ObjectID FROM dbo.fun_SplitByComma(@F_ParamStr)
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_ProjectOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_ProjectOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_ProjectOperate]
	@OperFlg char(1),
	@F_ProjectNo int,
	@F_ProjectName varchar(32),
	@F_ProjectAbbr varchar(16),
	@F_ProjectTag varchar(16),
	@F_ProjectType varchar(32),
	@F_ProjectDes varchar(128),
	@F_SystemFunction varchar(32),
	@F_GuideFunction varchar(32)
AS
BEGIN
	IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_A_Project
		(
			F_ProjectNo,
			F_ProjectName,
			F_ProjectAbbr,
			F_ProjectTag,
			F_ProjectType,
			F_ProjectDes,
			F_SystemFunction
		)
		VALUES
		(
			@F_ProjectNo,
			@F_ProjectName,
			@F_ProjectAbbr,
			@F_ProjectTag,
			@F_ProjectType,
			@F_ProjectDes,
			CASE @F_SystemFunction WHEN '''' THEN NULL ELSE @F_SystemFunction END
		)
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_Project
		SET F_ProjectName = @F_ProjectName,
			F_ProjectAbbr = @F_ProjectAbbr,
			F_ProjectTag = @F_ProjectTag,
			F_ProjectType = @F_ProjectType,
			F_ProjectDes = @F_ProjectDes,
			F_SystemFunction = CASE @F_SystemFunction WHEN '''' THEN NULL ELSE @F_SystemFunction END,
			F_GuideFunction = CASE @F_GuideFunction WHEN '''' THEN NULL ELSE @F_GuideFunction END
		WHERE F_ProjectNo = @F_ProjectNo
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		DELETE FROM dbo.tb_A_Project WHERE F_ProjectNo = @F_ProjectNo
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_PluginToTree]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_PluginToTree]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_PluginToTree]
	@F_FunctionCode bigint,
	@F_PluginCode bigint,
	@F_EntityTreeNo int,
	@F_ToType varchar(1),
	@F_OperType bit
AS
BEGIN
	IF @F_ToType = ''1''
	BEGIN
		IF EXISTS(SELECT F_EntityTreeNo FROM dbo.tb_A_PluginToTree WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode)
		BEGIN
			UPDATE dbo.tb_A_PluginToTree SET F_EntityTreeNo = @F_EntityTreeNo WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode
			DELETE FROM dbo.tb_A_PluginToCustom WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo <> @F_EntityTreeNo
		END
		ELSE
			INSERT INTO dbo.tb_A_PluginToTree VALUES (@F_FunctionCode,@F_PluginCode,@F_EntityTreeNo)
	END
	ELSE IF @F_ToType = ''N''
	BEGIN
		IF @F_OperType = 1
			INSERT INTO dbo.tb_A_PluginToTree VALUES (@F_FunctionCode,@F_PluginCode,@F_EntityTreeNo)
		ELSE IF @F_OperType = 0
			DELETE FROM dbo.tb_A_PluginToTree WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo = @F_EntityTreeNo
	END		
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_PluginToTemplate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_PluginToTemplate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_PluginToTemplate]
	@F_FunctionCode bigint,
	@F_PluginCode bigint,
	@F_TemplateCode bigint,
	@F_OperType bit
AS
BEGIN
	IF @F_OperType = 1
		INSERT INTO dbo.tb_A_PluginToTemplate VALUES (@F_FunctionCode,@F_PluginCode,@F_TemplateCode)
	ELSE IF @F_OperType = 0
		DELETE FROM dbo.tb_A_PluginToTemplate WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_TemplateCode = @F_TemplateCode
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_PluginToEnergy]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_PluginToEnergy]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_PluginToEnergy]
	@F_FunctionCode bigint,
	@F_PluginCode bigint,
	@F_EnergyCode bigint,
	@F_OperType bit
AS
BEGIN
	IF @F_OperType = 1
		INSERT INTO dbo.tb_A_PluginToEnergy VALUES (@F_FunctionCode,@F_PluginCode,@F_EnergyCode)
	ELSE IF @F_OperType = 0
		DELETE FROM dbo.tb_A_PluginToEnergy WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EnergyCode = @F_EnergyCode
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_PluginToDevice]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_PluginToDevice]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_PluginToDevice]
	@F_FunctionCode bigint,
	@F_PluginCode bigint,
	@F_DeviceCode bigint,
	@F_OperType bit
AS
BEGIN
	IF @F_OperType = 1
		INSERT INTO dbo.tb_A_PluginToDevice VALUES (@F_FunctionCode,@F_PluginCode,@F_DeviceCode)
	ELSE IF @F_OperType = 0
		DELETE FROM dbo.tb_A_PluginToDevice WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_DeviceCode = @F_DeviceCode
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_PluginToCustom]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_PluginToCustom]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_PluginToCustom]
	@F_FunctionCode bigint,
	@F_PluginCode bigint,
	@F_EntityTreeNo int,
	@F_TemplateID bigint,
	@F_ParentProperty varchar(32)
AS
BEGIN
	IF @F_ParentProperty = ''''
	BEGIN
		DELETE FROM dbo.tb_A_PluginToCustom WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo = @F_EntityTreeNo AND F_TemplateID = @F_TemplateID
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT F_ParentProperty FROM dbo.tb_A_PluginToCustom WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo = @F_EntityTreeNo AND F_TemplateID = @F_TemplateID)
		BEGIN
			UPDATE dbo.tb_A_PluginToCustom SET F_ParentProperty = @F_ParentProperty WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo = @F_EntityTreeNo AND F_TemplateID = @F_TemplateID
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_A_PluginToCustom
			(
				F_FunctionCode,
				F_PluginCode,
				F_EntityTreeNo,
				F_TemplateID,
				F_ParentProperty
			)
			VALUES
			(
				@F_FunctionCode,
				@F_PluginCode,
				@F_EntityTreeNo,
				@F_TemplateID,
				@F_ParentProperty
			)
		END
	END	
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetLogList]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetLogList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetLogList]
	@F_TypeNo varchar(16),
	@F_KeyWord varchar(32),
	@F_BeginDate varchar(32),
	@F_EndDate varchar(32)
AS
BEGIN
	IF @F_TypeNo = ''''
	BEGIN
		IF @F_KeyWord = ''''
		BEGIN
			SELECT 
				ROW_NUMBER()OVER(ORDER BY B.F_TypeNo,A.F_DateTime DESC) AS F_RowNum,
				A.F_LogCode,
				B.F_TypeName,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				CASE WHEN A.F_TypeNo = 1 OR A.F_TypeNo = 13 THEN N''后台任务'' ELSE A.F_UserID END AS F_UserID,
				CASE WHEN A.F_TypeNo = 1 OR A.F_TypeNo = 13 THEN N''系统服务器'' ELSE A.F_IP END AS F_IP,
				A.F_LogDetail 
			FROM dbo.tb_A_Log A,
				dbo.tb_A_LogType B
			WHERE A.F_TypeNo = B.F_TypeNo 
				AND CONVERT(varchar(10),A.F_DateTime,120) BETWEEN @F_BeginDate AND @F_EndDate
			ORDER BY B.F_TypeNo,A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				ROW_NUMBER()OVER(ORDER BY B.F_TypeNo,A.F_DateTime DESC) AS F_RowNum,
				A.F_LogCode,
				B.F_TypeName,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				CASE WHEN A.F_TypeNo = 1 OR A.F_TypeNo = 13 THEN N''后台任务'' ELSE A.F_UserID END AS F_UserID,
				CASE WHEN A.F_TypeNo = 1 OR A.F_TypeNo = 13 THEN N''系统服务器'' ELSE A.F_IP END AS F_IP,
				A.F_LogDetail 
			FROM dbo.tb_A_Log A,
				dbo.tb_A_LogType B
			WHERE A.F_TypeNo = B.F_TypeNo 
				AND CONVERT(varchar(10),A.F_DateTime,120) BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_LogDetail LIKE ''%'' + @F_KeyWord + ''%''
			ORDER BY B.F_TypeNo,A.F_DateTime DESC
		END
	END
	ELSE
	BEGIN
		IF @F_KeyWord = ''''
		BEGIN
			SELECT 
				ROW_NUMBER()OVER(ORDER BY B.F_TypeNo,A.F_DateTime DESC) AS F_RowNum,
				A.F_LogCode,
				B.F_TypeName,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				CASE WHEN A.F_TypeNo = 1 OR A.F_TypeNo = 13 THEN N''后台任务'' ELSE A.F_UserID END AS F_UserID,
				CASE WHEN A.F_TypeNo = 1 OR A.F_TypeNo = 13 THEN N''系统服务器'' ELSE A.F_IP END AS F_IP,
				A.F_LogDetail 
			FROM dbo.tb_A_Log A,
				dbo.tb_A_LogType B
			WHERE A.F_TypeNo = @F_TypeNo
				AND A.F_TypeNo = B.F_TypeNo 
				AND CONVERT(varchar(10),A.F_DateTime,120) BETWEEN @F_BeginDate AND @F_EndDate
			ORDER BY B.F_TypeNo,A.F_DateTime DESC
		END
		ELSE
		BEGIN
			SELECT 
				ROW_NUMBER()OVER(ORDER BY B.F_TypeNo,A.F_DateTime DESC) AS F_RowNum,
				A.F_LogCode,
				B.F_TypeName,
				CONVERT(varchar,A.F_DateTime,120) AS F_DateTime,
				CASE WHEN A.F_TypeNo = 1 OR A.F_TypeNo = 13 THEN N''后台任务'' ELSE A.F_UserID END AS F_UserID,
				CASE WHEN A.F_TypeNo = 1 OR A.F_TypeNo = 13 THEN N''系统服务器'' ELSE A.F_IP END AS F_IP,
				A.F_LogDetail 
			FROM dbo.tb_A_Log A,
				dbo.tb_A_LogType B
			WHERE A.F_TypeNo = @F_TypeNo
				AND A.F_TypeNo = B.F_TypeNo 
				AND CONVERT(varchar(10),A.F_DateTime,120) BETWEEN @F_BeginDate AND @F_EndDate
				AND A.F_LogDetail LIKE ''%'' + @F_KeyWord + ''%''
			ORDER BY B.F_TypeNo,A.F_DateTime DESC
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetPlanSqlScript]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetPlanSqlScript]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetPlanSqlScript]
	@F_SysStr varchar(max),
	@F_SysMenuStr varchar(max)
AS
BEGIN
	SELECT 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_PlanTask'' AS F_Table,
		''F_TaskCode,F_TaskName,F_TaskTag,F_ProjectNo,F_FunctionCode,F_TaskType,F_YearTime,F_MonthTime,F_DayTime,F_WeekDay,F_WeekTime,F_CycleTime,F_LatelyDate'' AS F_Fields,
		CAST(F_TaskCode AS VARCHAR) + '','''''' + F_TaskName + '''''','''''' + F_TaskTag + '''''','' + ISNULL(CAST(F_ProjectNo AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_FunctionCode AS VARCHAR),''NULL'') + '','''''' + F_TaskType + '''''','''''' + ISNULL(F_YearTime,'''') + '''''','''''' + ISNULL(F_MonthTime,'''') + '''''','''''' + ISNULL(F_DayTime,'''') + '''''','' + ISNULL(CAST(F_WeekDay AS VARCHAR),''NULL'') + '','''''' + ISNULL(F_WeekTime,'''') + '''''','' + ISNULL(CAST(F_CycleTime AS VARCHAR),''NULL'') + '',NULL'' AS F_Values 
	FROM dbo.tb_A_PlanTask
	WHERE F_ProjectNo IS NULL
	UNION
	SELECT 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_PlanTask'' AS F_Table,
		''F_TaskCode,F_TaskName,F_TaskTag,F_ProjectNo,F_FunctionCode,F_TaskType,F_YearTime,F_MonthTime,F_DayTime,F_WeekDay,F_WeekTime,F_CycleTime,F_LatelyDate'' AS F_Fields,
		CAST(F_TaskCode AS VARCHAR) + '','''''' + F_TaskName + '''''','''''' + F_TaskTag + '''''','' + ISNULL(CAST(F_ProjectNo AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_FunctionCode AS VARCHAR),''NULL'') + '','''''' + F_TaskType + '''''','''''' + ISNULL(F_YearTime,'''') + '''''','''''' + ISNULL(F_MonthTime,'''') + '''''','''''' + ISNULL(F_DayTime,'''') + '''''','' + ISNULL(CAST(F_WeekDay AS VARCHAR),''NULL'') + '','''''' + ISNULL(F_WeekTime,'''') + '''''','' + ISNULL(CAST(F_CycleTime AS VARCHAR),''NULL'') + '',NULL'' AS F_Values 
	FROM dbo.tb_A_PlanTask
	WHERE F_ProjectNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_SysStr)) AND F_FunctionCode IS NULL
	UNION
	SELECT 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_PlanTask'' AS F_Table,
		''F_TaskCode,F_TaskName,F_TaskTag,F_ProjectNo,F_FunctionCode,F_TaskType,F_YearTime,F_MonthTime,F_DayTime,F_WeekDay,F_WeekTime,F_CycleTime,F_LatelyDate'' AS F_Fields,
		CAST(F_TaskCode AS VARCHAR) + '','''''' + F_TaskName + '''''','''''' + F_TaskTag + '''''','' + ISNULL(CAST(F_ProjectNo AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_FunctionCode AS VARCHAR),''NULL'') + '','''''' + F_TaskType + '''''','''''' + ISNULL(F_YearTime,'''') + '''''','''''' + ISNULL(F_MonthTime,'''') + '''''','''''' + ISNULL(F_DayTime,'''') + '''''','' + ISNULL(CAST(F_WeekDay AS VARCHAR),''NULL'') + '','''''' + ISNULL(F_WeekTime,'''') + '''''','' + ISNULL(CAST(F_CycleTime AS VARCHAR),''NULL'') + '',NULL'' AS F_Values 
	FROM dbo.tb_A_PlanTask
	WHERE F_ProjectNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_SysStr)) AND F_FunctionCode IN (SELECT SUBSTRING(F_ObjectID,1,CHARINDEX(''_'',F_ObjectID) - 1) FROM dbo.fun_SplitByComma(@F_SysMenuStr))
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetNodeCalendarData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetNodeCalendarData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetNodeCalendarData]
	@F_EntityID bigint, 
	@F_ValueLabel varchar(32),
	@F_StartDate date,
	@F_EndDate date
AS
BEGIN
	SELECT
		CONVERT(VARCHAR,A.F_DateTime,120) AS F_DayDate,
		CAST(B.F_EnergyData as numeric(18,2)) AS F_EnergyData,
		CAST(B.F_WorkingData as numeric(18,2)) AS F_WorkingData,
		CAST(B.F_UnWorkingData as numeric(18,2)) AS F_UnWorkingData,
		CAST(B.F_FlexibleData as numeric(18,2)) AS F_FlexibleData
	FROM dbo.fun_SplitDayDate(@F_StartDate,@F_EndDate) A
		LEFT OUTER JOIN tb_C_NodeDayData B
		ON B.F_NodeCode = @F_EntityID AND B.F_ValueLabel = @F_ValueLabel AND A.F_DateTime = B.F_ReadingDate
	ORDER BY A.F_DateTime
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_RenameEntityTree]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_RenameEntityTree]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_RenameEntityTree]
	@F_FunctionCode bigint,
	@F_PluginCode bigint,
	@F_EntityTreeNo int, 
	@F_EntityTreeRename varchar(64)
AS
BEGIN
	IF @F_EntityTreeRename = '''' DELETE FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo = @F_EntityTreeNo
	ELSE IF EXISTS(SELECT F_EntityTreeNo FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo = @F_EntityTreeNo)
		UPDATE dbo.tb_A_PluginToEntityRename SET F_EntityTreeRename = @F_EntityTreeRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode AND F_EntityTreeNo = @F_EntityTreeNo
	ELSE INSERT INTO dbo.tb_A_PluginToEntityRename VALUES (@F_FunctionCode,@F_PluginCode,@F_EntityTreeNo,@F_EntityTreeRename)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_GetDispatchTaskList]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_GetDispatchTaskList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_GetDispatchTaskList]
	@F_TaskType varchar(32),
	@F_BeginDate datetime2(0),
	@F_EndDate datetime2(0)
AS
BEGIN
	IF @F_TaskType = ''''
	BEGIN
		SELECT 
			ROW_NUMBER()OVER(ORDER BY A.F_TaskType,A.F_DispatchTime DESC) AS F_RowNum,
			A.F_TaskCode,
			A.F_TaskType,
			A.F_TaskDetail,
			A.F_TaskStatus,
			CONVERT(varchar,A.F_DispatchTime,120) AS F_DispatchTime,
			CONVERT(varchar,A.F_ExpectedTime,120) AS F_ExpectedTime,
			B.F_UserName,
			A.F_DispatchUser,
			CONVERT(varchar,A.F_FinishTime,120) AS F_FinishTime,
			A.F_PreImage,
			A.F_PostImage,
			ISNULL(A.F_PreDes,'''') AS F_PreDes,
			ISNULL(A.F_PostDes,'''') AS F_PostDes,
			ISNULL(A.F_UnableDes,'''') AS F_UnableDes,
			A.F_PushStatus,
			ISNULL(A.F_ProjectNo,'''') AS F_ProjectNo
		FROM dbo.tb_D_DispatchTask A,
			dbo.tb_A_LoginUser B
		WHERE A.F_DispatchTime BETWEEN @F_BeginDate AND @F_EndDate
			AND A.F_DispatchUser = B.F_UserCode
		ORDER BY A.F_TaskType,A.F_DispatchTime DESC
	END
	ELSE
	BEGIN
		SELECT 
			ROW_NUMBER()OVER(ORDER BY A.F_TaskType,A.F_DispatchTime DESC) AS F_RowNum,
			A.F_TaskCode,
			A.F_TaskType,
			A.F_TaskDetail,
			A.F_TaskStatus,
			CONVERT(varchar,A.F_DispatchTime,120) AS F_DispatchTime,
			CONVERT(varchar,A.F_ExpectedTime,120) AS F_ExpectedTime,
			B.F_UserName,
			A.F_DispatchUser,
			CONVERT(varchar,A.F_FinishTime,120) AS F_FinishTime,
			A.F_PreImage,
			A.F_PostImage,
			ISNULL(A.F_PreDes,'''') AS F_PreDes,
			ISNULL(A.F_PostDes,'''') AS F_PostDes,
			ISNULL(A.F_UnableDes,'''') AS F_UnableDes,
			A.F_PushStatus,
			ISNULL(A.F_ProjectNo,'''') AS F_ProjectNo
		FROM dbo.tb_D_DispatchTask A,
			dbo.tb_A_LoginUser B
		WHERE A.F_TaskType = @F_TaskType
			AND A.F_DispatchTime BETWEEN @F_BeginDate AND @F_EndDate
			AND A.F_DispatchUser = B.F_UserCode
		ORDER BY A.F_TaskType,A.F_DispatchTime DESC
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_GetSysDispatchTaskList]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_GetSysDispatchTaskList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_GetSysDispatchTaskList]
	@F_ProjectNo bigint,
	@F_TaskType varchar(32),
	@F_BeginDate datetime2(0),
	@F_EndDate datetime2(0)
AS
BEGIN
	IF @F_TaskType = ''''
	BEGIN
		SELECT 
			ROW_NUMBER()OVER(ORDER BY A.F_TaskType,A.F_DispatchTime DESC) AS F_RowNum,
			A.F_TaskCode,
			A.F_TaskType,
			A.F_TaskDetail,
			A.F_TaskStatus,
			CONVERT(varchar,A.F_DispatchTime,120) AS F_DispatchTime,
			CONVERT(varchar,A.F_ExpectedTime,120) AS F_ExpectedTime,
			B.F_UserName,
			A.F_DispatchUser,
			CONVERT(varchar,A.F_FinishTime,120) AS F_FinishTime,
			A.F_PreImage,
			A.F_PostImage,
			ISNULL(A.F_PreDes,'''') AS F_PreDes,
			ISNULL(A.F_PostDes,'''') AS F_PostDes,
			ISNULL(A.F_UnableDes,'''') AS F_UnableDes,
			A.F_PushStatus,
			ISNULL(A.F_ProjectNo,'''') AS F_ProjectNo
		FROM dbo.tb_D_DispatchTask A,
			dbo.tb_A_LoginUser B
		WHERE A.F_DispatchTime BETWEEN @F_BeginDate AND @F_EndDate
			AND A.F_ProjectNo = @F_ProjectNo
			AND A.F_DispatchUser = B.F_UserCode
		ORDER BY A.F_TaskType,A.F_DispatchTime DESC
	END
	ELSE
	BEGIN
		SELECT 
			ROW_NUMBER()OVER(ORDER BY A.F_TaskType,A.F_DispatchTime DESC) AS F_RowNum,
			A.F_TaskCode,
			A.F_TaskType,
			A.F_TaskDetail,
			A.F_TaskStatus,
			CONVERT(varchar,A.F_DispatchTime,120) AS F_DispatchTime,
			CONVERT(varchar,A.F_ExpectedTime,120) AS F_ExpectedTime,
			B.F_UserName,
			A.F_DispatchUser,
			CONVERT(varchar,A.F_FinishTime,120) AS F_FinishTime,
			A.F_PreImage,
			A.F_PostImage,
			ISNULL(A.F_PreDes,'''') AS F_PreDes,
			ISNULL(A.F_PostDes,'''') AS F_PostDes,
			ISNULL(A.F_UnableDes,'''') AS F_UnableDes,
			A.F_PushStatus,
			ISNULL(A.F_ProjectNo,'''') AS F_ProjectNo
		FROM dbo.tb_D_DispatchTask A,
			dbo.tb_A_LoginUser B
		WHERE A.F_TaskType = @F_TaskType
			AND A.F_DispatchTime BETWEEN @F_BeginDate AND @F_EndDate
			AND A.F_ProjectNo = @F_ProjectNo
			AND A.F_DispatchUser = B.F_UserCode
		ORDER BY A.F_TaskType,A.F_DispatchTime DESC
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_GetStorageLogList]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_GetStorageLogList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_GetStorageLogList]
	@F_BeginDate date,
	@F_EndDate date
AS
BEGIN
	SELECT 
		ROW_NUMBER()OVER(ORDER BY F_DateTime DESC) AS F_RowNum,
		CAST(F_LogCode AS BIGINT) AS F_LogCode,
		CASE F_LogType WHEN ''init_data'' THEN ''原始数据'' WHEN ''hour_data'' THEN ''小时数据'' WHEN ''log_file'' THEN ''日志文件'' END AS F_LogType,
		CONVERT(varchar,F_DateTime,120) AS F_DateTime,
		F_LogDetail 
	FROM dbo.tb_D_StorageLog
	WHERE CAST(F_DateTime AS DATE) BETWEEN @F_BeginDate AND @F_EndDate
	ORDER BY F_DateTime DESC
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_E_CityWeatherOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_E_CityWeatherOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_E_CityWeatherOperate]
	@F_CityCode char(9),
	@F_TempLowValue numeric(18,1),
	@F_TempHighValue numeric(18,1),
	@F_Humidity varchar(32),
	@F_AQI int
AS
BEGIN
	DELETE FROM dbo.tb_E_CityDayWeather WHERE F_CityCode = @F_CityCode AND F_DataDate = GETDATE()
	INSERT INTO dbo.tb_E_CityDayWeather VALUES (@F_CityCode,GETDATE(),@F_TempLowValue,@F_TempHighValue,@F_Humidity,@F_AQI)
END
' 
END
GO
/****** Object:  Table [dbo].[tb_A_Function]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_Function]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_Function](
	[F_FunctionCode] [bigint] NOT NULL,
	[F_FunctionName] [varchar](64) NULL,
	[F_FunctionTag] [varchar](64) NULL,
	[F_FunctionTypeNo] [varchar](1) NULL,
	[F_PluginCode] [bigint] NULL,
	[F_CreateUser] [bigint] NULL,
	[F_CreateDate] [datetime2](0) NULL,
	[F_UpdateUser] [bigint] NULL,
	[F_UpdateDate] [datetime2](0) NULL,
 CONSTRAINT [PK_tb_A_Function] PRIMARY KEY CLUSTERED 
(
	[F_FunctionCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_ProjectToMenu]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToMenu]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_ProjectToMenu](
	[F_ProjectNo] [bigint] NOT NULL,
	[F_MenuCode] [bigint] NOT NULL,
	[F_MenuTag] [varchar](32) NOT NULL,
	[F_MenuName] [varchar](32) NULL,
	[F_MenuAbbr] [varchar](32) NULL,
	[F_MenuType] [char](1) NULL,
	[F_MenuIndex] [int] NULL,
	[F_MenuPosition] [varchar](1) NULL,
	[F_IsHasChild] [bit] NULL,
	[F_ParentCode] [bigint] NULL,
	[F_FunctionCode] [bigint] NULL,
 CONSTRAINT [PK_tb_A_ProjectToMenu] PRIMARY KEY CLUSTERED 
(
	[F_ProjectNo] ASC,
	[F_MenuCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_ProjectToHelp]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToHelp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_ProjectToHelp](
	[F_ProjectNo] [bigint] NOT NULL,
	[F_MenuCode] [bigint] NOT NULL,
	[F_MenuTag] [varchar](32) NOT NULL,
	[F_MenuName] [varchar](32) NULL,
	[F_MenuType] [char](1) NULL,
	[F_MenuIndex] [int] NULL,
	[F_IsHasChild] [bit] NULL,
	[F_ParentCode] [bigint] NULL,
 CONSTRAINT [PK_tb_A_ProjectToHelp] PRIMARY KEY CLUSTERED 
(
	[F_ProjectNo] ASC,
	[F_MenuCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[tb_A_PluginEnvVar]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_PluginEnvVar]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_PluginEnvVar](
	[F_PluginCode] [bigint] NOT NULL,
	[F_EnvVarKey] [varchar](50) NOT NULL,
 CONSTRAINT [PK_tb_A_PluginEnvVar] PRIMARY KEY CLUSTERED 
(
	[F_PluginCode] ASC,
	[F_EnvVarKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyTplValueOrder]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyTplValueOrder]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyTplValueOrder] (
	@F_EnergyTypeID bigint,
	@F_ValueLabel varchar(32)
) RETURNS int
BEGIN
	DECLARE @F_OrderNum int
	
	SELECT 
		@F_OrderNum = MIN(A.F_OrderNum) 
	FROM dbo.tb_A_Value A,
	(
		SELECT DISTINCT
			F_NodeTemplate AS F_TemplateCode
		FROM dbo.tb_B_EntityTreeModel
		WHERE F_EnergyTypeID = @F_EnergyTypeID
			AND F_NodeTemplate IS NOT NULL
	) B 
	WHERE A.F_ValueLabel = @F_ValueLabel
		AND A.F_TemplateCode = B.F_TemplateCode 
	RETURN @F_OrderNum
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEnergyTplValueUnit]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEnergyTplValueUnit]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEnergyTplValueUnit] (
	@F_EnergyTypeID bigint,
	@F_ValueLabel varchar(32)
) RETURNS nvarchar(16)
BEGIN
	DECLARE @F_Unit nvarchar(16)
	
	SELECT 
		@F_Unit = A.F_Unit
	FROM dbo.tb_A_Value A,
	(
		SELECT DISTINCT
			F_NodeTemplate AS F_TemplateCode
		FROM dbo.tb_B_EntityTreeModel
		WHERE F_EnergyTypeID = @F_EnergyTypeID
			AND F_NodeTemplate IS NOT NULL
	) B 
	WHERE A.F_ValueLabel = @F_ValueLabel
		AND A.F_TemplateCode = B.F_TemplateCode 
		AND A.F_Unit <> ''''
	RETURN ISNULL(@F_Unit,'''')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEnergyDistinctParam]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEnergyDistinctParam]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEnergyDistinctParam]
	@F_EnergyTypeID bigint,
	@F_Param_type varchar(1),
	@F_ProjectNo varchar(32)
AS
BEGIN
	IF @F_Param_type = ''''
	BEGIN
		IF @F_ProjectNo = ''''
		BEGIN
			SELECT
				T.F_ValueLabel,
				T.F_ValueName,
				T.F_ValueType,
				dbo.fun_GetEnergyTplValueUnit(@F_EnergyTypeID,T.F_ValueLabel) AS F_Unit
			FROM
			(
				SELECT DISTINCT 
					T.F_ValueLabel,
					STUFF((
						SELECT DISTINCT 
							'','' + A.F_ValueName 
						FROM dbo.tb_A_Value A,
							(
								SELECT DISTINCT
									F_NodeTemplate AS F_TemplateCode
								FROM dbo.tb_B_EntityTreeModel
								WHERE F_EnergyTypeID = @F_EnergyTypeID
									AND F_NodeTemplate IS NOT NULL
							) B 
						WHERE A.F_TemplateCode = B.F_TemplateCode 
							AND A.F_ValueLabel = T.F_ValueLabel
						FOR XML PATH('''') ),1,1,'''') AS F_ValueName,
					T.F_ValueType
				FROM 
				(
					SELECT 
						A.F_ValueLabel,
						A.F_ValueType
					FROM dbo.tb_A_Value A,
						(
							SELECT DISTINCT
								F_NodeTemplate AS F_TemplateCode
							FROM dbo.tb_B_EntityTreeModel
							WHERE F_EnergyTypeID = @F_EnergyTypeID
								AND F_NodeTemplate IS NOT NULL
						) B 
					WHERE A.F_TemplateCode = B.F_TemplateCode
						AND A.F_IsDisplay = 1 
					GROUP BY A.F_ValueLabel,A.F_ValueType
				) T 
			) T
			ORDER BY dbo.fun_GetEnergyTplValueOrder(@F_EnergyTypeID,T.F_ValueLabel)
		END
		ELSE
		BEGIN
			SELECT
				T1.F_ValueLabel,
				T1.F_ValueName,
				T1.F_ValueType,
				dbo.fun_GetEnergyTplValueUnit(@F_EnergyTypeID,T1.F_ValueLabel) AS F_Unit
			FROM
			(
				SELECT DISTINCT 
					T.F_ValueLabel,
					STUFF((
						SELECT DISTINCT 
							'','' + A.F_ValueName 
						FROM dbo.tb_A_Value A,
							(
								SELECT DISTINCT
									F_NodeTemplate AS F_TemplateCode
								FROM dbo.tb_B_EntityTreeModel
								WHERE F_EnergyTypeID = @F_EnergyTypeID
									AND F_NodeTemplate IS NOT NULL
							) B 
						WHERE A.F_TemplateCode = B.F_TemplateCode 
							AND A.F_ValueLabel = T.F_ValueLabel
						FOR XML PATH('''') ),1,1,'''') AS F_ValueName,
					T.F_ValueType
				FROM 
				(
					SELECT 
						A.F_ValueLabel,
						A.F_ValueType
					FROM dbo.tb_A_Value A,
						(
							SELECT DISTINCT
								F_NodeTemplate AS F_TemplateCode
							FROM dbo.tb_B_EntityTreeModel
							WHERE F_EnergyTypeID = @F_EnergyTypeID
								AND F_NodeTemplate IS NOT NULL
						) B 
					WHERE A.F_TemplateCode = B.F_TemplateCode
						AND A.F_IsDisplay = 1 
					GROUP BY A.F_ValueLabel,A.F_ValueType
				) T 
			) T1,dbo.tb_A_ProjectToEParam T2
			WHERE T2.F_ProjectNo = @F_ProjectNo
				AND T2.F_EnergyType = @F_EnergyTypeID
				AND T2.F_ValueLabel = T1.F_ValueLabel
			ORDER BY dbo.fun_GetEnergyTplValueOrder(@F_EnergyTypeID,T1.F_ValueLabel)
		END
	END
	ELSE
	BEGIN
		IF @F_ProjectNo = ''''
		BEGIN
			SELECT
				T.F_ValueLabel,
				T.F_ValueName,
				T.F_ValueType,
				dbo.fun_GetEnergyTplValueUnit(@F_EnergyTypeID,T.F_ValueLabel) AS F_Unit
			FROM
			(
				SELECT DISTINCT 
					T.F_ValueLabel,
					STUFF((
						SELECT DISTINCT 
							'','' + A.F_ValueName 
						FROM dbo.tb_A_Value A,
							(
								SELECT DISTINCT
									F_NodeTemplate AS F_TemplateCode
								FROM dbo.tb_B_EntityTreeModel
								WHERE F_EnergyTypeID = @F_EnergyTypeID
									AND F_NodeTemplate IS NOT NULL
							) B  
						WHERE A.F_TemplateCode = B.F_TemplateCode 
							AND A.F_ValueLabel = T.F_ValueLabel 
							AND A.F_ValueType = @F_Param_type
						FOR XML PATH('''') ),1,1,'''') AS F_ValueName,
					T.F_ValueType
				FROM 
				(
					SELECT 
						A.F_ValueLabel,
						A.F_ValueType
					FROM dbo.tb_A_Value A,
						(
							SELECT DISTINCT
								F_NodeTemplate AS F_TemplateCode
							FROM dbo.tb_B_EntityTreeModel
							WHERE F_EnergyTypeID = @F_EnergyTypeID
								AND F_NodeTemplate IS NOT NULL
						) B 
					WHERE A.F_TemplateCode = B.F_TemplateCode 
						AND A.F_ValueType = @F_Param_type
						AND A.F_IsDisplay = 1 
					GROUP BY A.F_ValueLabel,A.F_ValueType
				) T 
			) T
			ORDER BY dbo.fun_GetEnergyTplValueOrder(@F_EnergyTypeID,T.F_ValueLabel)
		END
		ELSE
		BEGIN
			SELECT
				T1.F_ValueLabel,
				T1.F_ValueName,
				T1.F_ValueType,
				dbo.fun_GetEnergyTplValueUnit(@F_EnergyTypeID,T1.F_ValueLabel) AS F_Unit
			FROM
			(
				SELECT DISTINCT 
					T.F_ValueLabel,
					STUFF((
						SELECT DISTINCT 
							'','' + A.F_ValueName 
						FROM dbo.tb_A_Value A,
							(
								SELECT DISTINCT
									F_NodeTemplate AS F_TemplateCode
								FROM dbo.tb_B_EntityTreeModel
								WHERE F_EnergyTypeID = @F_EnergyTypeID
									AND F_NodeTemplate IS NOT NULL
							) B  
						WHERE A.F_TemplateCode = B.F_TemplateCode 
							AND A.F_ValueLabel = T.F_ValueLabel 
							AND A.F_ValueType = @F_Param_type
						FOR XML PATH('''') ),1,1,'''') AS F_ValueName,
					T.F_ValueType
				FROM 
				(
					SELECT 
						A.F_ValueLabel,
						A.F_ValueType
					FROM dbo.tb_A_Value A,
						(
							SELECT DISTINCT
								F_NodeTemplate AS F_TemplateCode
							FROM dbo.tb_B_EntityTreeModel
							WHERE F_EnergyTypeID = @F_EnergyTypeID
								AND F_NodeTemplate IS NOT NULL
						) B 
					WHERE A.F_TemplateCode = B.F_TemplateCode 
						AND A.F_ValueType = @F_Param_type
						AND A.F_IsDisplay = 1 
					GROUP BY A.F_ValueLabel,A.F_ValueType
				) T 
			) T1,dbo.tb_A_ProjectToEParam T2
			WHERE T2.F_ProjectNo = @F_ProjectNo
				AND T2.F_EnergyType = @F_EnergyTypeID
				AND T2.F_ValueLabel = T1.F_ValueLabel
			ORDER BY dbo.fun_GetEnergyTplValueOrder(@F_EnergyTypeID,T1.F_ValueLabel)
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEnergyDetailStatis]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEnergyDetailStatis]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEnergyDetailStatis] 
	@EntityID bigint,				-- 建筑、部门或表具对象
	@StartDate date,				-- 起始日期yyyy-MM-dd
	@EndDate date,					-- 截止日期yyyy-MM-dd
	@StartTime time(0),				-- 起始时间hh:mm:ss
	@EndTime time(0),				-- 截至时间hh:mm:ss
	@TimeType smallint,				-- 时间区分，1: 连续 2：切段
	@EnergyTypeID bigint,			-- 能源内部编码
	@DataGranularity varchar(32),	-- 1：总量 2：物理分项 3：管理分项
	@ValueLabel varchar(32),		-- 参数标签
	@OrderBy smallint,				-- 排序规则，1：时间升序 2：（值）升序 3：（值）降序
	@FilterBy smallint,				-- 过滤规则，1：不过滤 2：>= 3：<=
	@FilterValue numeric(18,4),		-- 过滤基准
	@SGroupBy smallint				-- 时间方式，1：时间分组 2：时间汇总
AS
BEGIN
	DECLARE @F_ObjectGroup varchar(1)
	DECLARE @F_ValueType varchar(1)
	DECLARE @TempYear int
	DECLARE @SqlText varchar(max)
	
	SET @DataGranularity = CASE WHEN @DataGranularity = ''1'' THEN '''' WHEN @DataGranularity = ''2'' THEN ''P_EnergyItem'' WHEN @DataGranularity = ''3'' THEN ''P_EnergyProperty'' END
	SET @SqlText = ''''
	SELECT @F_ObjectGroup = F_ObjectGroup FROM dbo.tb_B_EntityTreeModel WHERE F_EntityID = @EntityID
	SELECT TOP 1 @F_ValueType = F_ValueType FROM dbo.tb_A_Value A,tb_B_EntityTreeModel B WHERE B.F_EnergyTypeID = @EnergyTypeID AND A.F_ValueLabel = @ValueLabel AND A.F_TemplateCode = B.F_NodeTemplate
	IF @F_ObjectGroup = ''1''
	BEGIN
		IF @F_ValueType = ''1''
		BEGIN
			SET @SqlText = 
			''SELECT ''
				+ ''A.F_NodeID,A.F_MeteringBit,''
				+ ''dbo.fun_GetEntityPathName(A.F_NodeID) AS F_NodeName,''
				+ CASE @SGroupBy WHEN 1 THEN ''A.F_DayDate AS F_ReadingDate,'' WHEN 2 THEN '''' END
				+ ''SUM(B.F_EnergyData) AS F_DataValue,''
				+ ''MIN(B.F_StartHour) AS F_StartHour,''
				+ ''MIN(B.F_StartValue) AS F_StartValue,''
				+ ''MAX(B.F_EndHour) AS F_EndHour,''
				+ ''MAX(B.F_EndValue) AS F_EndValue, ''
				+ ''MAX(A.F_Rate) AS F_Rate ''
			+ ''FROM dbo.fun_GetFilterMeteringNode('' + CAST(@EntityID AS VARCHAR) + '','' + CAST(@EnergyTypeID AS VARCHAR) + '','''''' + @DataGranularity + '''''','''''' + CAST(@StartDate AS VARCHAR) + '''''','''''' + CAST(@EndDate AS VARCHAR) + '''''') A ''
				+ ''LEFT OUTER JOIN dbo.tb_C_NodeHourData B ''
				+ ''ON A.F_NodeID = B.F_NodeCode AND B.F_ValueLabel = '''''' + @ValueLabel + ''''''''
				+ '' AND '' + CASE @TimeType WHEN 1 THEN ''CAST(B.F_ReadingDate AS DATE) = A.F_DayDate AND B.F_ReadingDate BETWEEN '''''' + CAST(@StartDate AS VARCHAR) + '' '' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndDate AS VARCHAR) + '' '' + CAST(@EndTime AS VARCHAR) + '''''' '' WHEN 2 THEN ''CAST(B.F_ReadingDate AS DATE) = A.F_DayDate AND CAST(B.F_ReadingDate AS TIME(0)) BETWEEN '''''' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndTime AS VARCHAR) + '''''' '' END
			+ CASE @SGroupBy WHEN 1 THEN ''GROUP BY A.F_NodeID,A.F_MeteringBit,A.F_DayDate '' WHEN 2 THEN ''GROUP BY A.F_NodeID,A.F_MeteringBit '' END
			+ ''HAVING '' + CASE @FilterBy WHEN 1 THEN ''1=1'' WHEN 2 THEN ''SUM(B.F_EnergyData) >= '' + CAST(@FilterValue AS VARCHAR) WHEN 3 THEN ''SUM(B.F_EnergyData) <= '' + CAST(@FilterValue AS VARCHAR) END + '' ''
			+ CASE @SGroupBy WHEN 1 THEN CASE @OrderBy WHEN 1 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID),A.F_MeteringBit DESC,A.F_DayDate'' WHEN 2 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID),A.F_MeteringBit DESC,SUM(B.F_EnergyData)'' WHEN 3 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID),A.F_MeteringBit DESC,SUM(B.F_EnergyData) DESC'' END WHEN 2 THEN CASE @OrderBy WHEN 1 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID),A.F_MeteringBit DESC'' WHEN 2 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID),A.F_MeteringBit DESC,SUM(B.F_EnergyData)'' WHEN 3 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID),A.F_MeteringBit DESC,SUM(B.F_EnergyData) DESC'' END END	
		END
		ELSE IF @F_ValueType = ''2''
		BEGIN
			SET @SqlText = 
			''SELECT ''
				+ ''A.F_NodeID,''
				+ ''dbo.fun_GetEntityPathName(A.F_NodeID) AS F_NodeName,''
				+ ''A.F_OrderTag,''
				+ CASE @SGroupBy WHEN 1 THEN ''A.F_DayDate AS F_ReadingDate,'' WHEN 2 THEN '''' END
				+ ''MAX(B.F_MaxValue) AS F_MaxData,''
				+ ''MIN(B.F_MinValue) AS F_MinData,''
				+ ''AVG(B.F_AvgValue) AS F_AvgData ''
			+ ''FROM dbo.fun_GetFilterMeteringNode('' + CAST(@EntityID AS VARCHAR) + '','' + CAST(@EnergyTypeID AS VARCHAR) + '','''''' + @DataGranularity + '''''','''''' + CAST(@StartDate AS VARCHAR) + '''''','''''' + CAST(@EndDate AS VARCHAR) + '''''') A ''
				+ ''LEFT OUTER JOIN dbo.tb_C_InstantDayData B ''
				+ ''ON A.F_NodeID = B.F_NodeCode AND B.F_ValueLabel = '''''' + @ValueLabel + ''''''''
				+ '' AND B.F_ReadingDate = A.F_DayDate ''
			+ CASE @SGroupBy WHEN 1 THEN ''GROUP BY A.F_NodeID,A.F_DayDate '' WHEN 2 THEN ''GROUP BY A.F_NodeID '' END
			+ CASE @SGroupBy WHEN 1 THEN CASE @OrderBy WHEN 1 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID),A.F_DayDate'' WHEN 2 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID)'' WHEN 3 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID)'' END WHEN 2 THEN CASE @OrderBy WHEN 1 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID)'' WHEN 2 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID)'' WHEN 3 THEN ''ORDER BY dbo.fun_GetEntityOrderTag(A.F_NodeID)'' END END	
		END
	END
	ELSE IF @F_ObjectGroup = ''2''
	BEGIN
		IF @F_ValueType = ''1''
		BEGIN
			IF YEAR(@StartDate) = YEAR(@EndDate) AND OBJECT_ID(''dbo.tb_C_InitialMData_'' + CAST(YEAR(@StartDate) AS VARCHAR)) IS NOT NULL
			BEGIN
				SET @SqlText = 
				''SELECT ''
					+ ''CONVERT(VARCHAR,F_ReadingDate,120) AS F_ReadingDate,''
					+ ''F_DataValue ''
				+ ''FROM dbo.tb_C_InitialMData_'' + CAST(YEAR(@StartDate) AS VARCHAR)
				+ '' WHERE F_NodeCode = '' + CAST(@EntityID AS VARCHAR)
					+ '' AND F_ValueLabel = '''''' + @ValueLabel + ''''''''
					+ '' AND '' + CASE @TimeType WHEN 1 THEN ''F_ReadingDate BETWEEN '''''' + CAST(@StartDate AS VARCHAR) + '' '' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndDate AS VARCHAR) + '' '' + CAST(@EndTime AS VARCHAR) + '''''' '' WHEN 2 THEN ''CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@StartDate AS VARCHAR) + '''''' AND '''''' +  CAST(@EndDate AS VARCHAR) + '''''' AND CAST(F_ReadingDate AS TIME(0)) BETWEEN '''''' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndTime AS VARCHAR) + '''''' '' END
					+ '' AND '' + CASE @FilterBy WHEN 1 THEN ''1=1'' WHEN 2 THEN ''F_DataValue >= '' + CAST(@FilterValue AS VARCHAR) WHEN 3 THEN ''F_DataValue <= '' + CAST(@FilterValue AS VARCHAR) END + '' ''
				+ CASE @OrderBy WHEN 1 THEN ''ORDER BY F_ReadingDate'' WHEN 2 THEN ''ORDER BY F_DataValue'' WHEN 3 THEN ''ORDER BY F_DataValue DESC'' END
			END
			ELSE
			BEGIN
				SET @TempYear = YEAR(@StartDate)
				WHILE @TempYear <= YEAR(@EndDate)
				BEGIN
					IF @SqlText = ''''
					BEGIN
						IF @TempYear = YEAR(@StartDate)
						BEGIN
							IF OBJECT_ID(''tb_C_InitialMData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
							BEGIN
								SET @SqlText = 
									''SELECT ''
										+ ''CONVERT(VARCHAR,F_ReadingDate,120) AS F_ReadingDate,''
										+ ''F_DataValue ''
									+ ''FROM dbo.tb_C_InitialMData_'' + CAST(@TempYear AS VARCHAR)
									+ '' WHERE F_NodeCode = '' + CAST(@EntityID AS VARCHAR)
										+ '' AND F_ValueLabel = '''''' + @ValueLabel + ''''''''
										+ '' AND '' + CASE @TimeType WHEN 1 THEN ''F_ReadingDate BETWEEN '''''' + CAST(@StartDate AS VARCHAR) + '' '' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(YEAR(@StartDate) AS VARCHAR) + ''-12-31 23:59:59'''' '' WHEN 2 THEN ''CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@StartDate AS VARCHAR) + '''''' AND '''''' +  CAST(YEAR(@StartDate) AS VARCHAR) + ''-12-31'''' AND CAST(F_ReadingDate AS TIME(0)) BETWEEN '''''' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndTime AS VARCHAR) + '''''' '' END
										+ '' AND '' + CASE @FilterBy WHEN 1 THEN ''1=1'' WHEN 2 THEN ''F_DataValue >= '' + CAST(@FilterValue AS VARCHAR) WHEN 3 THEN ''F_DataValue <= '' + CAST(@FilterValue AS VARCHAR) END + '' ''
							END
						END
						ELSE IF @TempYear = YEAR(@EndDate)
						BEGIN
							IF OBJECT_ID(''tb_C_InitialMData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
							BEGIN
								SET @SqlText = 
									''SELECT ''
										+ ''CONVERT(VARCHAR,F_ReadingDate,120) AS F_ReadingDate,''
										+ ''F_DataValue ''
									+ ''FROM dbo.tb_C_InitialMData_'' + CAST(@TempYear AS VARCHAR)
									+ '' WHERE F_NodeCode = '' + CAST(@EntityID AS VARCHAR)
										+ '' AND F_ValueLabel = '''''' + @ValueLabel + ''''''''
										+ '' AND '' + CASE @TimeType WHEN 1 THEN ''F_ReadingDate BETWEEN '''''' + CAST(YEAR(@EndDate) AS VARCHAR) + ''-01-01 00:00:00'''' AND '''''' +  CAST(@EndDate AS VARCHAR) + '' '' + CAST(@EndTime AS VARCHAR) + '''''' '' WHEN 2 THEN ''CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(YEAR(@EndDate) AS VARCHAR) + ''-01-01'''' AND '''''' +  CAST(@EndDate AS VARCHAR) + '''''' AND CAST(F_ReadingDate AS TIME(0)) BETWEEN '''''' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndTime AS VARCHAR) + '''''' '' END
										+ '' AND '' + CASE @FilterBy WHEN 1 THEN ''1=1'' WHEN 2 THEN ''F_DataValue >= '' + CAST(@FilterValue AS VARCHAR) WHEN 3 THEN ''F_DataValue <= '' + CAST(@FilterValue AS VARCHAR) END + '' ''
							END
						END
						ELSE
						BEGIN
							IF OBJECT_ID(''tb_C_InitialMData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
							BEGIN
								SET @SqlText = 
									''SELECT ''
										+ ''CONVERT(VARCHAR,F_ReadingDate,120) AS F_ReadingDate,''
										+ ''F_DataValue ''
									+ ''FROM dbo.tb_C_InitialMData_'' + CAST(@TempYear AS VARCHAR)
									+ '' WHERE F_NodeCode = '' + CAST(@EntityID AS VARCHAR)
										+ '' AND F_ValueLabel = '''''' + @ValueLabel + ''''''''
										+ '' AND '' + CASE @TimeType WHEN 1 THEN ''F_ReadingDate BETWEEN '''''' + CAST(@TempYear AS VARCHAR) + ''-01-01 00:00:00'''' AND '''''' +  CAST(@TempYear AS VARCHAR) + ''-12-31 23:59:59'''' '' WHEN 2 THEN ''CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@TempYear AS VARCHAR) + ''-01-01'''' AND '''''' +  CAST(@TempYear AS VARCHAR) + ''-12-31'''' AND CAST(F_ReadingDate AS TIME(0)) BETWEEN '''''' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndTime AS VARCHAR) + '''''' '' END
										+ '' AND '' + CASE @FilterBy WHEN 1 THEN ''1=1'' WHEN 2 THEN ''F_DataValue >= '' + CAST(@FilterValue AS VARCHAR) WHEN 3 THEN ''F_DataValue <= '' + CAST(@FilterValue AS VARCHAR) END + '' ''
							END
						END
					END
					ELSE
					BEGIN
						IF @TempYear = YEAR(@StartDate)
						BEGIN
							IF OBJECT_ID(''tb_C_InitialMData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
							BEGIN
								SET @SqlText = @SqlText + 
									'' UNION ''
									+ ''SELECT ''
										+ ''CONVERT(VARCHAR,F_ReadingDate,120) AS F_ReadingDate,''
										+ ''F_DataValue ''
									+ ''FROM dbo.tb_C_InitialMData_'' + CAST(YEAR(@StartDate) AS VARCHAR)
									+ '' WHERE F_NodeCode = '' + CAST(@EntityID AS VARCHAR)
										+ '' AND F_ValueLabel = '''''' + @ValueLabel + ''''''''
										+ '' AND '' + CASE @TimeType WHEN 1 THEN ''F_ReadingDate BETWEEN '''''' + CAST(@StartDate AS VARCHAR) + '' '' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(YEAR(@StartDate) AS VARCHAR) + ''-12-31 23:59:59'''' '' WHEN 2 THEN ''CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@StartDate AS VARCHAR) + '''''' AND '''''' +  CAST(YEAR(@StartDate) AS VARCHAR) + ''-12-31'''' AND CAST(F_ReadingDate AS TIME(0)) BETWEEN '''''' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndTime AS VARCHAR) + '''''' '' END
										+ '' AND '' + CASE @FilterBy WHEN 1 THEN ''1=1'' WHEN 2 THEN ''F_DataValue >= '' + CAST(@FilterValue AS VARCHAR) WHEN 3 THEN ''F_DataValue <= '' + CAST(@FilterValue AS VARCHAR) END + '' ''
							END
						END
						ELSE IF @TempYear = YEAR(@EndDate)
						BEGIN
							IF OBJECT_ID(''tb_C_InitialMData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
							BEGIN
								SET @SqlText = @SqlText + 
									'' UNION ''
									+ ''SELECT ''
										+ ''CONVERT(VARCHAR,F_ReadingDate,120) AS F_ReadingDate,''
										+ ''F_DataValue ''
									+ ''FROM dbo.tb_C_InitialMData_'' + CAST(YEAR(@EndDate) AS VARCHAR)
									+ '' WHERE F_NodeCode = '' + CAST(@EntityID AS VARCHAR)
										+ '' AND F_ValueLabel = '''''' + @ValueLabel + ''''''''
										+ '' AND '' + CASE @TimeType WHEN 1 THEN ''F_ReadingDate BETWEEN '''''' + CAST(YEAR(@EndDate) AS VARCHAR) + ''-01-01 00:00:00'''' AND '''''' +  CAST(@EndDate AS VARCHAR) + '' '' + CAST(@EndTime AS VARCHAR) + '''''' '' WHEN 2 THEN ''CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(YEAR(@EndDate) AS VARCHAR) + ''-01-01'''' AND '''''' +  CAST(@EndDate AS VARCHAR) + '''''' AND CAST(F_ReadingDate AS TIME(0)) BETWEEN '''''' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndTime AS VARCHAR) + '''''' '' END
										+ '' AND '' + CASE @FilterBy WHEN 1 THEN ''1=1'' WHEN 2 THEN ''F_DataValue >= '' + CAST(@FilterValue AS VARCHAR) WHEN 3 THEN ''F_DataValue <= '' + CAST(@FilterValue AS VARCHAR) END + '' ''
							END
						END
						ELSE
						BEGIN
							IF OBJECT_ID(''tb_C_InitialMData_'' + CAST(@TempYear AS VARCHAR)) IS NOT NULL
							BEGIN
								SET @SqlText = @SqlText + 
									'' UNION ''
									+ ''SELECT ''
										+ ''CONVERT(VARCHAR,F_ReadingDate,120) AS F_ReadingDate,''
										+ ''F_DataValue ''
									+ ''FROM dbo.tb_C_InitialMData_'' + CAST(@TempYear AS VARCHAR)
									+ '' WHERE F_NodeCode = '' + CAST(@EntityID AS VARCHAR)
										+ '' AND F_ValueLabel = '''''' + @ValueLabel + ''''''''
										+ '' AND '' + CASE @TimeType WHEN 1 THEN ''F_ReadingDate BETWEEN '''''' + CAST(@TempYear AS VARCHAR) + ''-01-01 00:00:00'''' AND '''''' +  CAST(@TempYear AS VARCHAR) + ''-12-31 23:59:59'''' '' WHEN 2 THEN ''CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@TempYear AS VARCHAR) + ''-01-01'''' AND '''''' +  CAST(@TempYear AS VARCHAR) + ''-12-31'''' AND CAST(F_ReadingDate AS TIME(0)) BETWEEN '''''' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndTime AS VARCHAR) + '''''' '' END
										+ '' AND '' + CASE @FilterBy WHEN 1 THEN ''1=1'' WHEN 2 THEN ''F_DataValue >= '' + CAST(@FilterValue AS VARCHAR) WHEN 3 THEN ''F_DataValue <= '' + CAST(@FilterValue AS VARCHAR) END + '' ''
							END
						END
					END
					SET @TempYear = @TempYear + 1
				END
				IF @SqlText <> '''' SET @SqlText = @SqlText + CASE @OrderBy WHEN 1 THEN ''ORDER BY F_ReadingDate'' WHEN 2 THEN ''ORDER BY F_DataValue'' WHEN 3 THEN ''ORDER BY F_DataValue DESC'' END
			END
		END
		ELSE IF @F_ValueType = ''2''
		BEGIN
			IF YEAR(@StartDate) = YEAR(@EndDate) AND OBJECT_ID(''dbo.tb_C_InitialPData_'' + CAST(YEAR(@StartDate) AS VARCHAR)) IS NOT NULL
			BEGIN
				SET @SqlText = 
				''SELECT ''
					+ ''CONVERT(VARCHAR,F_ReadingDate,120) AS F_ReadingDate,''
					+ ''F_DataValue ''
				+ ''FROM dbo.tb_C_InitialPData_'' + CAST(YEAR(@StartDate) AS VARCHAR)
				+ '' WHERE F_NodeCode = '' + CAST(@EntityID AS VARCHAR)
					+ '' AND F_ValueLabel = '''''' + @ValueLabel + ''''''''
					+ '' AND '' + CASE @TimeType WHEN 1 THEN ''F_ReadingDate BETWEEN '''''' + CAST(@StartDate AS VARCHAR) + '' '' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndDate AS VARCHAR) + '' '' + CAST(@EndTime AS VARCHAR) + '''''' '' WHEN 2 THEN ''CAST(F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@StartDate AS VARCHAR) + '''''' AND '''''' +  CAST(@EndDate AS VARCHAR) + '''''' AND CAST(F_ReadingDate AS TIME(0)) BETWEEN '''''' + CAST(@StartTime AS VARCHAR) + '''''' AND '''''' +  CAST(@EndTime AS VARCHAR) + '''''' '' END
					+ '' AND '' + CASE @FilterBy WHEN 1 THEN ''1=1'' WHEN 2 THEN ''F_DataValue >= '' + CAST(@FilterValue AS VARCHAR) WHEN 3 THEN ''F_DataValue <= '' + CAST(@FilterValue AS VARCHAR) END + '' ''
				+ CASE @OrderBy WHEN 1 THEN ''ORDER BY F_ReadingDate'' WHEN 2 THEN ''ORDER BY F_DataValue'' WHEN 3 THEN ''ORDER BY F_DataValue DESC'' END
			END
		END
	END
	EXEC (@SqlText)
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetDeviceTplValueOrder]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetDeviceTplValueOrder]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetDeviceTplValueOrder] (
	@F_DeviceTypeID bigint,
	@F_ValueLabel varchar(32)
) RETURNS int
BEGIN
	DECLARE @F_OrderNum int
	
	SELECT 
		@F_OrderNum = MIN(A.F_OrderNum) 
	FROM dbo.tb_A_Value A,
	(
		SELECT DISTINCT
			F_NodeTemplate AS F_TemplateCode
		FROM dbo.tb_B_EntityTreeModel
		WHERE F_DeviceTypeID = @F_DeviceTypeID
			AND F_NodeTemplate IS NOT NULL
	) B 
	WHERE A.F_ValueLabel = @F_ValueLabel
		AND A.F_TemplateCode = B.F_TemplateCode 
	RETURN @F_OrderNum
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetDeviceTplValueUnit]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetDeviceTplValueUnit]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetDeviceTplValueUnit] (
	@F_DeviceTypeID bigint,
	@F_ValueLabel varchar(32)
) RETURNS nvarchar(16)
BEGIN
	DECLARE @F_Unit nvarchar(16)
	
	SELECT 
		@F_Unit = A.F_Unit
	FROM dbo.tb_A_Value A,
	(
		SELECT DISTINCT
			F_NodeTemplate AS F_TemplateCode
		FROM dbo.tb_B_EntityTreeModel
		WHERE F_DeviceTypeID = @F_DeviceTypeID
			AND F_NodeTemplate IS NOT NULL
	) B 
	WHERE A.F_ValueLabel = @F_ValueLabel
		AND A.F_TemplateCode = B.F_TemplateCode 
		AND A.F_Unit <> ''''
	RETURN ISNULL(@F_Unit,'''')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetDeviceDistinctParam]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetDeviceDistinctParam]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetDeviceDistinctParam]
	@F_DeviceTypeID bigint,
	@F_Param_type varchar(1),
	@F_ProjectNo varchar(32)
AS
BEGIN
	IF @F_Param_type = ''''
	BEGIN
		IF @F_ProjectNo = ''''
		BEGIN
			SELECT
				T.F_ValueLabel,
				T.F_ValueName,
				T.F_ValueType,
				dbo.fun_GetDeviceTplValueUnit(@F_DeviceTypeID,T.F_ValueLabel) AS F_Unit
			FROM
			(
				SELECT DISTINCT 
					T.F_ValueLabel,
					STUFF((
						SELECT DISTINCT 
							'','' + A.F_ValueName 
						FROM dbo.tb_A_Value A,
							(
								SELECT DISTINCT
									F_NodeTemplate AS F_TemplateCode
								FROM dbo.tb_B_EntityTreeModel
								WHERE F_DeviceTypeID = @F_DeviceTypeID
									AND F_NodeTemplate IS NOT NULL
							) B  
						WHERE A.F_TemplateCode = B.F_TemplateCode 
							AND A.F_ValueLabel = T.F_ValueLabel
						FOR XML PATH('''') ),1,1,'''') AS F_ValueName,
					T.F_ValueType
				FROM 
				(
					SELECT 
						A.F_ValueLabel,
						A.F_ValueType
					FROM dbo.tb_A_Value A,
						(
							SELECT DISTINCT
								F_NodeTemplate AS F_TemplateCode
							FROM dbo.tb_B_EntityTreeModel
							WHERE F_DeviceTypeID = @F_DeviceTypeID
								AND F_NodeTemplate IS NOT NULL
						) B   
					WHERE A.F_TemplateCode = B.F_TemplateCode
						AND A.F_IsDisplay = 1 
					GROUP BY A.F_ValueLabel,A.F_ValueType
				) T 
			) T
			ORDER BY dbo.fun_GetDeviceTplValueOrder(@F_DeviceTypeID,T.F_ValueLabel)
		END
		ELSE
		BEGIN
			SELECT
				T1.F_ValueLabel,
				T1.F_ValueName,
				T1.F_ValueType,
				dbo.fun_GetDeviceTplValueUnit(@F_DeviceTypeID,T1.F_ValueLabel) AS F_Unit
			FROM
			(
				SELECT DISTINCT 
					T.F_ValueLabel,
					STUFF((
						SELECT DISTINCT 
							'','' + A.F_ValueName 
						FROM dbo.tb_A_Value A,
							(
								SELECT DISTINCT
									F_NodeTemplate AS F_TemplateCode
								FROM dbo.tb_B_EntityTreeModel
								WHERE F_DeviceTypeID = @F_DeviceTypeID
									AND F_NodeTemplate IS NOT NULL
							) B  
						WHERE A.F_TemplateCode = B.F_TemplateCode 
							AND A.F_ValueLabel = T.F_ValueLabel
						FOR XML PATH('''') ),1,1,'''') AS F_ValueName,
					T.F_ValueType
				FROM 
				(
					SELECT 
						A.F_ValueLabel,
						A.F_ValueType
					FROM dbo.tb_A_Value A,
						(
							SELECT DISTINCT
								F_NodeTemplate AS F_TemplateCode
							FROM dbo.tb_B_EntityTreeModel
							WHERE F_DeviceTypeID = @F_DeviceTypeID
								AND F_NodeTemplate IS NOT NULL
						) B   
					WHERE A.F_TemplateCode = B.F_TemplateCode
						AND A.F_IsDisplay = 1 
					GROUP BY A.F_ValueLabel,A.F_ValueType
				) T 
			) T1,dbo.tb_A_ProjectToDParam T2
			WHERE T2.F_ProjectNo = @F_ProjectNo
				AND T2.F_DeviceType = @F_DeviceTypeID
				AND T2.F_ValueLabel = T1.F_ValueLabel
			ORDER BY dbo.fun_GetDeviceTplValueOrder(@F_DeviceTypeID,T1.F_ValueLabel)
		END
	END
	ELSE
	BEGIN
		IF @F_ProjectNo = ''''
		BEGIN
			SELECT
				T.F_ValueLabel,
				T.F_ValueName,
				T.F_ValueType,
				dbo.fun_GetDeviceTplValueUnit(@F_DeviceTypeID,T.F_ValueLabel) AS F_Unit
			FROM
			(
				SELECT DISTINCT 
					T.F_ValueLabel,
					STUFF((
						SELECT DISTINCT 
							'','' + A.F_ValueName 
						FROM dbo.tb_A_Value A,
							(
								SELECT DISTINCT
									F_NodeTemplate AS F_TemplateCode
								FROM dbo.tb_B_EntityTreeModel
								WHERE F_DeviceTypeID = @F_DeviceTypeID
									AND F_NodeTemplate IS NOT NULL
							) B    
						WHERE A.F_TemplateCode = B.F_TemplateCode 
							AND A.F_ValueLabel = T.F_ValueLabel 
							AND A.F_ValueType = @F_Param_type
						FOR XML PATH('''') ),1,1,'''') AS F_ValueName,
					T.F_ValueType
				FROM 
				(
					SELECT 
						A.F_ValueLabel,
						A.F_ValueType
					FROM dbo.tb_A_Value A,
						(
							SELECT DISTINCT
								F_NodeTemplate AS F_TemplateCode
							FROM dbo.tb_B_EntityTreeModel
							WHERE F_DeviceTypeID = @F_DeviceTypeID
								AND F_NodeTemplate IS NOT NULL
						) B
					WHERE A.F_TemplateCode = B.F_TemplateCode 
						AND A.F_ValueType = @F_Param_type
						AND A.F_IsDisplay = 1 
					GROUP BY A.F_ValueLabel,A.F_ValueType
				) T 
			) T
			ORDER BY dbo.fun_GetDeviceTplValueOrder(@F_DeviceTypeID,T.F_ValueLabel)
		END
		ELSE
		BEGIN
			SELECT
				T1.F_ValueLabel,
				T1.F_ValueName,
				T1.F_ValueType,
				dbo.fun_GetDeviceTplValueUnit(@F_DeviceTypeID,T1.F_ValueLabel) AS F_Unit
			FROM
			(
				SELECT DISTINCT 
					T.F_ValueLabel,
					STUFF((
						SELECT DISTINCT 
							'','' + A.F_ValueName 
						FROM dbo.tb_A_Value A,
							(
								SELECT DISTINCT
									F_NodeTemplate AS F_TemplateCode
								FROM dbo.tb_B_EntityTreeModel
								WHERE F_DeviceTypeID = @F_DeviceTypeID
									AND F_NodeTemplate IS NOT NULL
							) B    
						WHERE A.F_TemplateCode = B.F_TemplateCode 
							AND A.F_ValueLabel = T.F_ValueLabel 
							AND A.F_ValueType = @F_Param_type
						FOR XML PATH('''') ),1,1,'''') AS F_ValueName,
					T.F_ValueType
				FROM 
				(
					SELECT 
						A.F_ValueLabel,
						A.F_ValueType
					FROM dbo.tb_A_Value A,
						(
							SELECT DISTINCT
								F_NodeTemplate AS F_TemplateCode
							FROM dbo.tb_B_EntityTreeModel
							WHERE F_DeviceTypeID = @F_DeviceTypeID
								AND F_NodeTemplate IS NOT NULL
						) B
					WHERE A.F_TemplateCode = B.F_TemplateCode 
						AND A.F_ValueType = @F_Param_type
						AND A.F_IsDisplay = 1 
					GROUP BY A.F_ValueLabel,A.F_ValueType
				) T 
			) T1,dbo.tb_A_ProjectToDParam T2
			WHERE T2.F_ProjectNo = @F_ProjectNo
				AND T2.F_DeviceType = @F_DeviceTypeID
				AND T2.F_ValueLabel = T1.F_ValueLabel
			ORDER BY dbo.fun_GetDeviceTplValueOrder(@F_DeviceTypeID,T1.F_ValueLabel)
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetProjectEnergyParam]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetProjectEnergyParam]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetProjectEnergyParam]
	@F_EnergyTypeID bigint,
	@F_ProjectNo bigint
AS
BEGIN
	SELECT
		T1.F_ValueLabel,
		T1.F_ValueName,
		T1.F_ValueType,
		dbo.fun_GetEnergyTplValueUnit(@F_EnergyTypeID,T1.F_ValueLabel) AS F_Unit,
		CASE WHEN T2.F_ValueLabel IS NULL THEN 0 ELSE 1 END AS F_Checked
	FROM
	(
		SELECT DISTINCT 
			T.F_ValueLabel,
			STUFF((
				SELECT DISTINCT 
					'','' + A.F_ValueName 
				FROM dbo.tb_A_Value A,
					(
						SELECT DISTINCT
							F_NodeTemplate AS F_TemplateCode
						FROM dbo.tb_B_EntityTreeModel
						WHERE F_EnergyTypeID = @F_EnergyTypeID
							AND F_NodeTemplate IS NOT NULL
					) B 
				WHERE A.F_TemplateCode = B.F_TemplateCode 
					AND A.F_ValueLabel = T.F_ValueLabel
				FOR XML PATH('''') ),1,1,'''') AS F_ValueName,
			T.F_ValueType
		FROM 
		(
			SELECT 
				A.F_ValueLabel,
				A.F_ValueType
			FROM dbo.tb_A_Value A,
				(
					SELECT DISTINCT
						F_NodeTemplate AS F_TemplateCode
					FROM dbo.tb_B_EntityTreeModel
					WHERE F_EnergyTypeID = @F_EnergyTypeID
						AND F_NodeTemplate IS NOT NULL
				) B 
			WHERE A.F_TemplateCode = B.F_TemplateCode
				AND A.F_IsDisplay = 1 
			GROUP BY A.F_ValueLabel,A.F_ValueType
		) T 
	) T1 LEFT OUTER JOIN dbo.tb_A_ProjectToEParam  T2 ON T2.F_ProjectNo = @F_ProjectNo AND T2.F_EnergyType = @F_EnergyTypeID AND T2.F_ValueLabel = T1.F_ValueLabel
	ORDER BY dbo.fun_GetEnergyTplValueOrder(@F_EnergyTypeID,T1.F_ValueLabel)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetProjectDeviceParam]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetProjectDeviceParam]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetProjectDeviceParam]
	@F_DeviceTypeID bigint,
	@F_ProjectNo bigint
AS
BEGIN
	SELECT
		T1.F_ValueLabel,
		T1.F_ValueName,
		T1.F_ValueType,
		dbo.fun_GetDeviceTplValueUnit(@F_DeviceTypeID,T1.F_ValueLabel) AS F_Unit,
		CASE WHEN T2.F_ValueLabel IS NULL THEN 0 ELSE 1 END AS F_Checked
	FROM
	(
		SELECT DISTINCT 
			T.F_ValueLabel,
			STUFF((
				SELECT DISTINCT 
					'','' + A.F_ValueName 
				FROM dbo.tb_A_Value A,
					(
						SELECT DISTINCT
							F_NodeTemplate AS F_TemplateCode
						FROM dbo.tb_B_EntityTreeModel
						WHERE F_DeviceTypeID = @F_DeviceTypeID
							AND F_NodeTemplate IS NOT NULL
					) B 
				WHERE A.F_TemplateCode = B.F_TemplateCode 
					AND A.F_ValueLabel = T.F_ValueLabel
				FOR XML PATH('''') ),1,1,'''') AS F_ValueName,
			T.F_ValueType
		FROM 
		(
			SELECT 
				A.F_ValueLabel,
				A.F_ValueType
			FROM dbo.tb_A_Value A,
				(
					SELECT DISTINCT
						F_NodeTemplate AS F_TemplateCode
					FROM dbo.tb_B_EntityTreeModel
					WHERE F_DeviceTypeID = @F_DeviceTypeID
						AND F_NodeTemplate IS NOT NULL
				) B 
			WHERE A.F_TemplateCode = B.F_TemplateCode
				AND A.F_IsDisplay = 1 
			GROUP BY A.F_ValueLabel,A.F_ValueType
		) T 
	) T1 LEFT OUTER JOIN dbo.tb_A_ProjectToDParam  T2 ON T2.F_ProjectNo = @F_ProjectNo AND T2.F_DeviceType = @F_DeviceTypeID AND T2.F_ValueLabel = T1.F_ValueLabel
	ORDER BY dbo.fun_GetDeviceTplValueUnit(@F_DeviceTypeID,T1.F_ValueLabel)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetDeviceParamData]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetDeviceParamData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetDeviceParamData]
	@DeviceCode bigint
AS
BEGIN
	SELECT
		ROW_NUMBER()OVER(ORDER BY B.F_OrderNum) AS F_RowNum,
		@DeviceCode AS F_DeviceCode,
		A.F_EntityName AS F_DeviceName,
		dbo.fun_GetNodeAorVType(A.F_EntityID) AS F_AorVType,
		B.F_ValueCode,
		B.F_ValueName,
		B.F_ValueLabel,
		CASE B.F_ValueType WHEN ''1'' THEN ''累计变量'' WHEN ''2'' THEN ''瞬时变量'' ELSE ''未知'' END AS F_ValueType,
		CASE WHEN dbo.fun_GetNodeAorVType(A.F_EntityID) = 0 THEN ''虚拟变量'' WHEN B.F_ValueProperty = ''1'' THEN ''通讯变量'' WHEN B.F_ValueProperty = ''2'' THEN ''虚拟变量'' ELSE ''未知'' END AS F_ValueProperty,
		B.F_DataType,
		B.F_CommCycle,
		B.F_Unit,
		B.F_ReadWrite,
		CAST(ISNULL(C.F_DeviationValue,0.00) AS VARCHAR) AS F_DeviationValue,
		'''' AS F_OperButton
	FROM dbo.tb_B_EntityTreeModel A,
		dbo.tb_A_Value B
		LEFT OUTER JOIN dbo.tb_A_DeviationValue C ON C.F_NodeCode = @DeviceCode AND C.F_ValueLabel = B.F_ValueLabel
	WHERE A.F_EntityID = @DeviceCode
		AND A.F_NodeTemplate = B.F_TemplateCode
	ORDER BY B.F_OrderNum
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_IsMeasureDeviceType]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_IsMeasureDeviceType]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_IsMeasureDeviceType] (
	@F_DeviceTypeID bigint
) RETURNS bit
BEGIN
	DECLARE @F_Result bit
	IF EXISTS(SELECT F_ValueCode FROM dbo.tb_A_Value A,dbo.tb_B_EntityTreeModel B WHERE (B.F_ObjectGroup = ''2'' OR B.F_ObjectGroup = ''3'') AND dbo.fun_GetNodeDeviceType(B.F_EntityID) = @F_DeviceTypeID AND A.F_ValueType = ''1'' AND B.F_NodeTemplate = A.F_TemplateCode)
		SET @F_Result = 1
	ELSE SET @F_Result = 0
	RETURN @F_Result
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_IsInstantDeviceType]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_IsInstantDeviceType]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_IsInstantDeviceType] (
	@F_DeviceTypeID bigint
) RETURNS bit
BEGIN
	DECLARE @F_Result bit
	IF EXISTS(SELECT F_ValueCode FROM dbo.tb_A_Value A,dbo.tb_B_EntityTreeModel B WHERE (B.F_ObjectGroup = ''2'' OR B.F_ObjectGroup = ''3'') AND dbo.fun_GetNodeDeviceType(B.F_EntityID) = @F_DeviceTypeID AND A.F_ValueType = ''2'' AND B.F_NodeTemplate = A.F_TemplateCode)
		SET @F_Result = 1
	ELSE SET @F_Result = 0
	RETURN @F_Result
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetNodeValueCode]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetNodeValueCode]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetNodeValueCode] (
	@F_NodeCode bigint,
	@F_ValueTag varchar(32)
) RETURNS bigint
BEGIN
	DECLARE @ValueCode bigint
	
	SELECT 
		@ValueCode = A.F_ValueCode
	FROM dbo.tb_A_Value A,
		dbo.tb_A_IoTNode B
	WHERE B.F_NodeCode = @F_NodeCode
		AND B.F_TemplateCode = A.F_TemplateCode
		AND A.F_ValueLabel = @F_ValueTag
		
	RETURN @ValueCode
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_EntityTreeGroupOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_EntityTreeGroupOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_EntityTreeGroupOperate]
	@OperFlg varchar(10),
	@F_EntityTreeNo int, 
	@F_EntityID bigint,
	@F_EntityName varchar(128),
	@F_EntitySName varchar(32),
	@F_TemplateID varchar(32),
	@F_NodeTemplate varchar(32),
	@F_EnergyTypeID varchar(32),
	@F_DeviceTypeID varchar(32),
	@F_IsDisplay bit,
	@F_OrderTag varchar(16),
	@F_MapTag varchar(50),
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @NewEntityID bigint
	DECLARE @F_EntityDepth smallint
	DECLARE @F_ObjectGroup varchar(1)
	DECLARE @F_Log varchar(512)
	
	SELECT @F_ObjectGroup = F_ObjectGroup FROM dbo.tb_B_DictTreeModel WHERE F_GroupID = @F_TemplateID
	IF @OperFlg = ''1''
	BEGIN
		SELECT @NewEntityID = dbo.fun_MakeSerialNum()
		IF EXISTS(SELECT F_EntityTreeNo FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo)
		BEGIN
			SELECT @F_EntityDepth = F_EntityDepth + 1 FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID
			
			INSERT INTO dbo.tb_B_EntityTreeModel
			(
				F_EntityTreeNo,
				F_EntityID,
				F_ParentID,
				F_EntityName,
				F_EntitySName,
				F_EntityDepth,
				F_ObjectGroup,
				F_TemplateID,
				F_NodeTemplate,
				F_EnergyTypeID,
				F_DeviceTypeID,
				F_IsHasChild,
				F_IsDisplay,
				F_OrderTag,
				F_MapTag
			)
			VALUES
			(
				@F_EntityTreeNo,
				@NewEntityID,
				@F_EntityID,
				@F_EntityName,
				@F_EntitySName,
				@F_EntityDepth,
				@F_ObjectGroup,
				CASE WHEN @F_TemplateID = '''' THEN NULL ELSE @F_TemplateID END,
				CASE WHEN @F_TemplateID = '''' THEN NULL WHEN @F_NodeTemplate = '''' THEN NULL ELSE @F_NodeTemplate END,
				CASE WHEN @F_TemplateID = '''' THEN NULL WHEN @F_ObjectGroup = ''2'' AND @F_EnergyTypeID <> '''' THEN @F_EnergyTypeID ELSE NULL END,
				CASE WHEN @F_TemplateID = '''' THEN NULL WHEN (@F_ObjectGroup = ''2'' OR @F_ObjectGroup = ''3'') AND @F_DeviceTypeID <> '''' THEN @F_DeviceTypeID ELSE NULL END,
				0,
				@F_IsDisplay,
				@F_OrderTag,
				@F_MapTag
			)
			UPDATE dbo.tb_B_EntityTreeModel SET F_IsHasChild = 1 WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID
			UPDATE dbo.tb_B_EntityTreeType SET F_TreeDepth = @F_EntityDepth WHERE F_EntityTreeNo = @F_EntityTreeNo AND (F_TreeDepth IS NULL OR @F_EntityDepth > F_TreeDepth)
			
			IF @F_ObjectGroup = ''1'' SET @F_Log = @UserName + ''添加了（管理）对象实例（'' + @F_EntityName + ''）。''
			ELSE IF @F_ObjectGroup = ''2'' SET @F_Log = @UserName + ''添加了（表具）对象实例（'' + @F_EntityName + ''）。''
			ELSE IF @F_ObjectGroup = ''3'' SET @F_Log = @UserName + ''添加了（设备）对象实例（'' + @F_EntityName + ''）。''
			ELSE IF @F_ObjectGroup IS NULL SET @F_Log = @UserName + ''添加了（虚拟）对象实例（'' + @F_EntityName + ''）。''
			EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
		END	
		ELSE
		BEGIN
			INSERT INTO dbo.tb_B_EntityTreeModel
			(
				F_EntityTreeNo,
				F_EntityID,
				F_ParentID,
				F_EntityName,
				F_EntitySName,
				F_EntityDepth,
				F_ObjectGroup,
				F_TemplateID,
				F_NodeTemplate,
				F_EnergyTypeID,
				F_DeviceTypeID,
				F_IsHasChild,
				F_IsDisplay,
				F_OrderTag,
				F_MapTag
			)
			VALUES
			(
				@F_EntityTreeNo,
				@NewEntityID,
				0,
				@F_EntityName,
				@F_EntitySName,
				1,
				@F_ObjectGroup,
				CASE WHEN @F_TemplateID = '''' THEN NULL ELSE @F_TemplateID END,
				CASE WHEN @F_TemplateID = '''' THEN NULL WHEN @F_NodeTemplate = '''' THEN NULL ELSE @F_NodeTemplate END,
				CASE WHEN @F_TemplateID = '''' THEN NULL WHEN @F_ObjectGroup = ''2'' AND @F_EnergyTypeID <> '''' THEN @F_EnergyTypeID ELSE NULL END,
				CASE WHEN @F_TemplateID = '''' THEN NULL WHEN (@F_ObjectGroup = ''2'' OR @F_ObjectGroup = ''3'') AND @F_DeviceTypeID <> '''' THEN @F_DeviceTypeID ELSE NULL END,
				0,
				@F_IsDisplay,
				@F_OrderTag,
				@F_MapTag
			)
			UPDATE dbo.tb_B_EntityTreeType SET F_TreeDepth = 1,F_UpdateUser = @UserName,F_UpdateDate = GETDATE() WHERE F_EntityTreeNo = @F_EntityTreeNo
		END
		IF @F_ObjectGroup = ''1'' SET @F_Log = @UserName + ''添加了（管理）对象实例（'' + @F_EntityName + ''）。''
		ELSE IF @F_ObjectGroup = ''2'' SET @F_Log = @UserName + ''添加了（表具）对象实例（'' + @F_EntityName + ''）。''
		ELSE IF @F_ObjectGroup = ''3'' SET @F_Log = @UserName + ''添加了（设备）对象实例（'' + @F_EntityName + ''）。''
		ELSE IF @F_ObjectGroup IS NULL SET @F_Log = @UserName + ''添加了（虚拟）对象实例（'' + @F_EntityName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_B_EntityTreeModel
		SET F_EntityName = @F_EntityName,
		    F_EntitySName = @F_EntitySName,
			F_ObjectGroup = @F_ObjectGroup,
			F_TemplateID = CASE WHEN @F_TemplateID = '''' THEN NULL ELSE @F_TemplateID END,
			F_NodeTemplate = CASE WHEN @F_TemplateID = '''' THEN NULL WHEN @F_NodeTemplate = '''' THEN NULL ELSE @F_NodeTemplate END,
			F_EnergyTypeID = CASE WHEN @F_TemplateID = '''' THEN NULL WHEN @F_ObjectGroup = ''2'' AND @F_EnergyTypeID <> '''' THEN @F_EnergyTypeID ELSE NULL END,
			F_DeviceTypeID = CASE WHEN @F_TemplateID = '''' THEN NULL WHEN (@F_ObjectGroup = ''2'' OR @F_ObjectGroup = ''3'') AND @F_DeviceTypeID <> '''' THEN @F_DeviceTypeID ELSE NULL END,
			F_IsDisplay = @F_IsDisplay,
			F_OrderTag = @F_OrderTag,
			F_MapTag = @F_MapTag
		WHERE F_EntityTreeNo = @F_EntityTreeNo
			AND F_EntityID = @F_EntityID
		UPDATE dbo.tb_A_IoTNode 
		SET F_NodeName = @F_EntityName,
			F_TemplateCode = CASE WHEN @F_TemplateID = '''' THEN NULL WHEN @F_NodeTemplate = '''' THEN NULL ELSE @F_NodeTemplate END,
			F_EnergyTypeID = CASE WHEN @F_TemplateID = '''' THEN NULL WHEN @F_ObjectGroup = ''2'' AND @F_EnergyTypeID <> '''' THEN @F_EnergyTypeID ELSE NULL END,
			F_DeviceTypeID = CASE WHEN @F_TemplateID = '''' THEN NULL WHEN (@F_ObjectGroup = ''2'' OR @F_ObjectGroup = ''3'') AND @F_DeviceTypeID <> '''' THEN @F_DeviceTypeID ELSE NULL END
		WHERE F_NodeCode = @F_EntityID
		IF @F_ObjectGroup = ''1'' SET @F_Log = @UserName + ''修改了（管理）对象实例（'' + @F_EntityName + ''）。''
		ELSE IF @F_ObjectGroup = ''2'' SET @F_Log = @UserName + ''修改了（表具）对象实例（'' + @F_EntityName + ''）。''
		ELSE IF @F_ObjectGroup = ''3'' SET @F_Log = @UserName + ''修改了（设备）对象实例（'' + @F_EntityName + ''）。''
		ELSE IF @F_ObjectGroup IS NULL SET @F_Log = @UserName + ''修改了（虚拟）对象实例（'' + @F_EntityName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @NewEntityID = F_ParentID,@F_Log = @UserName + ''删除了对象实例（'' + F_EntityName + ''）。'' FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID
		DELETE FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID
		DELETE FROM dbo.tb_B_EntityTreeMetering WHERE (F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID) OR (F_NodeTreeNo = @F_EntityTreeNo AND F_NodeID = @F_EntityID)
		IF @NewEntityID <> 0 AND NOT EXISTS(SELECT F_EntityTreeNo FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_ParentID = @NewEntityID)
		BEGIN
			UPDATE dbo.tb_B_EntityTreeModel SET F_IsHasChild = 0 WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @NewEntityID
		END
		UPDATE dbo.tb_B_EntityTreeType SET F_TreeDepth = (SELECT MAX(F_EntityDepth) FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo) WHERE F_EntityTreeNo = @F_EntityTreeNo
		EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_DictTreeGroupOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_DictTreeGroupOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_DictTreeGroupOperate]
	@OperFlg varchar(10),
	@F_DictTreeNo int, 
	@F_GroupID bigint,
	@F_GroupName varchar(32),
	@F_ObjectGroup char(1),
	@F_ObjectTypeID int,
	@F_GroupTag varchar(32),
	@UserName varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @NewGroupID bigint
	DECLARE @F_GroupDepth smallint
	DECLARE @F_Log varchar(512)
	
	IF @OperFlg = ''1''
	BEGIN
		SELECT @NewGroupID = dbo.fun_MakeSerialNum()
		IF EXISTS(SELECT F_DictTreeNo FROM dbo.tb_B_DictTreeModel WHERE F_DictTreeNo = @F_DictTreeNo)
		BEGIN
			SELECT @F_GroupDepth = F_GroupDepth + 1 FROM dbo.tb_B_DictTreeModel WHERE F_DictTreeNo = @F_DictTreeNo AND F_GroupID = @F_GroupID
			
			INSERT INTO dbo.tb_B_DictTreeModel
			(
				F_DictTreeNo,
				F_GroupID,
				F_ParentID,
				F_GroupName,
				F_GroupDepth,
				F_ObjectGroup,
				F_ObjectTypeID,
				F_IsHasChild,
				F_GroupTag
			)
			VALUES
			(
				@F_DictTreeNo,
				@NewGroupID,
				@F_GroupID,
				@F_GroupName,
				@F_GroupDepth,
				@F_ObjectGroup,
				@F_ObjectTypeID,
				0,
				@F_GroupTag
			)
			UPDATE dbo.tb_B_DictTreeModel SET F_IsHasChild = 1 WHERE F_DictTreeNo = @F_DictTreeNo AND F_GroupID = @F_GroupID
			UPDATE dbo.tb_B_DictTreeType SET F_TreeDepth = @F_GroupDepth,F_UpdateUser = @UserName,F_UpdateDate = GETDATE() WHERE F_DictTreeNo = @F_DictTreeNo AND (F_TreeDepth IS NULL OR @F_GroupDepth > F_TreeDepth)
		END	
		ELSE
		BEGIN
			INSERT INTO dbo.tb_B_DictTreeModel
			(
				F_DictTreeNo,
				F_GroupID,
				F_ParentID,
				F_GroupName,
				F_GroupDepth,
				F_ObjectGroup,
				F_ObjectTypeID,
				F_IsHasChild,
				F_GroupTag
			)
			VALUES
			(
				@F_DictTreeNo,
				@NewGroupID,
				0,
				@F_GroupName,
				1,
				@F_ObjectGroup,
				@F_ObjectTypeID,
				0,
				@F_GroupTag
			)
			UPDATE dbo.tb_B_DictTreeType SET F_TreeDepth = 1,F_UpdateUser = @UserName,F_UpdateDate = GETDATE() WHERE F_DictTreeNo = @F_DictTreeNo
		END
		IF @F_ObjectGroup = ''1'' SET @F_Log = @UserName + ''添加了（管理）对象模板（'' + @F_GroupName + ''）。''
		ELSE IF @F_ObjectGroup = ''1'' SET @F_Log = @UserName + ''添加了（表具）对象模板（'' + @F_GroupName + ''）。''
		ELSE IF @F_ObjectGroup = ''1'' SET @F_Log = @UserName + ''添加了（设备）对象模板（'' + @F_GroupName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_B_DictTreeModel
		SET F_GroupName = @F_GroupName,
			F_ObjectGroup = @F_ObjectGroup,
			F_ObjectTypeID = @F_ObjectTypeID,
			F_GroupTag = @F_GroupTag
		WHERE F_DictTreeNo = @F_DictTreeNo
			AND F_GroupID = @F_GroupID
		SET @F_Log = @UserName + ''修改了对象模板（'' + @F_GroupName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @NewGroupID = F_ParentID,@F_Log = @UserName + ''删除了对象模板（'' + F_GroupName + ''）。'' FROM dbo.tb_B_DictTreeModel WHERE F_DictTreeNo = @F_DictTreeNo AND F_GroupID = @F_GroupID
		DELETE FROM dbo.tb_B_DictTreeModel WHERE F_DictTreeNo = @F_DictTreeNo AND F_GroupID = @F_GroupID
		DELETE FROM dbo.tb_B_EntityTreeModel WHERE F_TemplateID = @F_GroupID
		IF @NewGroupID <> ''0'' AND NOT EXISTS(SELECT F_DictTreeNo FROM dbo.tb_B_DictTreeModel WHERE F_DictTreeNo = @F_DictTreeNo AND F_ParentID = @NewGroupID)
		BEGIN
			UPDATE dbo.tb_B_DictTreeModel SET F_IsHasChild = 0 WHERE F_DictTreeNo = @F_DictTreeNo AND F_GroupID = @NewGroupID
		END
		UPDATE dbo.tb_B_DictTreeType SET F_TreeDepth = (SELECT MAX(F_GroupDepth) FROM dbo.tb_B_DictTreeModel WHERE F_DictTreeNo = @F_DictTreeNo) ,F_UpdateUser = @UserName,F_UpdateDate = GETDATE() WHERE F_DictTreeNo = @F_DictTreeNo
		EXEC dbo.proc_A_WriteEventLog 6,@UserName,@VistorIP,@F_Log
	END
END
' 
END
GO
/****** Object:  Trigger [trigger_tb_C_DataBuffer]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[trigger_tb_C_DataBuffer]'))
EXEC dbo.sp_executesql @statement = N'CREATE TRIGGER [dbo].[trigger_tb_C_DataBuffer] ON [dbo].[tb_C_DataBuffer] INSTEAD OF INSERT
AS
BEGIN
	DECLARE @F_NodeCode bigint
	DECLARE @F_ReadingDate datetime2(0)
	DECLARE @F_ValueLabel varchar(32)
	DECLARE @F_DataValue numeric(18,4)
	DECLARE @F_IsRepair bit
	DECLARE @F_ValueType char(1)
	DECLARE @F_IsStorage_N bit
	DECLARE @F_IsStorage_V bit
	DECLARE @F_LastHourDate datetime2(0)
	DECLARE @F_LastHourData numeric(18,4)
	DECLARE @F_NextHourDate datetime2(0)
	DECLARE @TableName varchar(32)
	DECLARE @SqlText varchar(max)

	SELECT @F_NodeCode = F_NodeCode,@F_ReadingDate = F_ReadingDate,@F_ValueLabel = F_ValueLabel,@F_DataValue = F_DataValue,@F_IsRepair = F_IsRepair FROM INSERTED
	SELECT @F_ValueType = F_ValueType FROM dbo.tb_A_Value A,dbo.tb_B_EntityTreeModel B WHERE B.F_EntityID = @F_NodeCode AND B.F_NodeTemplate = A.F_TemplateCode AND A.F_ValueLabel = @F_ValueLabel
	SET @F_IsStorage_N = 1
	SET @F_IsStorage_V = 1
	IF @F_IsStorage_N = 1 AND @F_IsStorage_V = 1
	BEGIN
		IF @F_ValueType = ''1''
		BEGIN
			SET @TableName = ''tb_C_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR)
			IF object_id(@TableName) IS NULL
			BEGIN
				SET @SqlText = ''
					BEGIN TRANSACTION 
					CREATE PARTITION FUNCTION [pf_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''](datetime2(0))  
					AS RANGE RIGHT  
					FOR VALUES (N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-01-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-02-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-03-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-04-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-05-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-06-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-07-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-08-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-09-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-10-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-11-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-12-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) + 1 AS VARCHAR) + ''-01-01'''') 
					
					CREATE PARTITION SCHEME [ps_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''] AS PARTITION [pf_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY]) 
					
					CREATE TABLE [dbo].[tb_C_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + '']( 
						[F_NodeCode] [bigint] NOT NULL,
						[F_ValueLabel] [varchar](32) NOT NULL,
						[F_ReadingDate] [datetime2](0) NOT NULL,
						[F_DataValue] [numeric](18, 4) NULL,
						[F_SystemDate] [datetime2](0) NOT NULL,
						[F_IsRepair] [bit] NOT NULL,
					 CONSTRAINT [PK_tb_C_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''] PRIMARY KEY CLUSTERED 
					( 
						[F_NodeCode] ASC,
						[F_ValueLabel] ASC,
						[F_ReadingDate] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [ps_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + '']([F_ReadingDate])
					) 
					ALTER TABLE [dbo].[tb_C_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''] ADD  CONSTRAINT [DF_tb_C_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''_F_SystemDate]  DEFAULT (getdate()) FOR [F_SystemDate]
					COMMIT TRANSACTION''
				EXEC (@SqlText)	
			END
			IF ABS(@F_DataValue) < 0
				INSERT INTO dbo.tb_C_ExceptionData(F_NodeCode,F_ValueLabel,F_ReadingDate,F_DataValue,F_ExceptionCode,F_IsRepair) VALUES (@F_NodeCode,@F_ValueLabel,@F_ReadingDate,@F_DataValue,1,@F_IsRepair)
			ELSE IF DATEDIFF(S,GETDATE(),@F_ReadingDate) >= 120
				INSERT INTO dbo.tb_C_ExceptionData(F_NodeCode,F_ValueLabel,F_ReadingDate,F_DataValue,F_ExceptionCode,F_IsRepair) VALUES (@F_NodeCode,@F_ValueLabel,@F_ReadingDate,@F_DataValue,2,@F_IsRepair)
			ELSE
			BEGIN
				IF EXISTS(SELECT F_ValueLabel FROM dbo.tb_C_LatelyData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel)
				BEGIN
					IF EXISTS(SELECT F_ValueLabel FROM dbo.tb_C_LatelyData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate <= @F_ReadingDate AND F_DataValue > @F_DataValue)
						INSERT INTO dbo.tb_C_ExceptionData(F_NodeCode,F_ValueLabel,F_ReadingDate,F_DataValue,F_ExceptionCode,F_IsRepair) VALUES (@F_NodeCode,@F_ValueLabel,@F_ReadingDate,@F_DataValue,3,@F_IsRepair)
					ELSE IF EXISTS(SELECT F_ValueLabel FROM dbo.tb_C_LatelyData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate >= @F_ReadingDate AND F_DataValue < @F_DataValue)
						INSERT INTO dbo.tb_C_ExceptionData(F_NodeCode,F_ValueLabel,F_ReadingDate,F_DataValue,F_ExceptionCode,F_IsRepair) VALUES (@F_NodeCode,@F_ValueLabel,@F_ReadingDate,@F_DataValue,4,@F_IsRepair)
					ELSE
					BEGIN
						SET @SqlText = ''INSERT INTO dbo.tb_C_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + '' (F_NodeCode,F_ValueLabel,F_ReadingDate,F_DataValue,F_IsRepair)VALUES('' + CAST(@F_NodeCode AS VARCHAR) + '','''''' + @F_ValueLabel + '''''','''''' + CAST(@F_ReadingDate AS VARCHAR) + '''''','' + CAST(@F_DataValue AS VARCHAR) + '','' + CAST(@F_IsRepair AS VARCHAR) + '')''
						EXEC (@SqlText)	
						UPDATE dbo.tb_C_LatelyData SET F_ReadingDate = @F_ReadingDate,F_SystemDate = GETDATE(),F_DataValue = @F_DataValue,F_IsRepair = @F_IsRepair WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate < @F_ReadingDate
						IF EXISTS(SELECT F_NodeCode FROM tb_C_NodeHourData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = CONVERT(varchar(14),@F_ReadingDate,120) + ''00:00'')
						BEGIN
							UPDATE tb_C_NodeHourData SET F_EndHour = @F_ReadingDate,F_EndValue = @F_DataValue,F_EnergyData = @F_DataValue - F_StartValue,F_SynNdStatus = 0,F_SynEhStatus = 0 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = CONVERT(varchar(14),@F_ReadingDate,120) + ''00:00'' AND F_EndHour < @F_ReadingDate
							IF @@ROWCOUNT > 0
							BEGIN
								SELECT @F_NextHourDate = MIN(F_ReadingDate) FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate > @F_ReadingDate
								IF @F_NextHourDate IS NOT NULL UPDATE tb_C_NodeHourData SET F_StartHour = @F_ReadingDate,F_StartValue = @F_DataValue,F_EnergyData = F_EndValue - @F_DataValue,F_SynNdStatus = 0,F_SynEhStatus = 0 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = @F_NextHourDate
							END
						END
						ELSE
						BEGIN
							SELECT @F_LastHourDate = MAX(F_EndHour),@F_LastHourData = MAX(F_EndValue) FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate < @F_ReadingDate
							SELECT @F_NextHourDate = MIN(F_ReadingDate) FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate > @F_ReadingDate
							IF @F_LastHourDate IS NOT NULL INSERT INTO tb_C_NodeHourData VALUES(@F_NodeCode,@F_ValueLabel,CONVERT(varchar(14),@F_ReadingDate,120) + ''00:00'',@F_LastHourDate,@F_LastHourData,@F_ReadingDate,@F_DataValue,@F_DataValue - @F_LastHourData,0,0)
							ELSE INSERT INTO tb_C_NodeHourData VALUES(@F_NodeCode,@F_ValueLabel,CONVERT(varchar(14),@F_ReadingDate,120) + ''00:00'',@F_ReadingDate,@F_DataValue,@F_ReadingDate,@F_DataValue,0,0,0)
							IF @F_NextHourDate IS NOT NULL UPDATE tb_C_NodeHourData SET F_StartHour = @F_ReadingDate,F_StartValue = @F_DataValue,F_EnergyData = F_EndValue - @F_DataValue,F_SynNdStatus = 0,F_SynEhStatus = 0 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = @F_NextHourDate
						END
					END
				END
				ELSE
				BEGIN
					SET @SqlText = ''INSERT INTO dbo.tb_C_InitialMData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + '' (F_NodeCode,F_ValueLabel,F_ReadingDate,F_DataValue,F_IsRepair)VALUES('' + CAST(@F_NodeCode AS VARCHAR) + '','''''' + @F_ValueLabel + '''''','''''' + CAST(@F_ReadingDate AS VARCHAR) + '''''','' + CAST(@F_DataValue AS VARCHAR) + '','' + CAST(@F_IsRepair AS VARCHAR) + '')''
					EXEC (@SqlText)	
					INSERT INTO dbo.tb_C_LatelyData(F_NodeCode,F_ValueLabel,F_ReadingDate,F_DataValue,F_IsRepair) VALUES (@F_NodeCode,@F_ValueLabel,@F_ReadingDate,@F_DataValue,@F_IsRepair)
					
					IF EXISTS(SELECT F_NodeCode FROM tb_C_NodeHourData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = CONVERT(varchar(14),@F_ReadingDate,120) + ''00:00'')
					BEGIN
						UPDATE tb_C_NodeHourData SET F_EndHour = @F_ReadingDate,F_EndValue = @F_DataValue,F_EnergyData = @F_DataValue - F_StartValue,F_SynNdStatus = 0,F_SynEhStatus = 0 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = CONVERT(varchar(14),@F_ReadingDate,120) + ''00:00'' AND F_EndHour < @F_ReadingDate
						IF @@ROWCOUNT > 0
						BEGIN
							SELECT @F_NextHourDate = MIN(F_ReadingDate) FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate > @F_ReadingDate
							IF @F_NextHourDate IS NOT NULL UPDATE tb_C_NodeHourData SET F_StartHour = @F_ReadingDate,F_StartValue = @F_DataValue,F_EnergyData = F_EndValue - @F_DataValue,F_SynNdStatus = 0,F_SynEhStatus = 0 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = @F_NextHourDate
						END
					END
					ELSE
					BEGIN
						SELECT @F_LastHourDate = MAX(F_EndHour),@F_LastHourData = MAX(F_EndValue) FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate < @F_ReadingDate
						SELECT @F_NextHourDate = MIN(F_ReadingDate) FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate > @F_ReadingDate
						IF @F_LastHourDate IS NOT NULL INSERT INTO tb_C_NodeHourData VALUES(@F_NodeCode,@F_ValueLabel,CONVERT(varchar(14),@F_ReadingDate,120) + ''00:00'',@F_LastHourDate,@F_LastHourData,@F_ReadingDate,@F_DataValue,@F_DataValue - @F_LastHourData,0,0)
						ELSE INSERT INTO tb_C_NodeHourData VALUES(@F_NodeCode,@F_ValueLabel,CONVERT(varchar(14),@F_ReadingDate,120) + ''00:00'',@F_ReadingDate,@F_DataValue,@F_ReadingDate,@F_DataValue,0,0,0)
						IF @F_NextHourDate IS NOT NULL UPDATE tb_C_NodeHourData SET F_StartHour = @F_ReadingDate,F_StartValue = @F_DataValue,F_EnergyData = F_EndValue - @F_DataValue,F_SynNdStatus = 0,F_SynEhStatus = 0 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = @F_NextHourDate
					END
				END
			END
		END
		ELSE IF @F_ValueType = ''2''
		BEGIN
			SET @TableName = ''tb_C_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR)
			IF object_id(@TableName) IS NULL
			BEGIN
				SET @SqlText = ''
					BEGIN TRANSACTION 
					CREATE PARTITION FUNCTION [pf_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''](datetime2(0))  
					AS RANGE RIGHT  
					FOR VALUES (N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-01-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-02-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-03-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-04-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-05-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-06-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-07-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-08-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-09-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-10-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-11-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''-12-01'''', N'''''' + CAST(YEAR(@F_ReadingDate) + 1 AS VARCHAR) + ''-01-01'''') 
					
					CREATE PARTITION SCHEME [ps_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''] AS PARTITION [pf_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''] TO ([PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY], [PRIMARY]) 
					
					CREATE TABLE [dbo].[tb_C_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + '']( 
						[F_NodeCode] [bigint] NOT NULL,
						[F_ValueLabel] [varchar](32) NOT NULL,
						[F_ReadingDate] [datetime2](0) NOT NULL,
						[F_DataValue] [numeric](18, 4) NULL,
						[F_SystemDate] [datetime2](0) NOT NULL,
						[F_IsRepair] [bit] NOT NULL,
					 CONSTRAINT [PK_tb_C_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''] PRIMARY KEY CLUSTERED 
					( 
						[F_NodeCode] ASC,
						[F_ValueLabel] ASC,
						[F_ReadingDate] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [ps_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + '']([F_ReadingDate])
					) 
					ALTER TABLE [dbo].[tb_C_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''] ADD  CONSTRAINT [DF_tb_C_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + ''_F_SystemDate]  DEFAULT (getdate()) FOR [F_SystemDate]
					COMMIT TRANSACTION''
				EXEC (@SqlText)	
			END
			SET @SqlText = ''INSERT INTO dbo.tb_C_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + '' (F_NodeCode,F_ValueLabel,F_ReadingDate,F_DataValue,F_IsRepair)VALUES('' + CAST(@F_NodeCode AS VARCHAR) + '','''''' + @F_ValueLabel + '''''','''''' + CAST(@F_ReadingDate AS VARCHAR) + '''''','' + CAST(@F_DataValue AS VARCHAR) + '','' + CAST(@F_IsRepair AS VARCHAR) + '')''
			EXEC (@SqlText)
			IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_InstantDayData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = CAST(@F_ReadingDate AS DATE))
				UPDATE dbo.tb_C_InstantDayData SET F_Status = 0,F_SynStatus = 0 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = CAST(@F_ReadingDate AS DATE)
			ELSE
				INSERT INTO dbo.tb_C_InstantDayData(F_NodeCode,F_ValueLabel,F_ReadingDate,F_Status,F_SynStatus) VALUES (@F_NodeCode,@F_ValueLabel,CAST(@F_ReadingDate AS DATE),0,0)
			
			IF EXISTS(SELECT F_ValueLabel FROM dbo.tb_C_LatelyData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel)
				UPDATE dbo.tb_C_LatelyData SET F_ReadingDate = @F_ReadingDate,F_SystemDate = GETDATE(),F_DataValue = @F_DataValue,F_IsRepair = @F_IsRepair WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate < @F_ReadingDate
			ELSE
				INSERT INTO dbo.tb_C_LatelyData(F_NodeCode,F_ValueLabel,F_ReadingDate,F_DataValue,F_IsRepair) VALUES (@F_NodeCode,@F_ValueLabel,@F_ReadingDate,@F_DataValue,@F_IsRepair)
		END
	END
END
'
GO
/****** Object:  Trigger [trigger_delete_tb_B_EntityTreeModel]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[trigger_delete_tb_B_EntityTreeModel]'))
EXEC dbo.sp_executesql @statement = N'CREATE TRIGGER [dbo].[trigger_delete_tb_B_EntityTreeModel] ON [dbo].[tb_B_EntityTreeModel] FOR DELETE
AS
BEGIN
	DECLARE @F_EntityTreeNo bigint
	DECLARE @F_EntityID bigint
	DECLARE @cur_entity cursor
	
	SET @cur_entity = CURSOR forward_only static FOR SELECT F_EntityTreeNo,F_EntityID FROM DELETED
	OPEN @cur_entity
	FETCH NEXT FROM @cur_entity INTO @F_EntityTreeNo,@F_EntityID
	WHILE @@FETCH_STATUS=0
	BEGIN
		DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID
		DELETE FROM dbo.tb_B_EntityTreeMetering WHERE F_NodeTreeNo = @F_EntityTreeNo AND F_NodeID = @F_EntityID
		DELETE FROM dbo.tb_B_EntityTreeToDevice WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID
		DELETE FROM dbo.tb_B_EntityTreeToDevice WHERE F_DeviceTreeNo = @F_EntityTreeNo AND F_DeviceID = @F_EntityID
		DELETE FROM dbo.tb_A_PluginToEntity WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_EntityID = @F_EntityID
		DELETE FROM dbo.tb_C_LatelyData WHERE F_NodeCode = @F_EntityID
		DELETE FROM dbo.tb_C_ExceptionData WHERE F_NodeCode = @F_EntityID
		DELETE FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_EntityID
		DELETE FROM dbo.tb_C_NodeDayData WHERE F_NodeCode = @F_EntityID
		DELETE FROM dbo.tb_C_NodeMonthData WHERE F_NodeCode = @F_EntityID
		DELETE FROM dbo.tb_C_InstantDayData WHERE F_NodeCode = @F_EntityID
		DELETE FROM dbo.tb_C_InstantMonthData WHERE F_NodeCode = @F_EntityID
		DELETE FROM dbo.tb_C_EntityHourData WHERE F_EntityID = @F_EntityID
		DELETE FROM dbo.tb_C_EntityDayData WHERE F_EntityID = @F_EntityID
		DELETE FROM dbo.tb_C_EntityMonthData WHERE F_EntityID = @F_EntityID
		DELETE FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID OR F_NodeCode = @F_EntityID
		DELETE FROM dbo.tb_C_EntitySplitNode WHERE F_EntityID = @F_EntityID OR F_NodeCode = @F_EntityID
		FETCH NEXT FROM @cur_entity INTO @F_EntityTreeNo,@F_EntityID
	END
	CLOSE @cur_entity
	DEALLOCATE @cur_entity
END
'
GO
/****** Object:  StoredProcedure [dbo].[proc_C_SynchroEnergyData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_C_SynchroEnergyData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_C_SynchroEnergyData] 
AS
BEGIN
	DECLARE @cur_entity cursor
	DECLARE @cur_node cursor
	DECLARE @F_EntityID bigint
	DECLARE @F_NodeCode bigint
	DECLARE @F_ValueLabel varchar(32)
	DECLARE @F_ReadingDate date
	DECLARE @F_ReadingHour datetime2(0)
	DECLARE @F_ReadingYear smallint
	DECLARE @F_ReadingMonth smallint
	DECLARE @F_EnergyData numeric(18,4)
	DECLARE @F_EnergyCost numeric(18,4)
	DECLARE @F_WorkingData numeric(18,4)
	DECLARE @F_UnWorkingData numeric(18,4)
	DECLARE @F_FlexibleData numeric(18,4)
	DECLARE @F_PeakData numeric(18,4)
	DECLARE @F_ValleyData numeric(18,4)
	DECLARE @F_LevelData numeric(18,4)
	DECLARE @F_PeakCost money
	DECLARE @F_ValleyCost money
	DECLARE @F_LevelCost money
	DECLARE @F_DataGranularity varchar(32)
	DECLARE @F_GranularityValue varchar(32)
	DECLARE @F_StartDate date
	DECLARE @F_EndDate date
	DECLARE @F_EnergyTypeID bigint
	DECLARE @F_Rate numeric(18,2)
	DECLARE @SqlText nvarchar(max)
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT DISTINCT
		F_EntityID,
		F_StartDate,
		ISNULL(F_EndDate,GETDATE()),
		dbo.fun_GetNodeEnergyType(F_NodeID) AS F_EnergyTypeID
	FROM dbo.tb_B_EntityTreeMetering
	WHERE F_SynStatus = 0 AND dbo.fun_GetNodeEnergyType(F_NodeID) IS NOT NULL
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_StartDate,@F_EndDate,@F_EnergyTypeID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DELETE FROM dbo.tb_C_EntitySplitNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate BETWEEN @F_StartDate AND @F_EndDate AND F_EnergyTypeID = @F_EnergyTypeID
		DECLARE @TempDate date	
		SET @TempDate = @F_StartDate
	    
		WHILE DATEDIFF(D,@TempDate,@F_EndDate) >= 0
		BEGIN
			INSERT INTO dbo.tb_C_EntitySplitNode SELECT @F_EntityID,@TempDate,@F_EnergyTypeID,'''',F_NodeCode,'''',F_Rate FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@TempDate,@F_EnergyTypeID,'''')
			INSERT INTO dbo.tb_C_EntitySplitNode SELECT @F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyItem'',F_NodeCode,dbo.fun_GetEntityPropertyValue(F_NodeCode,''P_EnergyItem''),F_Rate FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyItem'')
			INSERT INTO dbo.tb_C_EntitySplitNode SELECT @F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyProperty'',F_NodeCode,dbo.fun_GetEntityPropertyValue(F_NodeCode,''P_EnergyItem''),F_Rate FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyProperty'')
			IF EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntityReprocess WHERE F_EntityID = @F_EntityID AND F_ReadingDate = @TempDate AND F_EnergyTypeID = @F_EnergyTypeID)
			BEGIN
				UPDATE dbo.tb_C_EntityReprocess SET F_SynStatus = 0 WHERE F_EntityID = @F_EntityID AND F_ReadingDate = @TempDate AND F_EnergyTypeID = @F_EnergyTypeID
			END
			ELSE INSERT INTO dbo.tb_C_EntityReprocess VALUES(@F_EntityID,@TempDate,@F_EnergyTypeID,0)
			
			IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = '''')
			BEGIN
				IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate < @TempDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = '''')
				BEGIN
					DELETE FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''''
					INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@TempDate,@F_EnergyTypeID,'''',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@TempDate,@F_EnergyTypeID,'''')
				END
			END
			ELSE INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@TempDate,@F_EnergyTypeID,'''',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@TempDate,@F_EnergyTypeID,'''')
			
			IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem'')
			BEGIN
				IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate < @TempDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem'')
				BEGIN
					DELETE FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem''
					INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyItem'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyItem'')
				END
			END
			ELSE INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyItem'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyItem'')
			
			IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty'')
			BEGIN
				IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate < @TempDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty'')
				BEGIN
					DELETE FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty''
					INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyProperty'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyProperty'')
				END
			END
			ELSE INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyProperty'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@TempDate,@F_EnergyTypeID,''P_EnergyProperty'')
			SET @TempDate = DATEADD(D,1,@TempDate)
		END
		UPDATE dbo.tb_B_EntityTreeMetering SET F_SynStatus = 1 WHERE F_EntityID = @F_EntityID AND F_StartDate = @F_StartDate AND ISNULL(F_EndDate,GETDATE()) = @F_EndDate AND F_SynStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_StartDate,@F_EndDate,@F_EnergyTypeID
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	SET @cur_entity = CURSOR forward_only static FOR 		
	SELECT DISTINCT
		T.F_EntityID,
		T.F_EnergyTypeID
	FROM 
	(
		SELECT DISTINCT
			A.F_EntityID,
			dbo.fun_GetNodeEnergyType(A.F_NodeID) AS F_EnergyTypeID
		FROM dbo.tb_B_EntityTreeMetering A
		WHERE A.F_EndDate IS NULL
	) T
	WHERE T.F_EnergyTypeID IS NOT NULL
		
	OPEN @cur_entity
	FETCH NEXT FROM @cur_entity INTO @F_EntityID,@F_EnergyTypeID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF NOT EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntitySplitNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate = CAST(GETDATE() AS DATE) AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = '''')
		BEGIN
			INSERT INTO dbo.tb_C_EntitySplitNode SELECT @F_EntityID,GETDATE(),@F_EnergyTypeID,'''',F_NodeCode,'''',F_Rate FROM dbo.fun_GetEntitySplitNode(@F_EntityID,GETDATE(),@F_EnergyTypeID,'''')
		END
		IF NOT EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntitySplitNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate = CAST(GETDATE() AS DATE) AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem'')
		BEGIN
			INSERT INTO dbo.tb_C_EntitySplitNode SELECT @F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyItem'',F_NodeCode,dbo.fun_GetEntityPropertyValue(F_NodeCode,''P_EnergyItem''),F_Rate FROM dbo.fun_GetEntitySplitNode(@F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyItem'')
		END
		IF NOT EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntitySplitNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate = CAST(GETDATE() AS DATE) AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty'')
		BEGIN
			INSERT INTO dbo.tb_C_EntitySplitNode SELECT @F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyProperty'',F_NodeCode,dbo.fun_GetEntityPropertyValue(F_NodeCode,''P_EnergyProperty''),F_Rate FROM dbo.fun_GetEntitySplitNode(@F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyProperty'')
		END
		
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = '''')
		BEGIN
			IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate < GETDATE() AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = '''')
			BEGIN
				DELETE FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''''
				INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,GETDATE(),@F_EnergyTypeID,'''',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,GETDATE(),@F_EnergyTypeID,'''')
			END
		END
		ELSE INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,GETDATE(),@F_EnergyTypeID,'''',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,GETDATE(),@F_EnergyTypeID,'''')
		
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem'')
		BEGIN
			IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate < GETDATE() AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem'')
			BEGIN
				DELETE FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem''
				INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyItem'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyItem'')
			END
		END
		ELSE INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyItem'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyItem'')
		
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty'')
		BEGIN
			IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate < GETDATE() AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty'')
			BEGIN
				DELETE FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty''
				INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyProperty'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyProperty'')
			END
		END
		ELSE INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyProperty'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,GETDATE(),@F_EnergyTypeID,''P_EnergyProperty'')

		FETCH NEXT FROM @cur_entity INTO @F_EntityID,@F_EnergyTypeID
	END
	CLOSE @cur_entity
	DEALLOCATE @cur_entity
	
	SET @cur_entity = CURSOR forward_only static FOR 		
	SELECT DISTINCT
		B.F_EntityID,
		CAST(A.F_ReadingDate AS DATE),
		T.F_EnergyTypeID
	FROM 
	(
		SELECT 
			A.F_NodeCode,
			dbo.fun_GetNodeEnergyType(A.F_NodeCode) AS F_EnergyTypeID
		FROM
		(
			SELECT DISTINCT
				F_NodeCode
			FROM dbo.tb_C_NodeHourData A
			WHERE A.F_SynEhStatus = 0
				AND CAST(A.F_ReadingDate AS DATE) < CAST(GETDATE() AS DATE)
		) A
	) T,dbo.tb_C_NodeHourData A,tb_B_EntityTreeMetering B
	WHERE A.F_SynEhStatus = 0
		AND CAST(A.F_ReadingDate AS DATE) < CAST(GETDATE() AS DATE)
		AND T.F_EnergyTypeID IS NOT NULL
		AND T.F_NodeCode = A.F_NodeCode
		AND A.F_NodeCode = B.F_NodeID
		AND A.F_ReadingDate BETWEEN B.F_StartDate AND ISNULL(B.F_EndDate,''9999-12-31'')
	
	OPEN @cur_entity
	FETCH NEXT FROM @cur_entity INTO @F_EntityID,@F_ReadingDate,@F_EnergyTypeID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DELETE FROM dbo.tb_C_EntitySplitNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate = @F_ReadingDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''''
		DELETE FROM dbo.tb_C_EntitySplitNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate = @F_ReadingDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem''
		DELETE FROM dbo.tb_C_EntitySplitNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate = @F_ReadingDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty''
		INSERT INTO dbo.tb_C_EntitySplitNode SELECT @F_EntityID,@F_ReadingDate,@F_EnergyTypeID,'''',F_NodeCode,'''',F_Rate FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@F_ReadingDate,@F_EnergyTypeID,'''')
		INSERT INTO dbo.tb_C_EntitySplitNode SELECT @F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyItem'',F_NodeCode,dbo.fun_GetEntityPropertyValue(F_NodeCode,''P_EnergyItem''),F_Rate FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyItem'')
		INSERT INTO dbo.tb_C_EntitySplitNode SELECT @F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyProperty'',F_NodeCode,dbo.fun_GetEntityPropertyValue(F_NodeCode,''P_EnergyProperty''),F_Rate FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyProperty'')
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = '''')
		BEGIN
			IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate < @F_ReadingDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = '''')
			BEGIN
				DELETE FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''''
				INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@F_ReadingDate,@F_EnergyTypeID,'''',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@F_ReadingDate,@F_EnergyTypeID,'''')
			END
		END
		ELSE INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@F_ReadingDate,@F_EnergyTypeID,'''',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@F_ReadingDate,@F_EnergyTypeID,'''')
		
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem'')
		BEGIN
			IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate < @F_ReadingDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem'')
			BEGIN
				DELETE FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyItem''
				INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyItem'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyItem'')
			END
		END
		ELSE INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyItem'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyItem'')
		
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty'')
		BEGIN
			IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_ReadingDate < @F_ReadingDate AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty'')
			BEGIN
				DELETE FROM dbo.tb_C_EntityLatelyNode WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_DataGranularity = ''P_EnergyProperty''
				INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyProperty'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyProperty'')
			END
		END
		ELSE INSERT INTO dbo.tb_C_EntityLatelyNode SELECT @F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyProperty'',F_NodeCode FROM dbo.fun_GetEntitySplitNode(@F_EntityID,@F_ReadingDate,@F_EnergyTypeID,''P_EnergyProperty'')

		FETCH NEXT FROM @cur_entity INTO @F_EntityID,@F_ReadingDate,@F_EnergyTypeID
	END
	CLOSE @cur_entity
	DEALLOCATE @cur_entity
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT 
		A.F_NodeCode,
		A.F_ValueLabel,
		B.F_ReadingDate,
		SUM(A.F_EnergyData),
		SUM(CASE WHEN dbo.fun_IsWorkingday(A.F_ReadingDate) = 1 THEN CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetWorkingStartTime(A.F_NodeCode,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetWorkingEndTime(A.F_NodeCode,A.F_ReadingDate) THEN A.F_EnergyData ELSE 0 END ELSE 0 END) AS F_WorkingData,
		SUM(CASE WHEN dbo.fun_IsWorkingday(A.F_ReadingDate) = 1 THEN CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetTransitionStime1(A.F_NodeCode,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetTransitionEtime1(A.F_NodeCode,A.F_ReadingDate) THEN A.F_EnergyData WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetTransitionStime2(A.F_NodeCode,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetTransitionEtime2(A.F_NodeCode,A.F_ReadingDate) THEN A.F_EnergyData ELSE 0 END ELSE 0 END) AS F_FlexibleData
	FROM tb_C_NodeHourData A,
		(SELECT DISTINCT F_NodeCode,F_ValueLabel,CAST(F_ReadingDate AS DATE) AS F_ReadingDate FROM dbo.tb_C_NodeHourData WHERE F_SynNdStatus = 0) B
	WHERE A.F_NodeCode = B.F_NodeCode
		AND A.F_ValueLabel = B.F_ValueLabel
		AND CAST(A.F_ReadingDate AS DATE) = B.F_ReadingDate
	GROUP BY A.F_NodeCode,A.F_ValueLabel,B.F_ReadingDate
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingDate,@F_EnergyData,@F_WorkingData,@F_FlexibleData
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @F_UnWorkingData = @F_EnergyData - @F_WorkingData - @F_FlexibleData
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_NodeDayData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = @F_ReadingDate)
		BEGIN
			UPDATE dbo.tb_C_NodeDayData 
			SET F_EnergyData = @F_EnergyData,
				F_WorkingData = @F_WorkingData,
				F_UnWorkingData = @F_UnWorkingData,
				F_FlexibleData = @F_FlexibleData,
				F_SynNmStatus = 0
			WHERE F_NodeCode = @F_NodeCode 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_ReadingDate = @F_ReadingDate
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_NodeDayData
			(
				F_NodeCode,
				F_ValueLabel,
				F_ReadingDate,
				F_EnergyData,
				F_WorkingData,
				F_UnWorkingData,
				F_FlexibleData,
				F_SynNmStatus
			)
			VALUES
			(
				@F_NodeCode,
				@F_ValueLabel,
				@F_ReadingDate,
				@F_EnergyData,
				@F_WorkingData,
				@F_UnWorkingData,
				@F_FlexibleData,
				0
			)
		END
		UPDATE dbo.tb_C_NodeHourData SET F_SynNdStatus = 1 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND CAST(F_ReadingDate AS DATE) = @F_ReadingDate AND F_SynNdStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingDate,@F_EnergyData,@F_WorkingData,@F_FlexibleData
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT
		A.F_EntityID,
		A.F_EnergyTypeID,
		C.F_ValueLabel,
		B.F_DataGranularity,
		B.F_GranularityValue,
		A.F_ReadingDate,
		SUM(C.F_EnergyData * B.F_Rate)
	FROM
		(
			SELECT DISTINCT
				B.F_EntityID,
				A.F_ReadingDate,
				B.F_EnergyTypeID
			FROM dbo.tb_C_NodeHourData A,dbo.tb_C_EntitySplitNode B
			WHERE A.F_SynEhStatus = 0 
				AND A.F_NodeCode = B.F_NodeCode 
				AND CAST(A.F_ReadingDate AS DATE) = B.F_ReadingDate
		) A, 
		dbo.tb_C_EntitySplitNode B,
		dbo.tb_C_NodeHourData C
	WHERE A.F_EntityID = B.F_EntityID
		AND CAST(A.F_ReadingDate AS DATE) = B.F_ReadingDate
		AND A.F_EnergyTypeID = B.F_EnergyTypeID
		AND C.F_NodeCode = B.F_NodeCode
		AND C.F_ReadingDate = A.F_ReadingDate
	GROUP BY A.F_EntityID,A.F_EnergyTypeID,C.F_ValueLabel,B.F_DataGranularity,B.F_GranularityValue,A.F_ReadingDate
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingHour,@F_EnergyData
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntityHourData WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND F_ReadingDate = @F_ReadingHour)
		BEGIN
			UPDATE dbo.tb_C_EntityHourData 
			SET F_EnergyData = @F_EnergyData,
				F_SynEdStatus = 0
			WHERE F_EntityID = @F_EntityID 
				AND F_EnergyTypeID = @F_EnergyTypeID 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_DataGranularity = @F_DataGranularity 
				AND F_GranularityValue = @F_GranularityValue
				AND F_ReadingDate = @F_ReadingHour
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_EntityHourData
			(
				F_EntityID,
				F_EnergyTypeID,
				F_ValueLabel,
				F_DataGranularity,
				F_GranularityValue,
				F_ReadingDate,
				F_EnergyData,
				F_SynEdStatus
			)
			VALUES
			(
				@F_EntityID,
				@F_EnergyTypeID,
				@F_ValueLabel,
				@F_DataGranularity,
				@F_GranularityValue,
				@F_ReadingHour,
				@F_EnergyData,
				0
			)
		END
		UPDATE dbo.tb_C_NodeHourData SET F_SynEhStatus = 1 WHERE F_ReadingDate = @F_ReadingHour AND F_SynEhStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingHour,@F_EnergyData
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT
		A.F_EntityID,
		A.F_EnergyTypeID,
		C.F_ValueLabel,
		B.F_DataGranularity,
		B.F_GranularityValue,
		C.F_ReadingDate,
		SUM(C.F_EnergyData * B.F_Rate)
	FROM dbo.tb_C_EntityReprocess A, 
		dbo.tb_C_EntitySplitNode B,
		dbo.tb_C_NodeHourData C
	WHERE A.F_SynStatus = 0
		AND A.F_EntityID = B.F_EntityID
		AND A.F_ReadingDate = B.F_ReadingDate
		AND A.F_EnergyTypeID = B.F_EnergyTypeID
		AND B.F_NodeCode = C.F_NodeCode
		AND CAST(C.F_ReadingDate AS DATE) = A.F_ReadingDate
	GROUP BY A.F_EntityID,A.F_EnergyTypeID,C.F_ValueLabel,B.F_DataGranularity,B.F_GranularityValue,C.F_ReadingDate
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingHour,@F_EnergyData
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntityHourData WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND F_ReadingDate = @F_ReadingHour)
		BEGIN
			UPDATE dbo.tb_C_EntityHourData 
			SET F_EnergyData = @F_EnergyData,
				F_SynEdStatus = 0
			WHERE F_EntityID = @F_EntityID 
				AND F_EnergyTypeID = @F_EnergyTypeID 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_DataGranularity = @F_DataGranularity 
				AND F_GranularityValue = @F_GranularityValue
				AND F_ReadingDate = @F_ReadingHour
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_EntityHourData
			(
				F_EntityID,
				F_EnergyTypeID,
				F_ValueLabel,
				F_DataGranularity,
				F_GranularityValue,
				F_ReadingDate,
				F_EnergyData,
				F_SynEdStatus
			)
			VALUES
			(
				@F_EntityID,
				@F_EnergyTypeID,
				@F_ValueLabel,
				@F_DataGranularity,
				@F_GranularityValue,
				@F_ReadingHour,
				@F_EnergyData,
				0
			)
		END
		
		UPDATE dbo.tb_C_EntityReprocess SET F_SynStatus = 1 WHERE F_EntityID = @F_EntityID AND F_ReadingDate = CAST(@F_ReadingHour AS DATE) AND F_EnergyTypeID = @F_EnergyTypeID AND F_SynStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingHour,@F_EnergyData
	END
	UPDATE dbo.tb_C_EntityReprocess SET F_SynStatus = 1 WHERE F_SynStatus = 0
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT 
		A.F_EntityID,
		A.F_EnergyTypeID,
		A.F_ValueLabel,
		A.F_DataGranularity,
		A.F_GranularityValue,
		B.F_ReadingDate,
		SUM(A.F_EnergyData),
		SUM(CASE WHEN dbo.fun_IsWorkingday(A.F_ReadingDate) = 1 THEN CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetWorkingStartTime(A.F_EntityID,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetWorkingEndTime(A.F_EntityID,A.F_ReadingDate) THEN A.F_EnergyData ELSE 0 END ELSE 0 END) AS F_WorkingData,
		SUM(CASE WHEN dbo.fun_IsWorkingday(A.F_ReadingDate) = 1 THEN CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetTransitionStime1(A.F_EntityID,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetTransitionEtime1(A.F_EntityID,A.F_ReadingDate) THEN A.F_EnergyData WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetTransitionStime2(A.F_EntityID,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetTransitionEtime2(A.F_EntityID,A.F_ReadingDate) THEN A.F_EnergyData ELSE 0 END ELSE 0 END) AS F_FlexibleData,
		SUM(CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetPeakStartTime1() AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetPeakEndTime1() THEN A.F_EnergyData WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetPeakStartTime2() AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetPeakEndTime2() THEN A.F_EnergyData ELSE 0 END) AS F_PeakData,
		SUM(CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetValleyStartTime() THEN A.F_EnergyData WHEN CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetValleyEndTime() THEN A.F_EnergyData ELSE 0 END) AS F_ValleyData
	FROM tb_C_EntityHourData A,
		(SELECT DISTINCT F_EntityID,F_EnergyTypeID,F_ValueLabel,F_DataGranularity,F_GranularityValue,CAST(F_ReadingDate AS DATE) AS F_ReadingDate FROM dbo.tb_C_EntityHourData WHERE F_SynEdStatus = 0) B
	WHERE A.F_EntityID = B.F_EntityID
		AND A.F_EnergyTypeID = B.F_EnergyTypeID
		AND A.F_ValueLabel = B.F_ValueLabel
		AND A.F_DataGranularity = B.F_DataGranularity
		AND A.F_GranularityValue = B.F_GranularityValue
		AND CAST(A.F_ReadingDate AS DATE) = B.F_ReadingDate
	GROUP BY A.F_EntityID,A.F_EnergyTypeID,A.F_ValueLabel,A.F_DataGranularity,A.F_GranularityValue,B.F_ReadingDate
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingDate,@F_EnergyData,@F_WorkingData,@F_FlexibleData,@F_PeakData,@F_ValleyData
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @F_UnWorkingData = @F_EnergyData - @F_WorkingData - @F_FlexibleData
		SET @F_LevelData = @F_EnergyData - ISNULL(@F_PeakData,0) - ISNULL(@F_ValleyData,0)
		IF EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntityDayData WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND F_ReadingDate = @F_ReadingDate)
		BEGIN
			UPDATE dbo.tb_C_EntityDayData 
			SET F_EnergyData = @F_EnergyData,
				F_WorkingData = @F_WorkingData,
				F_UnWorkingData = @F_UnWorkingData,
				F_FlexibleData = @F_FlexibleData,
				F_PeakData = @F_PeakData,
				F_ValleyData = @F_ValleyData,
				F_LevelData = @F_LevelData,
				F_PeakCost = dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData),
				F_ValleyCost = dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData),
				F_LevelCost = dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData),
				F_EnergyCost = CASE WHEN dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData) + dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData) + dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData) > 0 THEN dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData) + dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData) + dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData) ELSE CASE WHEN @F_DataGranularity = '''' THEN dbo.fun_GetEnergyCost(@F_EnergyTypeID,@F_EnergyData,YEAR(@F_ReadingDate),MONTH(@F_ReadingDate)) ELSE dbo.fun_GetEnergyItemCost(@F_EnergyTypeID,@F_DataGranularity,@F_GranularityValue,@F_EnergyData,YEAR(@F_ReadingDate),MONTH(@F_ReadingDate)) END END,
				F_SynEmStatus = 0
			WHERE F_EntityID = @F_EntityID 
				AND F_EnergyTypeID = @F_EnergyTypeID 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_DataGranularity = @F_DataGranularity 
				AND F_GranularityValue = @F_GranularityValue 
				AND F_ReadingDate = @F_ReadingDate
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_EntityDayData
			(
				F_EntityID,
				F_EnergyTypeID,
				F_ValueLabel,
				F_DataGranularity,
				F_GranularityValue,
				F_ReadingDate,
				F_EnergyData,
				F_WorkingData,
				F_UnWorkingData,
				F_FlexibleData,
				F_PeakData,
				F_ValleyData,
				F_LevelData,
				F_PeakCost,
				F_ValleyCost,
				F_LevelCost,
				F_EnergyCost,
				F_SynEmStatus
			)
			VALUES
			(
				@F_EntityID,
				@F_EnergyTypeID,
				@F_ValueLabel,
				@F_DataGranularity,
				@F_GranularityValue,
				@F_ReadingDate,
				@F_EnergyData,
				@F_WorkingData,
				@F_UnWorkingData,
				@F_FlexibleData,
				@F_PeakData,
				@F_ValleyData,
				@F_LevelData,
				dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData),
				dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData),
				dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData),
				CASE WHEN dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData) + dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData) + dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData) > 0 THEN dbo.fun_GetEnergyPeakCost(@F_EnergyTypeID,@F_PeakData) + dbo.fun_GetEnergyValleyCost(@F_EnergyTypeID,@F_ValleyData) + dbo.fun_GetEnergyLevelCost(@F_EnergyTypeID,@F_LevelData) ELSE CASE WHEN @F_DataGranularity = '''' THEN dbo.fun_GetEnergyCost(@F_EnergyTypeID,@F_EnergyData,YEAR(@F_ReadingDate),MONTH(@F_ReadingDate)) ELSE dbo.fun_GetEnergyItemCost(@F_EnergyTypeID,@F_DataGranularity,@F_GranularityValue,@F_EnergyData,YEAR(@F_ReadingDate),MONTH(@F_ReadingDate)) END END,
				0
			)
		END
		UPDATE dbo.tb_C_EntityHourData SET F_SynEdStatus = 1 WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND CAST(F_ReadingDate AS DATE) = @F_ReadingDate AND F_SynEdStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingDate,@F_EnergyData,@F_WorkingData,@F_FlexibleData,@F_PeakData,@F_ValleyData
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT A.F_NodeCode,A.F_ValueLabel,B.F_ReadingYear,B.F_ReadingMonth,SUM(A.F_EnergyData),SUM(A.F_WorkingData),SUM(A.F_UnWorkingData),SUM(A.F_FlexibleData)  
	FROM tb_C_NodeDayData A,
		(SELECT DISTINCT F_NodeCode,F_ValueLabel,YEAR(F_ReadingDate) AS F_ReadingYear,MONTH(F_ReadingDate) AS F_ReadingMonth FROM dbo.tb_C_NodeDayData WHERE F_SynNmStatus = 0) B
	WHERE A.F_NodeCode = B.F_NodeCode 
		AND A.F_ValueLabel = B.F_ValueLabel 
		AND YEAR(A.F_ReadingDate) = B.F_ReadingYear 
		AND MONTH(A.F_ReadingDate) = B.F_ReadingMonth
	GROUP BY A.F_NodeCode,A.F_ValueLabel,B.F_ReadingYear,B.F_ReadingMonth
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingYear,@F_ReadingMonth,@F_EnergyData,@F_WorkingData,@F_UnWorkingData,@F_FlexibleData
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_NodeMonthData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingYear = @F_ReadingYear AND F_ReadingMonth = @F_ReadingMonth)
		BEGIN
			UPDATE dbo.tb_C_NodeMonthData 
			SET F_EnergyData = @F_EnergyData,
				F_WorkingData = @F_WorkingData,
				F_UnWorkingData = @F_UnWorkingData,
				F_FlexibleData = @F_FlexibleData
			WHERE F_NodeCode = @F_NodeCode 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_ReadingYear = @F_ReadingYear 
				AND F_ReadingMonth = @F_ReadingMonth
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_NodeMonthData
			(
				F_NodeCode,
				F_ValueLabel,
				F_ReadingYear,
				F_ReadingMonth,
				F_EnergyData,
				F_WorkingData,
				F_UnWorkingData,
				F_FlexibleData
			)
			VALUES
			(
				@F_NodeCode,
				@F_ValueLabel,
				@F_ReadingYear,
				@F_ReadingMonth,
				@F_EnergyData,
				@F_WorkingData,
				@F_UnWorkingData,
				@F_FlexibleData
			)
		END
		UPDATE dbo.tb_C_NodeDayData SET F_SynNmStatus = 1 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND YEAR(F_ReadingDate) = @F_ReadingYear AND MONTH(F_ReadingDate) = @F_ReadingMonth AND F_SynNmStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingYear,@F_ReadingMonth,@F_EnergyData,@F_WorkingData,@F_UnWorkingData,@F_FlexibleData
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT 
		A.F_EntityID,
		A.F_EnergyTypeID,
		A.F_ValueLabel,
		A.F_DataGranularity,
		A.F_GranularityValue,
		B.F_ReadingYear,
		B.F_ReadingMonth,
		SUM(F_EnergyData),
		SUM(F_EnergyCost),
		SUM(F_WorkingData),
		SUM(F_UnWorkingData),
		SUM(F_FlexibleData),
		SUM(F_PeakData),
		SUM(F_ValleyData),
		SUM(F_LevelData),
		SUM(F_PeakCost),
		SUM(F_ValleyCost),
		SUM(F_LevelCost)
	FROM tb_C_EntityDayData A,
		(SELECT DISTINCT F_EntityID,F_EnergyTypeID,F_ValueLabel,F_DataGranularity,F_GranularityValue,YEAR(F_ReadingDate) AS F_ReadingYear,MONTH(F_ReadingDate) AS F_ReadingMonth FROM dbo.tb_C_EntityDayData WHERE F_SynEmStatus = 0) B
	WHERE A.F_EntityID = B.F_EntityID
		AND A.F_EnergyTypeID = B.F_EnergyTypeID 
		AND A.F_ValueLabel = B.F_ValueLabel 
		AND A.F_DataGranularity = B.F_DataGranularity 
		AND A.F_GranularityValue = B.F_GranularityValue 
		AND YEAR(A.F_ReadingDate) = B.F_ReadingYear 
		AND MONTH(A.F_ReadingDate) = B.F_ReadingMonth
	GROUP BY A.F_EntityID,A.F_EnergyTypeID,A.F_ValueLabel,A.F_DataGranularity,A.F_GranularityValue,B.F_ReadingYear,B.F_ReadingMonth
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingYear,@F_ReadingMonth,@F_EnergyData,@F_EnergyCost,@F_WorkingData,@F_UnWorkingData,@F_FlexibleData,@F_PeakData,@F_ValleyData,@F_LevelData,@F_PeakCost,@F_ValleyCost,@F_LevelCost
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntityMonthData WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND F_ReadingYear = @F_ReadingYear AND F_ReadingMonth = @F_ReadingMonth)
		BEGIN
			UPDATE dbo.tb_C_EntityMonthData 
			SET F_EnergyData = @F_EnergyData,
				F_WorkingData = @F_WorkingData,
				F_UnWorkingData = @F_UnWorkingData,
				F_FlexibleData = @F_FlexibleData,
				F_PeakData = @F_PeakData,
				F_ValleyData = @F_ValleyData,
				F_LevelData = @F_LevelData,
				F_PeakCost = @F_PeakCost,
				F_ValleyCost = @F_ValleyCost,
				F_LevelCost = @F_LevelCost,
				F_EnergyCost = @F_EnergyCost,
				F_DJtceData = dbo.fun_GetEnergyDJStandardCoal(@F_EnergyTypeID,@F_EnergyData),
				F_DLtceData = dbo.fun_GetEnergyDLStandardCoal(@F_EnergyTypeID,@F_EnergyData)
			WHERE F_EntityID = @F_EntityID 
				AND F_EnergyTypeID = @F_EnergyTypeID 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_DataGranularity = @F_DataGranularity 
				AND F_GranularityValue = @F_GranularityValue 
				AND F_ReadingYear = @F_ReadingYear 
				AND F_ReadingMonth = @F_ReadingMonth
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_EntityMonthData
			(
				F_EntityID,
				F_EnergyTypeID,
				F_ValueLabel,
				F_DataGranularity,
				F_GranularityValue,
				F_ReadingYear,
				F_ReadingMonth,
				F_EnergyData,
				F_WorkingData,
				F_UnWorkingData,
				F_FlexibleData,
				F_PeakData,
				F_ValleyData,
				F_LevelData,
				F_PeakCost,
				F_ValleyCost,
				F_LevelCost,
				F_EnergyCost,
				F_DJtceData,
				F_DLtceData,
				F_DataSource
			)
			VALUES
			(
				@F_EntityID,
				@F_EnergyTypeID,
				@F_ValueLabel,
				@F_DataGranularity,
				@F_GranularityValue,
				@F_ReadingYear,
				@F_ReadingMonth,
				@F_EnergyData,
				@F_WorkingData,
				@F_UnWorkingData,
				@F_FlexibleData,
				@F_PeakData,
				@F_ValleyData,
				@F_LevelData,
				@F_PeakCost,
				@F_ValleyCost,
				@F_LevelCost,
				@F_EnergyCost,
				dbo.fun_GetEnergyDJStandardCoal(@F_EnergyTypeID,@F_EnergyData),
				dbo.fun_GetEnergyDLStandardCoal(@F_EnergyTypeID,@F_EnergyData),
				''1''
			)
		END
		UPDATE dbo.tb_C_EntityDayData SET F_SynEmStatus = 1 WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND YEAR(F_ReadingDate) = @F_ReadingYear AND MONTH(F_ReadingDate) = @F_ReadingMonth AND F_SynEmStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingYear,@F_ReadingMonth,@F_EnergyData,@F_EnergyCost,@F_WorkingData,@F_UnWorkingData,@F_FlexibleData,@F_PeakData,@F_ValleyData,@F_LevelData,@F_PeakCost,@F_ValleyCost,@F_LevelCost
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	DECLARE @F_MaxValue numeric(18,4)
	DECLARE @F_MaxDate datetime2(0)
	DECLARE @F_MinValue numeric(18,4)
	DECLARE @F_MinDate datetime2(0)
	DECLARE @F_AvgValue numeric(18,4)
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT F_NodeCode,F_ValueLabel,F_ReadingDate FROM tb_C_InstantDayData WHERE F_Status = 0
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingDate
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @SqlText = 
		''SELECT 
			@F_MaxValue = MAX(F_DataValue),
			@F_MaxDate = MAX(F_ReadingDate),
			@F_MinValue = MIN(F_DataValue),
			@F_MinDate = MIN(F_ReadingDate),
			@F_AvgValue = AVG(F_DataValue) 
		FROM dbo.tb_C_InitialPData_'' + CAST(YEAR(@F_ReadingDate) AS VARCHAR) + '' 
		WHERE F_NodeCode = '' + CAST(@F_NodeCode AS VARCHAR) + '' 
			AND F_ValueLabel = '''''' + @F_ValueLabel + '''''' 
			AND CAST(F_ReadingDate AS DATE) = '''''' + CAST(@F_ReadingDate AS VARCHAR) + ''''''''

		EXEC sp_executesql @SqlText, N''@F_MaxValue numeric(18,4) out,@F_MaxDate datetime2(0) out,@F_MinValue numeric(18,4) out,@F_MinDate datetime2(0) out,@F_AvgValue numeric(18,4) out'', @F_MaxValue out,@F_MaxDate out, @F_MinValue out, @F_MinDate out,@F_AvgValue out 
		UPDATE dbo.tb_C_InstantDayData SET F_MaxValue = @F_MaxValue,F_MaxDate = @F_MaxDate,F_MinValue = @F_MinValue,F_MinDate = @F_MinDate,F_AvgValue = @F_AvgValue,F_Status = 1 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = @F_ReadingDate

		FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingDate
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT A.F_NodeCode,A.F_ValueLabel,B.F_ReadingYear,B.F_ReadingMonth,MAX(F_MaxValue),MIN(F_MinValue),AVG(F_AvgValue)  
	FROM tb_C_InstantDayData A,
		(SELECT DISTINCT F_NodeCode,F_ValueLabel,YEAR(F_ReadingDate) AS F_ReadingYear,MONTH(F_ReadingDate) AS F_ReadingMonth FROM dbo.tb_C_InstantDayData WHERE F_SynStatus = 0) B
	WHERE A.F_NodeCode = B.F_NodeCode 
		AND A.F_ValueLabel = B.F_ValueLabel 
		AND YEAR(A.F_ReadingDate) = B.F_ReadingYear 
		AND MONTH(A.F_ReadingDate) = B.F_ReadingMonth
	GROUP BY A.F_NodeCode,A.F_ValueLabel,B.F_ReadingYear,B.F_ReadingMonth
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingYear,@F_ReadingMonth,@F_MaxValue,@F_MinValue,@F_AvgValue
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SELECT TOP 1 @F_MaxDate = F_MaxDate FROM dbo.tb_C_InstantDayData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND YEAR(F_ReadingDate) = @F_ReadingYear AND MONTH(F_ReadingDate) = @F_ReadingMonth AND F_MaxValue = @F_MaxValue
		SELECT TOP 1 @F_MinDate = F_MinDate FROM dbo.tb_C_InstantDayData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND YEAR(F_ReadingDate) = @F_ReadingYear AND MONTH(F_ReadingDate) = @F_ReadingMonth AND F_MinValue = @F_MinValue
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_InstantMonthData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingYear = @F_ReadingYear AND F_ReadingMonth = @F_ReadingMonth)
		BEGIN
			UPDATE dbo.tb_C_InstantMonthData 
			SET F_MaxValue = @F_MaxValue,
				F_MaxDate = @F_MaxDate,
				F_MinValue = @F_MinValue,
				F_MinDate = @F_MinDate,
				F_AvgValue = @F_AvgValue
			WHERE F_NodeCode = @F_NodeCode 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_ReadingYear = @F_ReadingYear 
				AND F_ReadingMonth = @F_ReadingMonth
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_InstantMonthData
			(
				F_NodeCode,
				F_ValueLabel,
				F_ReadingYear,
				F_ReadingMonth,
				F_MaxValue,
				F_MaxDate,
				F_MinValue,
				F_MinDate,
				F_AvgValue
			)
			VALUES
			(
				@F_NodeCode,
				@F_ValueLabel,
				@F_ReadingYear,
				@F_ReadingMonth,
				@F_MaxValue,
				@F_MaxDate,
				@F_MinValue,
				@F_MinDate,
				@F_AvgValue
			)
		END
		UPDATE dbo.tb_C_InstantDayData SET F_SynStatus = 1 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND YEAR(F_ReadingDate) = @F_ReadingYear AND MONTH(F_ReadingDate) = @F_ReadingMonth AND F_SynStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingYear,@F_ReadingMonth,@F_MaxValue,@F_MinValue,@F_AvgValue
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_C_RepairDataCheck]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_C_RepairDataCheck]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_C_RepairDataCheck]

AS
BEGIN
	DECLARE @cur_node cursor
	DECLARE @F_NodeCode bigint
	DECLARE @F_ValueLabel varchar(32)
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT A.F_NodeCode,B.F_ValueLabel FROM dbo.tb_A_IoTNode A,dbo.tb_A_Value B WHERE A.F_TemplateCode = B.F_TemplateCode AND B.F_IsStorage = 1 AND B.F_ValueType = ''1''
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF NOT EXISTS(SELECT F_NodeCode FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = CONVERT(varchar(14),DATEADD(HH,-1,GETDATE()),120) + ''00:00'')
		INSERT INTO dbo.tb_C_RepairDataTotal(F_NodeCode,F_ValueLabel,F_StartTime,F_EndTime,F_RepairStatus) VALUES (@F_NodeCode,@F_ValueLabel,CONVERT(varchar(14),DATEADD(HH,-1,GETDATE()),120) + ''00:00'',CONVERT(varchar(14),DATEADD(HH,-1,GETDATE()),120) + ''59:59'',0)
		FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel
	END
	
	CLOSE @cur_node
	DEALLOCATE @cur_node
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_C_RepairBetweenDataCheck]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_C_RepairBetweenDataCheck]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_C_RepairBetweenDataCheck]
	@F_StartDate datetime2(0),
	@F_EndDate datetime2(0)
AS
BEGIN
	DECLARE @cur_node cursor
	DECLARE @F_NodeCode bigint
	DECLARE @F_ValueLabel varchar(32)
	DECLARE @temp datetime2(0)
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT A.F_NodeCode,B.F_ValueLabel FROM dbo.tb_A_IoTNode A,dbo.tb_A_Value B WHERE A.F_TemplateCode = B.F_TemplateCode AND B.F_IsStorage = 1 AND B.F_ValueType = ''1'' AND F_ValueProperty = ''1''
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @temp = @F_StartDate
		WHILE @temp <= @F_EndDate
		BEGIN
			IF NOT EXISTS(SELECT F_NodeCode FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = CONVERT(varchar(14),@temp,120) + ''00:00'')
			DELETE FROM dbo.tb_C_RepairDataTotal WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_StartTime = CONVERT(varchar(14),@temp,120) + ''00:00''
			INSERT INTO dbo.tb_C_RepairDataTotal(F_NodeCode,F_ValueLabel,F_StartTime,F_EndTime,F_RepairStatus) VALUES (@F_NodeCode,@F_ValueLabel,CONVERT(varchar(14),@temp,120) + ''00:00'',CONVERT(varchar(14),@temp,120) + ''59:59'',0)
			SET @temp = DATEADD(HH,1,@temp)
		END
		FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel
	END
	
	CLOSE @cur_node
	DEALLOCATE @cur_node
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetNodePointData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetNodePointData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetNodePointData]
	@F_NodeCode varchar(max),
	@F_ValueLabel varchar(max),
	@F_StartDate date,
	@F_EndDate date,
	@F_TimeFilter varchar(1),
	@F_FilterType varchar(1),
	@F_ValueFilter numeric(18,2)
AS
BEGIN
	DECLARE @F_ValueType varchar(1)
	DECLARE @SqlText varchar(max)
	
	IF CHARINDEX('','',@F_ValueLabel) > 0
		SELECT TOP 1 @F_ValueType = A.F_ValueType FROM dbo.tb_A_Value A, dbo.tb_B_EntityTreeModel B WHERE B.F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_NodeCode)) AND A.F_ValueLabel IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_ValueLabel)) AND B.F_NodeTemplate = A.F_TemplateCode
	ELSE
		SELECT @F_ValueType = A.F_ValueType FROM dbo.tb_A_Value A, dbo.tb_B_EntityTreeModel B WHERE B.F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_NodeCode)) AND A.F_ValueLabel = @F_ValueLabel AND B.F_NodeTemplate = A.F_TemplateCode
	
	IF @F_ValueType = ''1''
	BEGIN
		IF @F_ValueFilter IS NULL
			SELECT
				A.F_NodeID,
				dbo.fun_GetEntityPathName(A.F_NodeID) AS F_NodeName,
				A.F_ValueLabel,
				CONVERT(VARCHAR,A.F_DateTime,120) AS F_HourDate,
				CAST(DATEDIFF(s,''1970-01-01'',A.F_DateTime) AS NUMERIC) * 1000 AS F_TimeStamp,
				CONVERT(VARCHAR(10),A.F_DateTime,120) AS F_Day,
				DATEPART(HH,A.F_DateTime) AS F_Hour,
				ISNULL(B.F_EnergyData,0.00) AS F_EnergyData
			FROM
			(
				SELECT DISTINCT
					A.F_ObjectID AS F_NodeID,
					C.F_EntityName AS F_NodeName,
					D.F_ObjectID AS F_ValueLabel,
					B.F_DateTime
				FROM  dbo.fun_SplitByComma(@F_NodeCode) A,
					dbo.fun_GetDayHourInterval(@F_StartDate,@F_EndDate) B,
					dbo.tb_B_EntityTreeModel C,
					dbo.fun_SplitByComma(@F_ValueLabel) D
				WHERE A.F_ObjectID = C.F_EntityID
			) A LEFT OUTER JOIN dbo.tb_C_NodeHourData B
				ON B.F_NodeCode = A.F_NodeID
				AND B.F_ValueLabel = A.F_ValueLabel
				AND B.F_ReadingDate = A.F_DateTime
			ORDER BY A.F_NodeID,A.F_ValueLabel,F_HourDate
		ELSE IF @F_FilterType = ''<''
			SELECT
				A.F_NodeID,
				dbo.fun_GetEntityPathName(A.F_NodeID) AS F_NodeName,
				A.F_ValueLabel,
				CONVERT(VARCHAR,A.F_DateTime,120) AS F_HourDate,
				CAST(DATEDIFF(s,''1970-01-01'',A.F_DateTime) AS NUMERIC) * 1000 AS F_TimeStamp,
				CONVERT(VARCHAR(10),A.F_DateTime,120) AS F_Day,
				DATEPART(HH,A.F_DateTime) AS F_Hour,
				ISNULL(B.F_EnergyData,0.00) AS F_EnergyData
			FROM
			(
				SELECT DISTINCT
					A.F_ObjectID AS F_NodeID,
					C.F_EntityName AS F_NodeName,
					D.F_ObjectID AS F_ValueLabel,
					B.F_DateTime
				FROM  dbo.fun_SplitByComma(@F_NodeCode) A,
					dbo.fun_GetDayHourInterval(@F_StartDate,@F_EndDate) B,
					dbo.tb_B_EntityTreeModel C,
					dbo.fun_SplitByComma(@F_ValueLabel) D
				WHERE A.F_ObjectID = C.F_EntityID
			) A LEFT OUTER JOIN dbo.tb_C_NodeHourData B
				ON B.F_NodeCode = A.F_NodeID
				AND B.F_ValueLabel = A.F_ValueLabel
				AND B.F_ReadingDate = A.F_DateTime
			WHERE ISNULL(B.F_EnergyData,0.00) < @F_ValueFilter
			ORDER BY A.F_NodeID,A.F_ValueLabel,F_HourDate
		ELSE IF @F_FilterType = ''=''
			SELECT
				A.F_NodeID,
				dbo.fun_GetEntityPathName(A.F_NodeID) AS F_NodeName,
				A.F_ValueLabel,
				CONVERT(VARCHAR,A.F_DateTime,120) AS F_HourDate,
				CAST(DATEDIFF(s,''1970-01-01'',A.F_DateTime) AS NUMERIC) * 1000 AS F_TimeStamp,
				CONVERT(VARCHAR(10),A.F_DateTime,120) AS F_Day,
				DATEPART(HH,A.F_DateTime) AS F_Hour,
				ISNULL(B.F_EnergyData,0.00) AS F_EnergyData
			FROM
			(
				SELECT DISTINCT
					A.F_ObjectID AS F_NodeID,
					C.F_EntityName AS F_NodeName,
					D.F_ObjectID AS F_ValueLabel,
					B.F_DateTime
				FROM  dbo.fun_SplitByComma(@F_NodeCode) A,
					dbo.fun_GetDayHourInterval(@F_StartDate,@F_EndDate) B,
					dbo.tb_B_EntityTreeModel C,
					dbo.fun_SplitByComma(@F_ValueLabel) D
				WHERE A.F_ObjectID = C.F_EntityID
			) A LEFT OUTER JOIN dbo.tb_C_NodeHourData B
				ON B.F_NodeCode = A.F_NodeID
				AND B.F_ValueLabel = A.F_ValueLabel
				AND B.F_ReadingDate = A.F_DateTime
			WHERE ISNULL(B.F_EnergyData,0.00) = @F_ValueFilter
			ORDER BY A.F_NodeID,A.F_ValueLabel,F_HourDate
		ELSE IF @F_FilterType = ''>''
			SELECT
				A.F_NodeID,
				dbo.fun_GetEntityPathName(A.F_NodeID) AS F_NodeName,
				A.F_ValueLabel,
				CONVERT(VARCHAR,A.F_DateTime,120) AS F_HourDate,
				CAST(DATEDIFF(s,''1970-01-01'',A.F_DateTime) AS NUMERIC) * 1000 AS F_TimeStamp,
				CONVERT(VARCHAR(10),A.F_DateTime,120) AS F_Day,
				DATEPART(HH,A.F_DateTime) AS F_Hour,
				ISNULL(B.F_EnergyData,0.00) AS F_EnergyData
			FROM
			(
				SELECT DISTINCT
					A.F_ObjectID AS F_NodeID,
					C.F_EntityName AS F_NodeName,
					D.F_ObjectID AS F_ValueLabel,
					B.F_DateTime
				FROM  dbo.fun_SplitByComma(@F_NodeCode) A,
					dbo.fun_GetDayHourInterval(@F_StartDate,@F_EndDate) B,
					dbo.tb_B_EntityTreeModel C,
					dbo.fun_SplitByComma(@F_ValueLabel) D
				WHERE A.F_ObjectID = C.F_EntityID
			) A LEFT OUTER JOIN dbo.tb_C_NodeHourData B
				ON B.F_NodeCode = A.F_NodeID
				AND B.F_ValueLabel = A.F_ValueLabel
				AND B.F_ReadingDate = A.F_DateTime
			WHERE ISNULL(B.F_EnergyData,0.00) > @F_ValueFilter
			ORDER BY A.F_NodeID,A.F_ValueLabel,F_HourDate
	END
	ELSE IF @F_ValueType = ''2''
	BEGIN
		IF @F_TimeFilter IS NULL OR @F_TimeFilter = '''' 
		BEGIN
			SET @SqlText = 
			''SELECT 
				A.F_NodeID,
				dbo.fun_GetEntityPathName(A.F_NodeID) AS F_NodeName,
				A.F_ValueLabel,
				CONVERT(VARCHAR,B.F_ReadingDate,120) AS F_DateTime,
				CAST(DATEDIFF(s,''''1970-01-01'''',B.F_ReadingDate) AS NUMERIC) * 1000 AS F_TimeStamp,
				ISNULL(B.F_DataValue,0.00) AS F_DataValue 
			FROM 
			( 
				SELECT 
					DISTINCT 
					A.F_ObjectID AS F_NodeID,
					B.F_EntityName AS F_NodeName,
					C.F_ObjectID AS F_ValueLabel 
				FROM dbo.fun_SplitByComma('''''' + @F_NodeCode + '''''') A,
					dbo.tb_B_EntityTreeModel B,
					dbo.fun_SplitByComma('''''' + @F_ValueLabel + '''''') C 
				WHERE A.F_ObjectID = B.F_EntityID
			) A LEFT OUTER JOIN dbo.tb_C_InitialPData_'' + CAST(YEAR(@F_StartDate) AS VARCHAR) + '' B 
				ON A.F_NodeID = B.F_NodeCode 
				AND A.F_ValueLabel = B.F_ValueLabel 
				AND CAST(B.F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@F_StartDate AS VARCHAR) + '''''' AND '''''' + CAST(@F_EndDate AS VARCHAR) + '''''''' +  
			CASE WHEN @F_ValueFilter IS NULL THEN '''' ELSE '' WHERE ISNULL(B.F_DataValue,0.00) '' + @F_FilterType + '' '' + CAST(@F_ValueFilter AS VARCHAR) END + '' 
			ORDER BY A.F_NodeID,A.F_ValueLabel,F_DateTime''
		END
		ELSE IF @F_TimeFilter = ''1''
		BEGIN
			SET @SqlText = 
			''SELECT
				A.F_NodeID,
				dbo.fun_GetEntityPathName(A.F_NodeID) AS F_NodeName,
				A.F_ValueLabel,
				A.F_DateTime,
				A.F_TimeStamp,
				A.F_DataValue
			FROM
			(
				SELECT 
					ROW_NUMBER() over(partition by A.F_NodeID,A.F_ValueLabel,CONVERT(varchar(13),B.F_ReadingDate,120) order by CONVERT(varchar,B.F_ReadingDate,108)) as F_GroupNum,
					A.F_NodeID,
					A.F_NodeName,
					A.F_ValueLabel,
					CONVERT(VARCHAR,B.F_ReadingDate,120) AS F_DateTime,
					CAST(DATEDIFF(s,''''1970-01-01'''',B.F_ReadingDate) AS NUMERIC) * 1000 AS F_TimeStamp,
					ISNULL(B.F_DataValue,0.00) AS F_DataValue 
				FROM 
				( 
					SELECT 
						DISTINCT 
						A.F_ObjectID AS F_NodeID,
						B.F_EntityName AS F_NodeName,
						C.F_ObjectID AS F_ValueLabel 
					FROM dbo.fun_SplitByComma('''''' + @F_NodeCode + '''''') A,
						dbo.tb_B_EntityTreeModel B,
						dbo.fun_SplitByComma('''''' + @F_ValueLabel + '''''') C 
					WHERE A.F_ObjectID = B.F_EntityID
				) A LEFT OUTER JOIN dbo.tb_C_InitialPData_'' + CAST(YEAR(@F_StartDate) AS VARCHAR) + '' B 
					ON A.F_NodeID = B.F_NodeCode 
					AND A.F_ValueLabel = B.F_ValueLabel 
					AND CAST(B.F_ReadingDate AS DATE) BETWEEN '''''' + CAST(@F_StartDate AS VARCHAR) + '''''' AND '''''' + CAST(@F_EndDate AS VARCHAR) + ''''''  
			) AS A
			WHERE A.F_GroupNum = 1 '' + CASE WHEN @F_ValueFilter IS NULL THEN '''' ELSE '' AND A.F_DataValue '' + @F_FilterType + '' '' + CAST(@F_ValueFilter AS VARCHAR) END + '' 
			ORDER BY F_NodeID,F_ValueLabel,F_DateTime''
		END
		EXEC (@SqlText)
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetNodeIntervalData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetNodeIntervalData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetNodeIntervalData] 
	@F_NodeStr varchar(max),
	@ValueLabel varchar(32),
	@StartDate datetime2(0),
	@EndDate datetime2(0)
AS
BEGIN
	DECLARE @cur_node cursor
	DECLARE @F_NodeID bigint
	DECLARE @F_StartDate datetime2(0)
	DECLARE @F_StartValue numeric(18,2)
	DECLARE @F_EndDate datetime2(0)
	DECLARE @F_EndValue numeric(18,2)
	DECLARE @F_Offset int
	
	IF object_id(N''tempdb..#tb_balance'',N''U'') IS NULL
	CREATE TABLE #tb_balance
	(
		F_NodeID bigint,
		F_NodeName varchar(512),
		F_ParentID bigint,
		F_Level int,
		F_StartDate datetime2(0),
		F_StartValue numeric(18,2),
		F_EndDate datetime2(0),
		F_EndValue numeric(18,2),
		F_EnergyData numeric(18,2)
	)
	DELETE FROM #tb_balance
	
	INSERT INTO #tb_balance(F_NodeID,F_NodeName,F_ParentID,F_Level)
	SELECT 
		A.F_EntityID,
		dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
		A.F_ParentID,
		A.F_EntityDepth
	FROM dbo.tb_B_EntityTreeModel A,
		dbo.fun_SplitByComma(@F_NodeStr) B
	WHERE B.F_ObjectID = A.F_EntityID
		--AND dbo.fun_GetNodeAorVType(A.F_EntityID) = 1
	ORDER BY A.F_EntityDepth
		
	SET @cur_node = CURSOR forward_only static FOR SELECT F_NodeID FROM #tb_balance
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeID
	WHILE @@FETCH_STATUS = 0
	BEGIN 
		SET @F_StartDate = NULL
		SET @F_StartValue = NULL
		SELECT @F_StartDate = F_StartHour,@F_StartValue = F_StartValue FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_NodeID AND F_ValueLabel = @ValueLabel AND F_ReadingDate = @StartDate
		SET @F_EndDate = NULL
		SET @F_EndValue = NULL
		SELECT @F_EndDate = F_EndHour,@F_EndValue = F_EndValue FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_NodeID AND F_ValueLabel = @ValueLabel AND F_ReadingDate = @EndDate
		
		UPDATE #tb_balance SET F_StartDate = @F_StartDate,F_StartValue = @F_StartValue,F_EndDate = @F_EndDate,F_EndValue = @F_EndValue WHERE F_NodeID = @F_NodeID
		
		FETCH NEXT FROM @cur_node INTO @F_NodeID
	END
	CLOSE @cur_Node
	DEALLOCATE @cur_Node
	
	UPDATE #tb_balance SET F_EnergyData = F_EndValue - F_StartValue WHERE F_StartValue IS NOT NULL AND F_EndValue IS NOT NULL
	SELECT
		F_NodeID,
		F_NodeName,
		F_ParentID,
		F_Level,
		CONVERT(VARCHAR,F_StartDate,120) AS F_StartDate,
		F_StartValue,
		CONVERT(VARCHAR,F_EndDate,120) AS F_EndDate,
		F_EndValue,
		F_EnergyData
	FROM #tb_balance
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetNodeDateGroupData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetNodeDateGroupData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetNodeDateGroupData]
	@EntityStr varchar(max),	-- 逗号分割对象
	@ValueLabel varchar(32),	-- 参数标签
	@DateType varchar(1),		-- Y：年；M：月；D：日；H：时
	@StartDate varchar(32),		-- 起始日期
	@EndDate varchar(32)		-- 截至日期
AS
BEGIN
	DECLARE @SqlText varchar(max)
	
	IF @DateType = ''Y''
	BEGIN
		SELECT
			A.F_EntityID,
			dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
			A.F_Year,
			ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
			ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
			ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
			ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData
		FROM
		(
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				C.F_Year
			FROM tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma(@EntityStr) B,
				dbo.fun_GetSplityDate(@StartDate,@EndDate) C
			WHERE A.F_EntityID = B.F_ObjectID 
		) A
		LEFT OUTER JOIN dbo.tb_C_NodeMonthData B
			ON A.F_EntityID = B.F_NodeCode
			AND B.F_ValueLabel = @ValueLabel
			AND A.F_Year = B.F_ReadingYear
		GROUP BY A.F_EntityID,A.F_EntityName,A.F_Year
	END
	ELSE IF @DateType = ''M''
	BEGIN
		SELECT
			A.F_EntityID,
			dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
			A.F_Year,
			A.F_Month,
			ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
			ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
			ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
			ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData
		FROM
		(
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				C.F_Year,
				C.F_Month
			FROM tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma(@EntityStr) B,
				dbo.fun_GetSplityMDate(@StartDate,@EndDate) C
			WHERE A.F_EntityID = B.F_ObjectID 
		) A
		LEFT OUTER JOIN dbo.tb_C_NodeMonthData B
			ON A.F_EntityID = B.F_NodeCode
			AND B.F_ValueLabel = @ValueLabel
			AND A.F_Year = B.F_ReadingYear
			AND A.F_Month = B.F_ReadingMonth
		GROUP BY A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month
	END
	ELSE IF @DateType = ''D''
	BEGIN
		SELECT
			A.F_EntityID,
			dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
			A.F_Year,
			A.F_Month,
			A.F_Day,
			ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData,
			ISNULL(SUM(B.F_WorkingData),0) AS F_WorkingData,
			ISNULL(SUM(B.F_UnWorkingData),0) AS F_UnWorkingData,
			ISNULL(SUM(B.F_FlexibleData),0) AS F_FlexibleData
		FROM
		(
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				C.sYear AS F_Year,
				C.sMonth AS F_Month,
				C.sDay AS F_Day
			FROM tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma(@EntityStr) B,
				dbo.fun_GetSplityMdDate(@StartDate,@EndDate,3) C
			WHERE A.F_EntityID = B.F_ObjectID 
		) A
		LEFT OUTER JOIN dbo.tb_C_NodeDayData B
			ON A.F_EntityID = B.F_NodeCode
			AND B.F_ValueLabel = @ValueLabel
			AND A.F_Year = YEAR(B.F_ReadingDate)
			AND A.F_Month = MONTH(B.F_ReadingDate)
			AND A.F_Day = DAY(B.F_ReadingDate)
		GROUP BY A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day
	END
	ELSE IF @DateType = ''H''
	BEGIN
		SELECT
			A.F_EntityID,
			dbo.fun_GetEntityPathName(A.F_EntityID) AS F_EntityName,
			A.F_Year,
			A.F_Month,
			A.F_Day,
			A.F_Hour,
			ISNULL(SUM(B.F_EnergyData),0) AS F_EnergyData
		FROM
		(
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				C.sYear AS F_Year,
				C.sMonth AS F_Month,
				C.sDay AS F_Day,
				C.sHour AS F_Hour
			FROM tb_B_EntityTreeModel A,
				dbo.fun_SplitByComma(@EntityStr) B,
				dbo.fun_GetSplityMdhDate(@StartDate,@EndDate) C
			WHERE A.F_EntityID = B.F_ObjectID 
		) A
		LEFT OUTER JOIN dbo.tb_C_NodeHourData B
			ON A.F_EntityID = B.F_NodeCode
			AND B.F_ValueLabel = @ValueLabel
			AND A.F_Year = YEAR(B.F_ReadingDate)
			AND A.F_Month = MONTH(B.F_ReadingDate)
			AND A.F_Day = DAY(B.F_ReadingDate)
			AND A.F_Hour = DATEPART(HH,B.F_ReadingDate)
		GROUP BY A.F_EntityID,A.F_EntityName,A.F_Year,A.F_Month,A.F_Day,A.F_Hour
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPluginCustomEntity]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPluginCustomEntity]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetPluginCustomEntity] (
	@F_FunctionCode bigint
)
RETURNS @tb_CustomEntity TABLE(id varchar(32), name varchar(128), tag varchar(128),tpl bigint,property bigint,orderby varchar(32))
BEGIN   
    INSERT INTO @tb_CustomEntity
	SELECT
		CAST(T.F_DictionaryID AS VARCHAR) + ''&'' + T.F_Key,
		T.F_Value,
		'''',
		A.F_TemplateID,
		A.F_ParentProperty,
		T.F_Key
	FROM dbo.tb_B_KeyValueList T,
		dbo.tb_A_PluginToCustom A,
		dbo.tb_B_ObjectProperty B
	WHERE A.F_FunctionCode = @F_FunctionCode
		AND A.F_ParentProperty = B.F_PropertyID
		AND B.F_DictionaryType = ''1''
		AND B.F_DictionaryID = T.F_DictionaryID
	ORDER BY A.F_TemplateID,T.F_Key
	INSERT INTO @tb_CustomEntity
	SELECT
		T1.F_EntityID,
		T1.F_EntityName,
		T2.F_GroupTag,
		A.F_TemplateID,
		A.F_ParentProperty,
		T1.F_OrderTag
	FROM dbo.tb_B_EntityTreeModel T1,
		dbo.tb_B_DictTreeModel T2,
		dbo.tb_A_PluginToCustom A,
		dbo.tb_B_ObjectProperty B
	WHERE A.F_FunctionCode = @F_FunctionCode
		AND A.F_ParentProperty = B.F_PropertyID
		AND B.F_DictionaryType = ''2''
		AND B.F_DictionaryID = T1.F_TemplateID
		AND B.F_DictionaryID = T2.F_GroupID
	ORDER BY A.F_TemplateID,T1.F_OrderTag	
   
    RETURN
END
' 
END
GO
/****** Object:  Table [dbo].[tb_A_RoleToApp]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToApp]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_RoleToApp](
	[F_RoleCode] [bigint] NOT NULL,
	[F_AppNo] [bigint] NOT NULL,
	[F_AppType] [int] NULL,
 CONSTRAINT [PK_tb_A_RoleToApp] PRIMARY KEY CLUSTERED 
(
	[F_RoleCode] ASC,
	[F_AppNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  Trigger [trigger_tb_C_NodeHourData]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[trigger_tb_C_NodeHourData]'))
EXEC dbo.sp_executesql @statement = N'
CREATE TRIGGER [dbo].[trigger_tb_C_NodeHourData] ON [dbo].[tb_C_NodeHourData] FOR INSERT, UPDATE
AS
BEGIN
	DECLARE @F_NodeCode bigint
	DECLARE @F_ValueLabel varchar(32)
	DECLARE @F_ReadingDate datetime2(0)
	DECLARE @F_VirtualNCode bigint
	DECLARE @F_VirtualVLabel varchar(32)
	DECLARE @F_Formula varchar(max)
	DECLARE @F_NAndV varchar(max)
	DECLARE @F_ReplaceNCode varchar(32)
	DECLARE @F_ReplaceVLabel varchar(32)
	DECLARE @F_ReplaceValue numeric(18,4)
	DECLARE @F_ComputeValue numeric(18,4)
	DECLARE @cur_node cursor
	DECLARE @cur_replace cursor
	DECLARE @Sql nvarchar(max)
	
	SELECT @F_NodeCode = F_NodeCode,@F_ValueLabel = F_ValueLabel,@F_ReadingDate = F_ReadingDate FROM INSERTED
	IF EXISTS(SELECT F_VirtualNCode FROM dbo.tb_B_VirtualCompute WHERE F_MType = ''N'' AND CHARINDEX(CAST(@F_NodeCode AS VARCHAR) + ''.'' + @F_ValueLabel,F_NAndV) > 0)
	BEGIN
		SET @cur_node = CURSOR forward_only static FOR
		SELECT F_VirtualNCode,F_VirtualVLabel,F_Formula,F_NAndV FROM dbo.tb_B_VirtualCompute WHERE F_MType = ''N'' AND CHARINDEX(CAST(@F_NodeCode AS VARCHAR) + ''.'' + @F_ValueLabel,F_NAndV) > 0
		OPEN @cur_node
		FETCH NEXT FROM @cur_node INTO @F_VirtualNCode,@F_VirtualVLabel,@F_Formula,@F_NAndV
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @cur_replace = CURSOR forward_only static FOR
			SELECT
				SUBSTRING(A.F_ObjectID,1,CHARINDEX(''.'',A.F_ObjectID) - 1) AS F_NodeCode,
				SUBSTRING(A.F_ObjectID,CHARINDEX(''.'',A.F_ObjectID) + 1,LEN(A.F_ObjectID)) AS F_ValueLabel,
				ISNULL(B.F_EnergyData,0) AS F_EnergyData
			FROM dbo.fun_SplitByComma(@F_NAndV) A 
				LEFT OUTER JOIN dbo.tb_C_NodeHourData B 
				ON B.F_NodeCode = SUBSTRING(A.F_ObjectID,1,CHARINDEX(''.'',A.F_ObjectID) - 1) 
					AND B.F_ValueLabel = SUBSTRING(A.F_ObjectID,CHARINDEX(''.'',A.F_ObjectID) + 1,LEN(A.F_ObjectID)) 
					AND B.F_ReadingDate = @F_ReadingDate
					
			OPEN @cur_replace
			FETCH NEXT FROM @cur_replace INTO @F_ReplaceNCode,@F_ReplaceVLabel,@F_ReplaceValue
			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @F_Formula = REPLACE(@F_Formula,@F_ReplaceNCode + ''.'' + @F_ReplaceVLabel,@F_ReplaceValue)
				FETCH NEXT FROM @cur_replace INTO @F_ReplaceNCode,@F_ReplaceVLabel,@F_ReplaceValue
			END
			
			SET @Sql=''SELECT @F_ComputeValue='' + @F_Formula
			EXEC sp_executesql @Sql,N''@F_ComputeValue numeric(18,4) output'',@F_ComputeValue output
			
			IF @F_ComputeValue > 0
			BEGIN
				IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_NodeHourData WHERE F_NodeCode = @F_VirtualNCode AND F_ValueLabel = @F_VirtualVLabel AND F_ReadingDate = @F_ReadingDate)
					UPDATE dbo.tb_C_NodeHourData SET F_EnergyData = @F_ComputeValue,F_SynNdStatus = 0,F_SynEhStatus = 0 WHERE F_NodeCode = @F_VirtualNCode AND F_ValueLabel = @F_VirtualVLabel AND F_ReadingDate = @F_ReadingDate
				ELSE
					INSERT INTO dbo.tb_C_NodeHourData (F_NodeCode,F_ValueLabel,F_ReadingDate,F_EnergyData,F_SynNdStatus,F_SynEhStatus) VALUES (@F_VirtualNCode,@F_VirtualVLabel,@F_ReadingDate,@F_ComputeValue,0,0)
			END
			FETCH NEXT FROM @cur_node INTO @F_VirtualNCode,@F_VirtualVLabel,@F_Formula,@F_NAndV
		END
		CLOSE @cur_node
		CLOSE @cur_replace
		DEALLOCATE @cur_node
		DEALLOCATE @cur_replace
	END
END

'
GO
/****** Object:  Table [dbo].[tb_A_RoleToMenu]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToMenu]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_RoleToMenu](
	[F_RoleCode] [bigint] NOT NULL,
	[F_ProjectNo] [bigint] NOT NULL,
	[F_MenuCode] [bigint] NOT NULL,
 CONSTRAINT [PK_tb_A_RoleToMenu] PRIMARY KEY CLUSTERED 
(
	[F_RoleCode] ASC,
	[F_ProjectNo] ASC,
	[F_MenuCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_GetEntityPropertyValue]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_GetEntityPropertyValue]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_GetEntityPropertyValue]
	@F_EntityTreeNo int, 
	@F_EntityID bigint,
	@F_Date varchar(7)
AS
BEGIN
	SELECT
		C.F_PropertyID,
		C.F_PropertyIdentifier,
		ISNULL(ISNULL(D.F_PropertyValue,C.F_DefaultValue),'''') AS F_PropertyValue
	FROM dbo.tb_B_EntityTreeModel A,
		dbo.tb_B_DictTreeProperty B,
		dbo.tb_B_ObjectProperty C LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty D
		ON D.F_EntityTreeNo = @F_EntityTreeNo
			AND D.F_EntityID = @F_EntityID
			AND C.F_PropertyID = D.F_PropertyID
			AND F_EndYM = ''9999-12-31''
	WHERE A.F_EntityTreeNo = @F_EntityTreeNo
		AND A.F_EntityID = @F_EntityID
		AND C.F_GroupTypeID = ''A''
		AND A.F_TemplateID = B.F_GroupID
		AND B.F_PropertyID = C.F_PropertyID
	UNION
	SELECT
		C.F_PropertyID,
		C.F_PropertyIdentifier,
		ISNULL(ISNULL(D.F_PropertyValue,C.F_DefaultValue),'''') AS F_PropertyValue
	FROM dbo.tb_B_EntityTreeModel A,
		dbo.tb_B_DictTreeProperty B,
		dbo.tb_B_ObjectProperty C LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty D
		ON D.F_EntityTreeNo = @F_EntityTreeNo
			AND D.F_EntityID = @F_EntityID
			AND C.F_PropertyID = D.F_PropertyID
			AND @F_Date BETWEEN CONVERT(VARCHAR(7),F_StartYM,120) AND CONVERT(VARCHAR(7),F_EndYM,120)
	WHERE A.F_EntityTreeNo = @F_EntityTreeNo
		AND A.F_EntityID = @F_EntityID
		AND C.F_GroupTypeID = ''B''
		AND A.F_TemplateID = B.F_GroupID
		AND B.F_PropertyID = C.F_PropertyID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_GetEntityPropertyInfo]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_GetEntityPropertyInfo]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_GetEntityPropertyInfo]
	@F_EntityTreeNo int, 
	@F_EntityID bigint
AS
BEGIN
	SELECT
		A.F_EntityID,
		D.F_PropertyID,
		D.F_PropertyName,
		D.F_PropertyIdentifier,
		D.F_PropertyUnit,
		D.F_GroupTypeID,
		D.F_PropertyTypeID,
		D.F_DictionaryType,
		D.F_DictionaryID,
		D.F_DictionaryKey,
		D.F_DefaultValue,
		D.F_RegularFormula,
		D.F_IsOnlyRead,
		C.F_DecimalDigits,
		C.F_IsNull,
		C.F_Examples
	FROM dbo.tb_B_EntityTreeModel A,
		dbo.tb_B_DictTreeProperty C,
		dbo.tb_B_ObjectProperty D
	WHERE A.F_EntityTreeNo = @F_EntityTreeNo
		AND A.F_EntityID = @F_EntityID
		AND A.F_TemplateID = C.F_GroupID
		AND C.F_PropertyID = D.F_PropertyID
	ORDER BY C.F_OrderNum
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_DictTreePropertyOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_DictTreePropertyOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_DictTreePropertyOperate]
	@OperFlg char(1),
	@F_DictTreeNo int, 
	@F_GroupID bigint,
	@F_PropertyID bigint,
	@F_OrderNum int,
	@F_DecimalDigits varchar(16),
	@F_IsNull bit,
	@F_Examples varchar(256),
	@F_User varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	
	IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_B_DictTreeProperty
		(
			F_DictTreeNo,
			F_GroupID,
			F_PropertyID,
			F_OrderNum,
			F_DecimalDigits,
			F_IsNull,
			F_Examples
		)
		VALUES
		(
			@F_DictTreeNo,
			@F_GroupID,
			@F_PropertyID,
			@F_OrderNum,
			CASE @F_DecimalDigits WHEN '''' THEN NULL ELSE @F_DecimalDigits END,
			@F_IsNull,
			@F_Examples
		)
		SELECT @F_Log = @F_User + ''添加了对象模板（'' + A.F_GroupName + ''）的属性（'' + B.F_PropertyName + ''）。'' FROM dbo.tb_B_DictTreeModel A,dbo.tb_B_ObjectProperty B WHERE A.F_DictTreeNo = @F_DictTreeNo AND A.F_GroupID = @F_GroupID AND B.F_PropertyID = @F_PropertyID
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_B_DictTreeProperty
		SET F_OrderNum = @F_OrderNum,
			F_DecimalDigits = CASE @F_DecimalDigits WHEN '''' THEN NULL ELSE @F_DecimalDigits END,
			F_IsNull = @F_IsNull,
			F_Examples = @F_Examples
		WHERE F_DictTreeNo = @F_DictTreeNo
			AND F_GroupID = @F_GroupID
			AND F_PropertyID = @F_PropertyID
		SELECT @F_Log = @F_User + ''修改了对象模板（'' + A.F_GroupName + ''）的属性（'' + B.F_PropertyName + ''）。'' FROM dbo.tb_B_DictTreeModel A,dbo.tb_B_ObjectProperty B WHERE A.F_DictTreeNo = @F_DictTreeNo AND A.F_GroupID = @F_GroupID AND B.F_PropertyID = @F_PropertyID
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了对象模板（'' + A.F_GroupName + ''）的属性（'' + B.F_PropertyName + ''）。'' FROM dbo.tb_B_DictTreeModel A,dbo.tb_B_ObjectProperty B WHERE A.F_DictTreeNo = @F_DictTreeNo AND A.F_GroupID = @F_GroupID AND B.F_PropertyID = @F_PropertyID
		DELETE FROM dbo.tb_B_DictTreeProperty WHERE F_DictTreeNo = @F_DictTreeNo AND F_GroupID = @F_GroupID AND F_PropertyID = @F_PropertyID
		DELETE FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityID = (SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel WHERE F_TemplateID = @F_GroupID) AND F_PropertyID = @F_PropertyID
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_EntityPropertyImport]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_EntityPropertyImport]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_EntityPropertyImport]
	@EntityStr varchar(max),
	@PropertyTag varchar(32),
	@PropertyValue varchar(512),
	@UserName varchar(32)
AS
BEGIN
	DECLARE @EntityTreeNo int
	DECLARE @EntityID bigint
	DECLARE @GroupTypeID varchar(3)
	DECLARE @PropertyID bigint
	DECLARE @cur_property cursor
	
	
		
	SET @cur_property = CURSOR forward_only static FOR SELECT F_ObjectID FROM dbo.fun_SplitByComma(@EntityStr)
	OPEN @cur_property
	FETCH NEXT FROM @cur_property INTO @EntityID
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SELECT
			@GroupTypeID = A.F_GroupTypeID,
			@PropertyID = A.F_PropertyID,
			@EntityTreeNo = B.F_EntityTreeNo
		FROM dbo.tb_B_ObjectProperty A,
			dbo.tb_B_EntityTreeModel B,
			dbo.tb_B_DictTreeProperty D
		WHERE A.F_PropertyIdentifier = @PropertyTag
			AND B.F_EntityID = @EntityID
			AND B.F_TemplateID = D.F_GroupID
			AND D.F_PropertyID = A.F_PropertyID
			
		IF @GroupTypeID = ''A''
		BEGIN
			IF EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityID = @EntityID AND F_PropertyID = @PropertyID)
			BEGIN
				UPDATE dbo.tb_B_EntityTreeProperty
				SET F_PropertyValue = @PropertyValue,
					F_UpdateDate = GETDATE(),
					F_UpdateUser = @UserName
				WHERE F_EntityID = @EntityID 
					AND F_PropertyID = @PropertyID
			END
			ELSE
			BEGIN
				INSERT INTO dbo.tb_B_EntityTreeProperty
				(
					F_EntityTreeNo,
					F_EntityID,
					F_PropertyID,
					F_PropertyValue,
					F_StartYM,
					F_EndYM,
					F_UpdateDate,
					F_UpdateUser
				)
				VALUES
				(
					@EntityTreeNo,
					@EntityID,
					@PropertyID,
					@PropertyValue,
					CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'',
					''9999-12-31'',
					GETDATE(),
					@UserName
				)
			END
		END
		ELSE IF @GroupTypeID = ''B''
		BEGIN
			IF EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID)
			BEGIN
				IF EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID AND CONVERT(varchar(7),F_StartYM,120) = CONVERT(VARCHAR(7),GETDATE(),120))
				BEGIN
					UPDATE dbo.tb_B_EntityTreeProperty
					SET F_PropertyValue = @PropertyValue,
						F_UpdateDate = GETDATE(),
						F_UpdateUser = @UserName
					WHERE F_EntityTreeNo = @EntityTreeNo 
						AND F_EntityID = @EntityID 
						AND F_PropertyID = @PropertyID 
						AND CONVERT(varchar(7),F_StartYM,120) = CONVERT(VARCHAR(7),GETDATE(),120)
				END
				ELSE IF NOT EXISTS(SELECT F_PropertyID FROM dbo.tb_B_EntityTreeProperty WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID AND CONVERT(varchar(7),F_StartYM,120) > CONVERT(VARCHAR(7),GETDATE(),120))
				BEGIN
					UPDATE dbo.tb_B_EntityTreeProperty SET F_EndYM = DATEADD(D,-1,CAST(CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'' AS date)) WHERE F_EntityTreeNo = @EntityTreeNo AND F_EntityID = @EntityID AND F_PropertyID = @PropertyID AND F_EndYM = ''9999-12-31''
					INSERT INTO dbo.tb_B_EntityTreeProperty
					(
						F_EntityTreeNo,
						F_EntityID,
						F_PropertyID,
						F_PropertyValue,
						F_StartYM,
						F_EndYM,
						F_UpdateDate,
						F_UpdateUser
					)
					VALUES
					(
						@EntityTreeNo,
						@EntityID,
						@PropertyID,
						@PropertyValue,
						CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'',
						''9999-12-31'',
						GETDATE(),
						@UserName
					)
				END
				ELSE
				BEGIN
					UPDATE dbo.tb_B_EntityTreeProperty 
					SET F_EndYM = DATEADD(D,-1,CAST(CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'' AS date)) 
					WHERE F_EntityTreeNo = @EntityTreeNo 
						AND F_EntityID = @EntityID 
						AND F_PropertyID = @PropertyID
						AND F_StartYM = 
						(
							SELECT TOP 1 F_StartYM 
							FROM dbo.tb_B_EntityTreeProperty
							WHERE F_EntityTreeNo = @EntityTreeNo 
								AND F_EntityID = @EntityID 
								AND F_PropertyID = @PropertyID 
								AND CONVERT(varchar(7),F_StartYM,120) < CONVERT(VARCHAR(7),GETDATE(),120)
							ORDER BY F_StartYM DESC
						)
					INSERT INTO dbo.tb_B_EntityTreeProperty
					(
						F_EntityTreeNo,
						F_EntityID,
						F_PropertyID,
						F_PropertyValue,
						F_StartYM,
						F_EndYM,
						F_UpdateDate,
						F_UpdateUser
					)
					SELECT TOP 1
						@EntityTreeNo,
						@EntityID,
						@PropertyID,
						@PropertyValue,
						CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'',
						DATEADD(D,-1,F_StartYM),
						GETDATE(),
						@UserName
					FROM dbo.tb_B_EntityTreeProperty
					WHERE F_EntityTreeNo = @EntityTreeNo 
						AND F_EntityID = @EntityID 
						AND F_PropertyID = @PropertyID 
						AND CONVERT(varchar(7),F_StartYM,120) > CONVERT(VARCHAR(7),GETDATE(),120)
					ORDER BY F_StartYM
				END
			END
			ELSE
			BEGIN
				INSERT INTO dbo.tb_B_EntityTreeProperty
				(
					F_EntityTreeNo,
					F_EntityID,
					F_PropertyID,
					F_PropertyValue,
					F_StartYM,
					F_EndYM,
					F_UpdateDate,
					F_UpdateUser
				)
				VALUES
				(
					@EntityTreeNo,
					@EntityID,
					@PropertyID,
					@PropertyValue,
					CONVERT(VARCHAR(7),GETDATE(),120) + ''-01'',
					''9999-12-31'',
					GETDATE(),
					@UserName
				)
			END
		END
		FETCH NEXT FROM @cur_property INTO @EntityID
	END
	CLOSE @cur_property
	DEALLOCATE @cur_property
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetNodeRelationSum]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetNodeRelationSum]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetNodeRelationSum]
	@F_EntityTreeNo int
AS
BEGIN
	DECLARE @F_EntityTreeType CHAR(1)
	
	SELECT @F_EntityTreeType = F_EntityTreeType FROM dbo.tb_B_EntityTreeType WHERE F_EntityTreeNo = @F_EntityTreeNo
	IF @F_EntityTreeType = ''2''
	BEGIN
		SELECT
			''2'' AS F_NodeType,
			A.F_Key AS F_NodeRelation,
			A.F_Value AS F_RelatioName,
			ISNULL(B.F_TotalCount,0) AS F_TotalCount,
			ISNULL(B.F_ActualCount,0) AS F_ActualCount,
			ISNULL(B.F_VirtualCount,0) AS F_VirtualCount
		FROM 
		(
			SELECT
				B.F_Key,
				B.F_Value
			FROM
			(
				SELECT
					TOP 1 C.F_DictionaryID
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.tb_B_DictTreeProperty B,
					dbo.tb_B_ObjectProperty C
				WHERE A.F_EntityTreeNo = @F_EntityTreeNo
					AND A.F_ParentID <> 0
					AND C.F_PropertyIdentifier = ''P2_NodeRelation''
					AND A.F_TemplateID = B.F_GroupID
					AND B.F_PropertyID = C.F_PropertyID
			) A,dbo.tb_B_KeyValueList B
			WHERE A.F_DictionaryID = B.F_DictionaryID
		) A LEFT OUTER JOIN
		(
			SELECT
				dbo.fun_GetEntityPropertyValue(A.F_EntityID,''P2_NodeRelation'') AS F_NodeRelation,
				COUNT(A.F_EntityID) AS F_TotalCount,
				COUNT(B.F_NodeCode) AS F_ActualCount,
				COUNT(A.F_EntityID) - COUNT(B.F_NodeCode) AS F_VirtualCount
			FROM dbo.tb_B_EntityTreeModel A
				LEFT OUTER JOIN dbo.tb_A_IoTNode B
				ON A.F_EntityID = B.F_NodeCode
			WHERE A.F_EntityTreeNo = @F_EntityTreeNo
				AND A.F_ParentID <> 0
			GROUP BY dbo.fun_GetEntityPropertyValue(A.F_EntityID,''P2_NodeRelation'')
		) B ON A.F_Key = B.F_NodeRelation
		ORDER BY F_NodeRelation
	END
	ELSE IF @F_EntityTreeType = ''4''
	BEGIN
		
		SELECT
			''4'' AS F_NodeType,
			B.F_GroupName AS F_DeviceType,
			COUNT(A.F_EntityID) AS F_TotalCount,
			COUNT(C.F_NodeCode) AS F_ActualCount,
			COUNT(A.F_EntityID) - COUNT(C.F_NodeCode) AS F_VirtualCount
		FROM dbo.tb_B_DictTreeModel B,
			dbo.tb_B_EntityTreeModel A
			LEFT OUTER JOIN dbo.tb_A_IoTNode C ON A.F_EntityID = C.F_NodeCode
		WHERE A.F_EntityTreeNo = @F_EntityTreeNo
			AND A.F_ParentID <> 0
			AND A.F_TemplateID = B.F_GroupID
		GROUP BY B.F_GroupName
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_ExportDeviceTree]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_ExportDeviceTree]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_ExportDeviceTree]
	@F_EntityTreeNo bigint
AS
BEGIN
	DECLARE @F_EntityTreeType char(1)
	DECLARE @F_EntityTreeName varchar(32)
	DECLARE @F_RootID bigint
	DECLARE @SqlText varchar(max)
	DECLARE @SqlTag varchar(max)
	DECLARE @PropertyTag varchar(32)
	DECLARE @cur_property cursor
	
	SELECT @F_EntityTreeType = F_EntityTreeType,@F_EntityTreeName = F_EntityTreeName FROM dbo.tb_B_EntityTreeType WHERE F_EntityTreeNo = @F_EntityTreeNo
	SELECT @F_RootID = F_EntityID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_ParentID = 0
	IF @F_EntityTreeType = ''2''
	BEGIN
		SET @SqlTag = ''''
		SET @cur_property = CURSOR forward_only static FOR SELECT A.F_PropertyIdentifier FROM dbo.tb_B_ObjectProperty A,dbo.tb_B_DictTreeProperty B WHERE B.F_GroupID = (SELECT TOP 1 F_TemplateID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_TemplateID IS NOT NULL) AND B.F_PropertyID = A.F_PropertyID AND A.F_PropertyTypeID <> ''4'' ORDER BY B.F_OrderNum
		OPEN @cur_property
		FETCH NEXT FROM @cur_property INTO @PropertyTag
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @SqlTag = @SqlTag + '',dbo.fun_GetEntityPropertyValue(A.F_EntityID,'''''' + @PropertyTag + '''''') AS '' + @PropertyTag
			FETCH NEXT FROM @cur_property INTO @PropertyTag
		END
		CLOSE @cur_property
		DEALLOCATE @cur_property
		
		SET @SqlText = 
		''SELECT ''''''
			+ @F_EntityTreeName  + '''''' AS F_EntityTreeName,
			A.F_EntityID AS F_NodeCode,
			A.F_EntityName AS F_NodeName,
			dbo.fun_GetNodeTemplateName(A.F_EntityID) AS F_TemplateName,
			dbo.fun_GetNodeEnergyType(A.F_EntityID) AS F_EnergyTypeCode,
			dbo.fun_GetEntityName(dbo.fun_GetNodeEnergyType(A.F_EntityID)) AS F_EnergyTypeName,
			dbo.fun_GetNodeDeviceType(A.F_EntityID) AS F_DeviceTypeCode,
			dbo.fun_GetDictName(A.F_TemplateID) AS F_DeviceTypeName,
			ISNULL(B.F_NodeNo,'''''''') AS F_NodeNo,
			ISNULL(B.F_Location,'''''''') AS F_Location,
			CASE WHEN A.F_ParentID = '' + CAST(@F_RootID AS VARCHAR) + '' THEN 0 ELSE A.F_ParentID END AS F_ParentCode,
			ISNULL(B.F_NodeRank,'''''''') AS F_NodeRank,
			dbo.fun_GetNodeMeteringEntityID(A.F_EntityTreeNo,A.F_EntityID) AS F_ToEntity
			'' + @SqlTag + '' 
		FROM dbo.tb_B_EntityTreeModel A
			LEFT OUTER JOIN dbo.tb_A_IoTNode B ON A.F_EntityID = B.F_NodeCode
		WHERE A.F_EntityTreeNo = '' + CAST(@F_EntityTreeNo AS VARCHAR) + ''
			AND F_ParentID <> 0''
	END
	ELSE IF @F_EntityTreeType = ''4''
	BEGIN
		SET @SqlTag = ''''
		SET @cur_property = CURSOR forward_only static FOR SELECT A.F_PropertyIdentifier FROM dbo.tb_B_ObjectProperty A,dbo.tb_B_DictTreeProperty B WHERE B.F_GroupID = (SELECT TOP 1 F_TemplateID FROM dbo.tb_B_EntityTreeModel WHERE F_EntityTreeNo = @F_EntityTreeNo AND F_TemplateID IS NOT NULL) AND B.F_PropertyID = A.F_PropertyID AND A.F_PropertyTypeID <> ''4'' ORDER BY B.F_OrderNum
		OPEN @cur_property
		FETCH NEXT FROM @cur_property INTO @PropertyTag
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @SqlTag = @SqlTag + '',dbo.fun_GetEntityPropertyValue(A.F_EntityID,'''''' + @PropertyTag + '''''') AS '' + @PropertyTag
			FETCH NEXT FROM @cur_property INTO @PropertyTag
		END
		CLOSE @cur_property
		DEALLOCATE @cur_property
		
		SET @SqlText = 
		''SELECT ''''''
			+ @F_EntityTreeName  + '''''' AS F_EntityTreeName,
			A.F_EntityID AS F_NodeCode,
			A.F_EntityName AS F_NodeName,
			dbo.fun_GetNodeTemplateName(A.F_EntityID) AS F_TemplateName,
			dbo.fun_GetNodeEnergyType(A.F_EntityID) AS F_EnergyTypeCode,
			dbo.fun_GetEntityName(dbo.fun_GetNodeEnergyType(A.F_EntityID)) AS F_EnergyTypeName,
			dbo.fun_GetNodeDeviceType(A.F_EntityID) AS F_DeviceTypeCode,
			dbo.fun_GetDictName(A.F_TemplateID) AS F_DeviceTypeName,
			ISNULL(B.F_NodeNo,'''''''') AS F_NodeNo,
			ISNULL(B.F_Location,'''''''') AS F_Location,
			CASE WHEN A.F_ParentID = '' + CAST(@F_RootID AS VARCHAR) + '' THEN 0 ELSE A.F_ParentID END AS F_ParentCode,
			ISNULL(B.F_NodeRank,'''''''') AS F_NodeRank,
			dbo.fun_GetNodeRelationEntityID(A.F_EntityTreeNo,A.F_EntityID) AS F_ToEntity
			'' + @SqlTag + '' 
		FROM dbo.tb_B_EntityTreeModel A
			LEFT OUTER JOIN dbo.tb_A_IoTNode B ON A.F_EntityID = B.F_NodeCode
		WHERE A.F_EntityTreeNo = '' + CAST(@F_EntityTreeNo AS VARCHAR) + ''
			AND F_ParentID <> 0''
	END
	EXEC (@SqlText)
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_CheckNodeCsvFile]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_CheckNodeCsvFile]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_CheckNodeCsvFile]
AS
BEGIN
	DECLARE @Result bit
	DECLARE @Msg varchar(512)
	DECLARE @Count int
	DECLARE @cur_property cursor
	DECLARE @F_PropertyName varchar(32)
	DECLARE @F_PropertyIdentifier varchar(32)
	DECLARE @F_DictionaryType varchar(1)
	DECLARE @F_DictionaryID varchar(16)
	DECLARE @F_DictionaryKey varchar(16)
	
	SET @Result = 1
	SET @Msg = ''''
	SET @Count = 0
	SELECT @Count = COUNT(F_NodeCode) FROM dbo.tb_A_IoTNodeTemp
	IF @Count = 0
	BEGIN
		SET @Result = 0
		SET @Msg = ''文件内容导入失败，没有生成数据记录信息！''
	END
	ELSE
	BEGIN
		SELECT @Count = COUNT(F_NodeCode) FROM dbo.tb_A_IoTNodeTemp WHERE F_NodeCode IS NULL OR F_NodeCode = ''''
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''设备编号有'' + cast(@Count as varchar) + ''个空项''
			ELSE SET @Msg = @Msg + ''；设备编号有'' + cast(@Count as varchar) + ''个空项''
		END
		
		SELECT @Count = COUNT(F_NodeCode) FROM dbo.tb_A_IoTNodeTemp GROUP BY F_NodeCode HAVING COUNT(1) > 1
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = cast(@Count as varchar) + ''个设备的编号有重复项''
			ELSE SET @Msg = @Msg + ''；'' + cast(@Count as varchar) + ''个设备的编号有重复项''
		END

		SET @Count = 0
		SELECT @Count = COUNT(F_NodeCode) FROM dbo.tb_A_IoTNodeTemp WHERE F_NodeCode IS NOT NULL AND F_NodeCode <> '''' AND ISNUMERIC(F_NodeCode) = 0
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''设备编号有'' + cast(@Count as varchar) + ''个非整型''
			ELSE SET @Msg = @Msg + ''；设备编号有'' + cast(@Count as varchar) + ''个非整型''
		END
		
		SET @Count = 0
		SELECT @Count = COUNT(F_NodeName) FROM dbo.tb_A_IoTNodeTemp WHERE F_NodeName IS NULL OR F_NodeName = ''''
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''设备名称有'' + cast(@Count as varchar) + ''个空项''
			ELSE SET @Msg = @Msg + ''；设备名称有'' + cast(@Count as varchar) + ''个空项''
		END
		
		SET @Count = 0
		SELECT @Count = COUNT(F_NodeCode) FROM dbo.tb_A_IoTNodeTemp WHERE F_NodeTemplate IS NULL OR F_NodeTemplate = ''''
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''设备模板有'' + cast(@Count as varchar) + ''个空项''
			ELSE SET @Msg = @Msg + ''；设备模板有'' + cast(@Count as varchar) + ''个空项''
		END
		
		SET @Count = 0
		SELECT @Count = COUNT(F_NodeCode) FROM tb_A_IoTNodeTemp WHERE F_NodeTemplate NOT IN (SELECT F_TemplateName FROM dbo.tb_A_Template)
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''设备模板有'' + cast(@Count as varchar) + ''个非法值''
			ELSE SET @Msg = @Msg + ''；设备模板有'' + cast(@Count as varchar) + ''个非法值''
		END
		
		SET @Count = 0
		SELECT @Count = COUNT(F_NodeCode) FROM dbo.tb_A_IoTNodeTemp WHERE F_EnergyTypeID IS NOT NULL AND F_EnergyTypeID <> '''' AND ISNUMERIC(F_EnergyTypeID) = 0
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''能源类型有'' + cast(@Count as varchar) + ''个非整型''
			ELSE SET @Msg = @Msg + ''；能源类型有'' + cast(@Count as varchar) + ''个非整型''
		END
		
		SET @Count = 0
		SELECT @Count = COUNT(F_NodeCode) FROM tb_A_IoTNodeTemp WHERE F_EnergyTypeID IS NOT NULL AND F_EnergyTypeID <> '''' AND F_EnergyTypeID NOT IN (SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel)
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''能源类型有'' + cast(@Count as varchar) + ''个非法值''
			ELSE SET @Msg = @Msg + ''；能源类型有'' + cast(@Count as varchar) + ''个非法值''
		END
		
		SET @Count = 0
		SELECT @Count = COUNT(F_NodeCode) FROM dbo.tb_A_IoTNodeTemp WHERE F_DeviceTypeID IS NULL OR F_DeviceTypeID = ''''
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''设备类型有'' + cast(@Count as varchar) + ''个空项''
			ELSE SET @Msg = @Msg + ''；设备类型有'' + cast(@Count as varchar) + ''个空项''
		END

		SET @Count = 0
		SELECT @Count = COUNT(F_NodeCode) FROM dbo.tb_A_IoTNodeTemp WHERE F_DeviceTypeID IS NOT NULL AND F_DeviceTypeID <> '''' AND ISNUMERIC(F_DeviceTypeID) = 0
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''设备类型有'' + cast(@Count as varchar) + ''个非整型''
			ELSE SET @Msg = @Msg + ''；设备类型有'' + cast(@Count as varchar) + ''个非整型''
		END
		
		SET @Count = 0
		SELECT @Count = COUNT(F_NodeCode) FROM tb_A_IoTNodeTemp WHERE F_DeviceTypeID NOT IN (SELECT F_GroupID FROM dbo.tb_B_DictTreeModel)
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''设备类型有'' + cast(@Count as varchar) + ''个非法值''
			ELSE SET @Msg = @Msg + ''；设备类型有'' + cast(@Count as varchar) + ''个非法值''
		END
		
		SET @Count = 0
		SELECT @Count = COUNT(F_ParentCode) FROM dbo.tb_A_IoTNodeTemp WHERE F_ParentCode IS NULL OR F_ParentCode = ''''
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''父设备编号有'' + cast(@Count as varchar) + ''个空项''
			ELSE SET @Msg = @Msg + ''；父设备编号有'' + cast(@Count as varchar) + ''个空项''
		END
		
		SET @Count = 0
		SELECT @Count = COUNT(F_NodeCode) FROM dbo.tb_A_IoTNodeTemp WHERE F_ParentCode IS NOT NULL AND F_ParentCode <> '''' AND ISNUMERIC(F_ParentCode) = 0
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''父设备编号有'' + cast(@Count as varchar) + ''个非整型''
			ELSE SET @Msg = @Msg + ''；父设备编号有'' + cast(@Count as varchar) + ''个非整型''
		END
		
		SET @Count = 0
		SELECT @Count = COUNT(F_ObjectID) FROM dbo.fun_SplitBySemicolon((SELECT STUFF((SELECT '';'' + ltrim(F_ToEntity) FROM tb_A_IoTNodeTemp WHERE F_ToEntity IS NOT NULL AND F_ToEntity <> '''' FOR XML PATH('''')),1,1,''''))) WHERE F_ObjectID NOT IN (SELECT F_EntityID FROM dbo.tb_B_EntityTreeModel)
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''计量/隶属对象有'' + cast(@Count as varchar) + ''个非法值''
			ELSE SET @Msg = @Msg + ''；计量/隶属对象有'' + cast(@Count as varchar) + ''个非法值''
		END
		SET @cur_property = CURSOR forward_only static FOR 
		SELECT 
			A.F_PropertyIdentifier,
			A.F_PropertyName,
			A.F_DictionaryType,
			A.F_DictionaryID,
			A.F_DictionaryKey	
		FROM dbo.tb_B_ObjectProperty A,
			dbo.tb_B_DictTreeProperty B
		WHERE B.F_GroupID = (SELECT TOP 1 dbo.fun_GetNodeDeviceType(F_NodeCode) FROM dbo.tb_A_IoTNodeTemp) 
			AND B.F_PropertyID = A.F_PropertyID 
			AND A.F_DictionaryType IS NOT NULL
			AND A.F_DictionaryType <> ''''
			AND A.F_PropertyIdentifier IN (SELECT DISTINCT F_PropertyIdentifier FROM dbo.tb_A_IoTNodeTempV) 
		ORDER BY B.F_OrderNum
		
		OPEN @cur_property
		FETCH NEXT FROM @cur_property INTO @F_PropertyIdentifier,@F_PropertyName,@F_DictionaryType,@F_DictionaryID,@F_DictionaryKey
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @F_DictionaryType = ''1''
			BEGIN
				SET @Count = 0
				SELECT @Count = COUNT(F_PropertyIdentifier) FROM dbo.tb_A_IoTNodeTempV WHERE F_PropertyIdentifier = @F_PropertyIdentifier AND F_PropertyValue IS NOT NULL AND F_PropertyValue <> '''' AND F_PropertyValue NOT IN (SELECT F_Key FROM tb_B_KeyValueList WHERE F_DictionaryID = @F_DictionaryID)
				IF @Count > 0
				BEGIN
					SET @Result = 0
					IF @Msg = '''' SET @Msg = @F_PropertyName + ''有'' + cast(@Count as varchar) + ''个非法值''
					ELSE SET @Msg = @Msg + ''；'' + @F_PropertyName + ''有'' + cast(@Count as varchar) + ''个非法值''
				END
			END
			ELSE IF @F_DictionaryType = ''2''
			BEGIN
				SET @Count = 0
				IF @F_DictionaryKey IS NULL OR @F_DictionaryKey = ''''
				BEGIN
					SELECT @Count = COUNT(F_PropertyIdentifier) FROM dbo.tb_A_IoTNodeTempV WHERE F_PropertyIdentifier = @F_PropertyIdentifier AND F_PropertyValue IS NOT NULL AND F_PropertyValue <> '''' AND F_PropertyValue NOT IN (SELECT F_EntityID FROM tb_B_EntityTreeModel WHERE F_TemplateID = @F_DictionaryID)
					IF @Count > 0
					BEGIN
						SET @Result = 0
						IF @Msg = '''' SET @Msg = @F_PropertyName + ''有'' + cast(@Count as varchar) + ''个非法值''
						ELSE SET @Msg = @Msg + ''；'' + @F_PropertyName + ''有'' + cast(@Count as varchar) + ''个非法值''
					END
				END
				ELSE
				BEGIN
					SELECT @Count = COUNT(F_PropertyIdentifier) FROM dbo.tb_A_IoTNodeTempV WHERE F_PropertyIdentifier = @F_PropertyIdentifier AND F_PropertyValue IS NOT NULL AND F_PropertyValue <> '''' AND F_PropertyValue NOT IN (SELECT B.F_PropertyValue FROM tb_B_EntityTreeModel A,dbo.tb_B_EntityTreeProperty B WHERE A.F_TemplateID = @F_DictionaryID AND B.F_PropertyID = @F_DictionaryKey AND A.F_EntityID = B.F_EntityID AND B.F_EndYM = ''9999-12-31'')
					IF @Count > 0
					BEGIN
						SET @Result = 0
						IF @Msg = '''' SET @Msg = @F_PropertyName + ''有'' + cast(@Count as varchar) + ''个非法值''
						ELSE SET @Msg = @Msg + ''；'' + @F_PropertyName + ''有'' + cast(@Count as varchar) + ''个非法值''
					END
				END
			END
			FETCH NEXT FROM @cur_property INTO @F_PropertyIdentifier,@F_PropertyName,@F_DictionaryType,@F_DictionaryID,@F_DictionaryKey
		END
		CLOSE @cur_property
		DEALLOCATE @cur_property
	END
	SELECT @Result AS result,@Msg AS msg
END
' 
END
GO
/****** Object:  Table [dbo].[tb_A_FunctionEnvVar]    Script Date: 11/09/2020 15:24:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[tb_A_FunctionEnvVar]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[tb_A_FunctionEnvVar](
	[F_FunctionCode] [bigint] NOT NULL,
	[F_EnvVarKey] [varchar](50) NOT NULL,
	[F_EnvVarValue] [varchar](max) NULL,
	[F_PluginCode] [bigint] NULL,
 CONSTRAINT [PK_tb_A_FunctionEnvVar] PRIMARY KEY CLUSTERED 
(
	[F_FunctionCode] ASC,
	[F_EnvVarKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetDataSqlScript]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetDataSqlScript]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetDataSqlScript]
	@F_SysStr varchar(max),
	@F_SysMenuStr varchar(max),
	@F_AppStr varchar(max),
	@F_DTreeNo int,
	@F_GEntityStr varchar(max)
AS
BEGIN
	SELECT
		1 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_FunctionType'' AS F_Table,
		''F_FunctionTypeNo,F_FunctionTypeName,F_FunctionTypeTag'' AS F_Fields,
		'''''''' + F_FunctionTypeNo + '''''','''''' + F_FunctionTypeName + '''''','''''' + F_FunctionTypeTag + '''''''' AS F_Values 
	FROM dbo.tb_A_FunctionType
	UNION
	SELECT 
		2 AS F_RowNum,
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_Plugins'' AS F_Table,
		''F_PluginCode,F_PluginName,F_PluginTag,F_PluginTypeNo,F_PluginCategory,F_IsConfig,F_ConfType,F_EnergyConfig,F_TemplateConfig,F_DeviceConfig,F_GuideMode'' AS F_Fields,
		CAST(F_PluginCode AS VARCHAR) + '','''''' + F_PluginName + '''''','''''' + F_PluginTag + '''''','''''' + F_PluginTypeNo + '''''','''''' + F_PluginCategory + '''''','' + ISNULL(CAST(F_IsConfig AS VARCHAR),''NULL'') + '','''''' + F_ConfType + '''''','' + ISNULL(CAST(F_EnergyConfig AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_TemplateConfig AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_DeviceConfig AS VARCHAR),''NULL'') + '','''''' + F_GuideMode + '''''''' AS F_Values 
	FROM dbo.tb_A_Plugins
	WHERE F_PluginCode IN
	(
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT 
		3 AS F_RowNum,
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_Function'' AS F_Table,
		''F_FunctionCode,F_FunctionName,F_FunctionTag,F_FunctionTypeNo,F_PluginCode'' AS F_Fields,
		CAST(F_FunctionCode AS VARCHAR) + '','''''' + F_FunctionName + '''''','''''' + F_FunctionTag + '''''','''''' + F_FunctionTypeNo + '''''','' + CAST(F_PluginCode AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_Function
	WHERE F_FunctionCode IN
	(
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT 
		4 AS F_RowNum,
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_PluginEnvVar'' AS F_Table,
		''F_PluginCode,F_EnvVarKey'' AS F_Fields,
		CAST(F_PluginCode AS VARCHAR) + '','''''' + F_EnvVarKey + '''''''' AS F_Values 
	FROM dbo.tb_A_PluginEnvVar
	WHERE F_PluginCode IN
	(
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT
		5 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_FunctionEnvVar'' AS F_Table,
		''F_FunctionCode,F_EnvVarKey,F_EnvVarValue,F_PluginCode'' AS F_Fields,
		CAST(F_FunctionCode AS VARCHAR) + '','''''' + F_EnvVarKey + '''''','''''' + F_EnvVarValue + '''''','' + CAST(F_PluginCode AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_FunctionEnvVar
	WHERE F_FunctionCode IN
	(
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT
		6 AS F_RowNum, 
		''SET IDENTITY_INSERT tb_A_Project ON'' AS F_Header,
		''SET IDENTITY_INSERT tb_A_Project OFF'' AS F_Footer,
		''dbo.tb_A_Project'' AS F_Table,
		''F_ProjectNo,F_ProjectName,F_ProjectAbbr,F_ProjectTag,F_ProjectType,F_ProjectIndex,F_ProjectColor,F_ProjectDes,F_ProjectFrame,F_SystemFunction,F_GuideFunction'' AS F_Fields,
		CAST(F_ProjectNo AS VARCHAR) + '','''''' + F_ProjectName + '''''','''''' + F_ProjectAbbr + '''''','''''' + F_ProjectTag + '''''','''''' + F_ProjectType + '''''','' + CAST(F_ProjectIndex AS VARCHAR) + '','''''' + F_ProjectColor + '''''','''''' +  F_ProjectDes + '''''','' +  CAST(F_ProjectFrame AS VARCHAR) + '','' + CAST(ISNULL(F_SystemFunction,'''') AS VARCHAR) + '','' + CAST(ISNULL(F_GuideFunction,'''') AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_Project
	WHERE F_ProjectNo IN
	(
		SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_SysStr)
		UNION
		SELECT DISTINCT SUBSTRING(F_ObjectID,1,CHARINDEX(''_'',F_ObjectID) - 1) FROM dbo.fun_SplitByComma(@F_SysMenuStr)
	)
	UNION
	SELECT
		7 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_ProjectToMenu'' AS F_Table,
		''F_ProjectNo,F_MenuCode,F_MenuTag,F_MenuName,F_MenuAbbr,F_MenuType,F_MenuIndex,F_MenuPosition,F_IsHasChild,F_ParentCode,F_FunctionCode'' AS F_Fields,
		CAST(F_ProjectNo AS VARCHAR) + '','' + CAST(F_MenuCode AS VARCHAR) + '','''''' + F_MenuTag + '''''','''''' + F_MenuName + '''''','''''' + F_MenuAbbr + '''''','''''' + F_MenuType + '''''','' + CAST(F_MenuIndex AS VARCHAR) + '','''''' + F_MenuPosition + '''''','' +  CAST(ISNULL(F_IsHasChild,0) AS VARCHAR) + '','' +  CAST(F_ParentCode AS VARCHAR) + '','' + CAST(ISNULL(F_FunctionCode,'''') AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_ProjectToMenu
	WHERE F_ProjectNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_SysStr))
		OR F_MenuCode IN (SELECT SUBSTRING(F_ObjectID,CHARINDEX(''_'',F_ObjectID) + 1,LEN(F_ObjectID)) FROM dbo.fun_SplitByComma(@F_SysMenuStr))
	UNION
	SELECT
		8 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_MobileApp'' AS F_Table,
		''F_AppCode,F_AppName,F_AppTag,F_AppType,F_FunctionCode'' AS F_Fields,
		CAST(F_AppCode AS VARCHAR) + '','''''' + F_AppName + '''''','''''' + F_AppTag + '''''','''''' + F_AppType + '''''','' + CAST(F_FunctionCode AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_MobileApp
	WHERE F_AppCode IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_AppStr))
	UNION
	SELECT
		9 AS F_RowNum, 
		''SET IDENTITY_INSERT tb_B_EntityTreeType ON'' AS F_Header,
		''SET IDENTITY_INSERT tb_B_EntityTreeType OFF'' AS F_Footer,
		''dbo.tb_B_EntityTreeType'' AS F_Table,
		''F_EntityTreeNo,F_EntityTreeName,F_EntityTreeType,F_TreeDepth,F_Memo'' AS F_Fields,
		CAST(F_EntityTreeNo AS VARCHAR) + '','''''' + F_EntityTreeName + '''''','''''' + F_EntityTreeType + '''''','' + CAST(F_TreeDepth AS VARCHAR) + '','''''' + F_Memo + '''''''' AS F_Values 
	FROM dbo.tb_B_EntityTreeType
	WHERE F_EntityTreeNo = @F_DTreeNo
		OR F_EntityTreeNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_GEntityStr))
	UNION
	SELECT
		10 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_B_EntityTreeModel'' AS F_Table,
		''F_EntityTreeNo,F_EntityID,F_ParentID,F_EntityName,F_EntityDepth,F_ObjectGroup,F_TemplateID,F_NodeTemplate,F_EnergyTypeID,F_DeviceTypeID,F_IsHasChild,F_IsDisplay,F_OrderTag,F_MapTag'' AS F_Fields,
		CAST(F_EntityTreeNo AS VARCHAR) + '','' + CAST(F_EntityID AS VARCHAR) + '','' + CAST(F_ParentID AS VARCHAR) + '','''''' + F_EntityName + '''''','' + CAST(F_EntityDepth AS VARCHAR) + '','''''' + ISNULL(F_ObjectGroup,'''') + '''''','' + ISNULL(CAST(F_TemplateID AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_NodeTemplate AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_EnergyTypeID AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_DeviceTypeID AS VARCHAR),''NULL'') + '','' + CAST(F_IsHasChild AS VARCHAR) + '','' + CAST(F_IsDisplay AS VARCHAR) + '','''''' + CAST(ISNULL(F_OrderTag,'''') AS VARCHAR) + '''''','''''' + CAST(ISNULL(F_MapTag,'''') AS VARCHAR) + '''''''' AS F_Values 
	FROM dbo.tb_B_EntityTreeModel
	WHERE F_EntityTreeNo = @F_DTreeNo OR F_EntityTreeNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_GEntityStr))
	UNION
	SELECT
		11 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_B_EntityTreeProperty'' AS F_Table,
		''F_EntityTreeNo,F_EntityID,F_PropertyID,F_PropertyValue,F_StartYM,F_EndYM'' AS F_Fields,
		CAST(F_EntityTreeNo AS VARCHAR) + '','' + CAST(F_EntityID AS VARCHAR) + '','' + CAST(F_PropertyID AS VARCHAR) + '','''''' + F_PropertyValue + '''''','''''' + CAST(F_StartYM AS VARCHAR) + '''''','''''' + CAST(F_EndYM AS VARCHAR) + '''''''' AS F_Values 
	FROM dbo.tb_B_EntityTreeProperty
	WHERE F_EntityTreeNo = @F_DTreeNo
	ORDER BY F_RowNum
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_SStrategyOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_SStrategyOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_SStrategyOperate]
	@F_StrategyType varchar(32),
	@F_Checked bit,
	@F_EffectiveValue varchar(16),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @F_Checked = 0
	BEGIN
		DELETE FROM dbo.tb_D_StorageStrategy WHERE F_StrategyType = @F_StrategyType
		SET @F_Log = @F_UserID + ''删除了（'' + CASE @F_StrategyType WHEN ''init_data'' THEN ''原始数据'' WHEN ''hour_data'' THEN ''小时数据'' WHEN ''log_file'' THEN ''日志文件'' END + ''）优化策略配置。''
		EXEC dbo.proc_A_WriteEventLog 16,@F_UserID,@F_IP,@F_Log
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT F_StrategyType FROM dbo.tb_D_StorageStrategy WHERE F_StrategyType = @F_StrategyType)
		BEGIN
			UPDATE dbo.tb_D_StorageStrategy SET F_EffectiveValue = @F_EffectiveValue WHERE F_StrategyType = @F_StrategyType
			SET @F_Log = @F_UserID + ''更新了（'' + CASE @F_StrategyType WHEN ''init_data'' THEN ''原始数据'' WHEN ''hour_data'' THEN ''小时数据'' WHEN ''log_file'' THEN ''日志文件'' END + ''）优化边界值为：'' + @F_EffectiveValue + ''。''
			EXEC dbo.proc_A_WriteEventLog 16,@F_UserID,@F_IP,@F_Log
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_D_StorageStrategy (F_StrategyType) VALUES (@F_StrategyType)
			SET @F_Log = @F_UserID + ''添加了（'' + CASE @F_StrategyType WHEN ''init_data'' THEN ''原始数据'' WHEN ''hour_data'' THEN ''小时数据'' WHEN ''log_file'' THEN ''日志文件'' END + ''）优化策略配置。''
			EXEC dbo.proc_A_WriteEventLog 16,@F_UserID,@F_IP,@F_Log
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_SplitTimeOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_SplitTimeOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_SplitTimeOperate]
	@F_Year int,
	@F_Month int,
	@F_WStartTime varchar(32),
	@F_WEndTime varchar(32),
	@F_TStartTime1 varchar(32),
	@F_TEndTime1 varchar(32),
	@F_TStartTime2 varchar(32),
	@F_TEndTime2 varchar(32),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	
	IF @F_Year = 9999 DELETE FROM dbo.tb_D_WorkingTime WHERE F_Year <> 9999 AND F_Month <> 99 AND F_EntityID = ''''
	DELETE FROM dbo.tb_D_WorkingTime WHERE F_Year = @F_Year AND F_Month = @F_Month AND F_EntityID = ''''
    INSERT INTO dbo.tb_D_WorkingTime VALUES(@F_Year,@F_Month,'''',CASE @F_TStartTime1 WHEN '''' THEN NULL ELSE @F_TStartTime1 + '':00:00'' END,CASE @F_TEndTime1 WHEN '''' THEN NULL ELSE @F_TEndTime1 + '':00:00'' END,CASE @F_WStartTime WHEN '''' THEN NULL ELSE @F_WStartTime + '':00:00'' END,CASE @F_WEndTime WHEN '''' THEN NULL ELSE @F_WEndTime + '':00:00'' END,CASE @F_TStartTime2 WHEN '''' THEN NULL ELSE @F_TStartTime2 + '':00:00'' END,CASE @F_TEndTime2 WHEN '''' THEN NULL ELSE @F_TEndTime2 + '':00:00'' END)
	
	SET @F_Log = @F_UserID + ''设置'' + CASE @F_Year WHEN 9999 THEN ''所有月份'' ELSE CAST(@F_Year AS VARCHAR) + ''年'' + CAST(@F_Month AS VARCHAR) + ''月'' END + ''的工作时间为'' + @F_WStartTime + '':00:00'' + ''～'' + @F_WEndTime + '':00:00''
	IF @F_TStartTime1 <> '''' SET @F_Log = @F_Log + ''，过渡工作时间为'' + @F_TStartTime1 + '':00:00'' + ''～'' + @F_TEndTime1 + '':00:00''
	IF @F_TStartTime2 <> '''' SET @F_Log = @F_Log + ''，过渡工作时间为'' + @F_TStartTime2 + '':00:00'' + ''～'' + @F_TEndTime2 + '':00:00''
	EXEC dbo.proc_A_WriteEventLog 10,@F_UserID,@F_IP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_PvlTimePriceOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_PvlTimePriceOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_PvlTimePriceOperate]
	@F_Type char(1),
	@F_EnergyTypeID bigint,	
	@F_PeakStime1 varchar(32),
	@F_PeakEtime1 varchar(32),
	@F_PeakStime2 varchar(32),
	@F_PeakEtime2 varchar(32),
	@F_PeakPrice varchar(32),
	@F_ValleyStime varchar(32),
	@F_ValleyEtime varchar(32),
	@F_ValleyPrice varchar(32),
	@F_LevelPrice varchar(32),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @F_Type = ''P''
	BEGIN
		IF EXISTS(SELECT * FROM dbo.tb_D_PVLTimePrice WHERE F_EnergyTypeID = @F_EnergyTypeID)
		BEGIN
			UPDATE dbo.tb_D_PVLTimePrice 
			SET F_PeakStime1 = CASE @F_PeakStime1 WHEN '''' THEN NULL ELSE @F_PeakStime1 + '':00:00'' END,
				F_PeakEtime1 = CASE @F_PeakEtime1 WHEN '''' THEN NULL ELSE @F_PeakEtime1 + '':00:00'' END,
				F_PeakStime2 = CASE @F_PeakStime2 WHEN '''' THEN NULL ELSE @F_PeakStime2 + '':00:00'' END,
				F_PeakEtime2 = CASE @F_PeakEtime2 WHEN '''' THEN NULL ELSE @F_PeakEtime2 + '':00:00'' END,
				F_PeakPrice = CASE @F_PeakPrice WHEN '''' THEN NULL ELSE @F_PeakPrice END
			WHERE F_EnergyTypeID = @F_EnergyTypeID
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_D_PVLTimePrice 
			(
				F_EnergyTypeID,
				F_PeakStime1,
				F_PeakEtime1,
				F_PeakStime2,
				F_PeakEtime2,
				F_PeakPrice
			)
			VALUES
			(
				@F_EnergyTypeID,
				CASE @F_PeakStime1 WHEN '''' THEN NULL ELSE @F_PeakStime1 + '':00:00'' END,
				CASE @F_PeakEtime1 WHEN '''' THEN NULL ELSE @F_PeakEtime1 + '':00:00'' END,
				CASE @F_PeakStime2 WHEN '''' THEN NULL ELSE @F_PeakStime2 + '':00:00'' END,
				CASE @F_PeakEtime2 WHEN '''' THEN NULL ELSE @F_PeakEtime2 + '':00:00'' END,
				CASE @F_PeakPrice WHEN '''' THEN NULL ELSE @F_PeakPrice END
			)
		END
		SET @F_Log = @F_UserID + ''设置了峰时段信息'' 
		IF @F_PeakStime1 <> '''' SET @F_Log = @F_Log + ''，峰时段1为'' + @F_PeakStime1 + '':00:00'' + ''～'' + @F_PeakEtime1 + '':00:00''
		IF @F_PeakStime2 <> '''' SET @F_Log = @F_Log + ''，峰时段2为'' + @F_PeakStime2 + '':00:00'' + ''～'' + @F_PeakEtime2 + '':00:00''
		SET @F_Log = @F_Log + ''，峰时段电价为'' + @F_PeakPrice
	END
	ELSE IF @F_Type = ''V''
	BEGIN
		IF EXISTS(SELECT * FROM dbo.tb_D_PVLTimePrice WHERE F_EnergyTypeID = @F_EnergyTypeID)
		BEGIN
			UPDATE dbo.tb_D_PVLTimePrice 
			SET F_ValleyStime = CASE @F_ValleyStime WHEN '''' THEN NULL ELSE @F_ValleyStime + '':00:00'' END,
				F_ValleyEtime = CASE @F_ValleyEtime WHEN '''' THEN NULL ELSE @F_ValleyEtime + '':00:00'' END,
				F_ValleyPrice = CASE @F_ValleyPrice WHEN '''' THEN NULL ELSE @F_ValleyPrice END
			WHERE F_EnergyTypeID = @F_EnergyTypeID
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_D_PVLTimePrice 
			(
				F_EnergyTypeID,
				F_ValleyStime,
				F_ValleyEtime,
				F_ValleyPrice
			)
			VALUES
			(
				@F_EnergyTypeID,
				CASE @F_ValleyStime WHEN '''' THEN NULL ELSE @F_ValleyStime + '':00:00'' END,
				CASE @F_ValleyEtime WHEN '''' THEN NULL ELSE @F_ValleyEtime + '':00:00'' END,
				CASE @F_ValleyPrice WHEN '''' THEN NULL ELSE @F_ValleyPrice END
			)
		END
		SET @F_Log = @F_UserID + ''设置了谷时段信息，谷时段为'' + @F_ValleyStime + '':00:00'' + ''～'' + @F_ValleyEtime + '':00:00，谷时段电价为'' + @F_ValleyPrice
	END
	ELSE IF @F_Type = ''L''
	BEGIN
		IF EXISTS(SELECT * FROM dbo.tb_D_PVLTimePrice WHERE F_EnergyTypeID = @F_EnergyTypeID)
		BEGIN
			UPDATE dbo.tb_D_PVLTimePrice SET F_LevelPrice = CASE @F_LevelPrice WHEN '''' THEN NULL ELSE @F_LevelPrice END WHERE F_EnergyTypeID = @F_EnergyTypeID
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_D_PVLTimePrice (F_EnergyTypeID,F_LevelPrice)VALUES(@F_EnergyTypeID,CASE @F_LevelPrice WHEN '''' THEN NULL ELSE @F_LevelPrice END)
		END
		SET @F_Log = @F_UserID + ''设置了平时段信息，平时段电价为'' + @F_LevelPrice
	END
	EXEC dbo.proc_A_WriteEventLog 10,@F_UserID,@F_IP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_GetPvlTimePrice]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_GetPvlTimePrice]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_GetPvlTimePrice](
	@F_EnergyTypeID bigint
)AS
BEGIN
	DECLARE @F_StartTime INT
	DECLARE @F_EndTime INT
	DECLARE @F_TempSTime1 INT
	DECLARE @F_TempETime1 INT
	DECLARE @F_TempSTime2 INT
	DECLARE @F_TempETime2 INT
	DECLARE @F_TempSTime3 INT
	DECLARE @F_TempETime3 INT
	DECLARE @F_LevelSTime1 VARCHAR(32)
	DECLARE @F_LevelETime1 VARCHAR(32)
	DECLARE @F_LevelSTime2 VARCHAR(32)
	DECLARE @F_LevelETime2 VARCHAR(32)
	DECLARE @F_LevelSTime3 VARCHAR(32)
	DECLARE @F_LevelETime3 VARCHAR(32)
	DECLARE @cur_time cursor
	SET @cur_time = CURSOR forward_only static FOR SELECT DATEPART(hh,F_StartTime),DATEPART(hh,F_EndTime) FROM dbo.fun_GetPVLTime(@F_EnergyTypeID) ORDER BY F_StartTime
	OPEN @cur_time
	FETCH NEXT FROM @cur_time INTO @F_StartTime,@F_EndTime
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF @F_TempSTime1 IS NULL 
		BEGIN
			SET @F_TempSTime1 = @F_StartTime
			SET @F_TempETime1 = @F_EndTime
		END
		ELSE IF @F_TempSTime2 IS NULL 
		BEGIN
			SET @F_TempSTime2 = @F_StartTime
			SET @F_TempETime2 = @F_EndTime
		END
		ELSE IF @F_TempSTime3 IS NULL 
		BEGIN
			SET @F_TempSTime3 = @F_StartTime
			SET @F_TempETime3 = @F_EndTime
		END
		FETCH NEXT FROM @cur_time INTO @F_StartTime,@F_EndTime
	END
	IF @F_TempETime3 IS NOT NULL
	BEGIN
		SET @F_LevelSTime1 = ISNULL(RIGHT(''0'' + CAST(@F_TempETime3 AS VARCHAR),2),'''')
	END
	IF @F_TempSTime1 IS NOT NULL
	BEGIN
		SET @F_LevelETime1 = ISNULL(RIGHT(''0'' + CAST(@F_TempSTime1 AS VARCHAR),2),'''')
	END
	IF @F_TempETime1 IS NOT NULL
	BEGIN
		SET @F_LevelSTime2 = ISNULL(RIGHT(''0'' + CAST(@F_TempETime1 AS VARCHAR),2),'''')
	END
	IF @F_TempSTime2 IS NOT NULL
	BEGIN
		SET @F_LevelETime2 = ISNULL(RIGHT(''0'' + CAST(@F_TempSTime2 AS VARCHAR),2),'''')
	END
	IF @F_TempETime2 IS NOT NULL
	BEGIN
		SET @F_LevelSTime3 = ISNULL(RIGHT(''0'' + CAST(@F_TempETime2 AS VARCHAR),2),'''')
	END
	IF @F_TempSTime3 IS NOT NULL
	BEGIN
		SET @F_LevelETime3 = ISNULL(RIGHT(''0'' + CAST(@F_TempSTime3 AS VARCHAR),2),'''')
	END
	
	CLOSE @cur_time
	DEALLOCATE @cur_time
	SELECT 
		ISNULL(RIGHT(''0'' + CAST(DATEPART(hh,F_PeakStime1) AS VARCHAR),2),'''') AS F_PeakStime1,
		ISNULL(RIGHT(''0'' + CAST(DATEPART(hh,F_PeakEtime1) AS VARCHAR),2),'''') AS F_PeakEtime1,
		ISNULL(RIGHT(''0'' + CAST(DATEPART(hh,F_PeakStime2) AS VARCHAR),2),'''') AS F_PeakStime2,
		ISNULL(RIGHT(''0'' + CAST(DATEPART(hh,F_PeakEtime2) AS VARCHAR),2),'''') AS F_PeakEtime2,
		ISNULL(CONVERT(VARCHAR,F_PeakPrice,2),'''') AS F_PeakPrice,
		ISNULL(RIGHT(''0'' + CAST(DATEPART(hh,F_ValleyStime) AS VARCHAR),2),'''') AS F_ValleyStime,
		ISNULL(RIGHT(''0'' + CAST(DATEPART(hh,F_ValleyEtime) AS VARCHAR),2),'''') AS F_ValleyEtime,
		ISNULL(CONVERT(VARCHAR,F_ValleyPrice,2),'''') AS F_ValleyPrice,
		@F_LevelSTime1 AS F_LevelSTime1,
		@F_LevelETime1 AS F_LevelETime1,
		@F_LevelSTime2 AS F_LevelSTime2,
		@F_LevelETime2 AS F_LevelETime2,
		@F_LevelSTime3 AS F_LevelSTime3,
		@F_LevelETime3 AS F_LevelETime3,
		ISNULL(CONVERT(VARCHAR,F_LevelPrice,2),'''') AS F_LevelPrice 
	FROM dbo.tb_D_PVLTimePrice
	WHERE F_EnergyTypeID = @F_EnergyTypeID
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_DispatchTaskOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_DispatchTaskOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_DispatchTaskOperate]
	@OperFlg char(1),
	@F_TaskCode varchar(32),
	@F_TaskType varchar(32),
	@F_TaskDetail varchar(1024),
	@F_ExpectedTime datetime2(0),
	@F_DispatchUser bigint,
	@F_User varchar(16),
	@F_IP varchar(16),
	@F_ProjectNo varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_TaskCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_D_DispatchTask
		(
			F_TaskCode,
			F_TaskType,
			F_TaskDetail,
			F_TaskStatus,
			F_DispatchTime,
			F_ExpectedTime,
			F_DispatchUser,
			F_PushStatus,
			F_ProjectNo
		)
		VALUES
		(
			@F_TaskCode,
			@F_TaskType,
			@F_TaskDetail,
			0,
			GETDATE(),
			@F_ExpectedTime,
			@F_DispatchUser,
			0,
			CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END
		)
		SELECT @F_Log = @F_User + ''给'' + F_UserName + ''指派了任务（单号：'' + CAST(@F_TaskCode AS VARCHAR) + ''）。'' FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_DispatchUser
		EXEC dbo.proc_A_WriteEventLog 21,@F_User,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_D_DispatchTask
		SET F_TaskType = @F_TaskType,
			F_TaskDetail = @F_TaskDetail,
			F_ExpectedTime = @F_ExpectedTime,
			F_DispatchUser = @F_DispatchUser,
			F_ProjectNo = CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END
		WHERE F_TaskCode = @F_TaskCode
		SET @F_Log = @F_User + ''修改了任务（单号：'' + @F_TaskCode + ''）。''
		EXEC dbo.proc_A_WriteEventLog 21,@F_User,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了任务（单号：'' +  CAST(F_TaskCode AS VARCHAR) + ''）。'' FROM dbo.tb_D_DispatchTask WHERE F_TaskCode = @F_TaskCode
		DELETE FROM dbo.tb_D_DispatchTask WHERE F_TaskCode = @F_TaskCode
		EXEC dbo.proc_A_WriteEventLog 21,@F_User,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''4''
	BEGIN
		UPDATE dbo.tb_D_DispatchTask
		SET F_TaskType = @F_TaskType,
			F_TaskDetail = @F_TaskDetail,
			F_ExpectedTime = @F_ExpectedTime,
			F_DispatchUser = @F_DispatchUser,
			F_TaskStatus = 0,
			F_PushStatus = 0,
			F_ProjectNo = CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END
		WHERE F_TaskCode = @F_TaskCode
		SET @F_Log = @F_User + ''重新指派了任务（单号：'' +  CAST(@F_TaskCode AS VARCHAR) + ''）给'' + @F_DispatchUser + ''。'' 
		EXEC dbo.proc_A_WriteEventLog 21,@F_User,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_D_AlarmConfOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_D_AlarmConfOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_D_AlarmConfOperate]
	@F_TypeNo int,
	@F_Checked bit,
	@F_OfflineTime varchar(16),
	@F_DiskSpace varchar(16),
	@F_ToUser varchar(max),
	@F_IsWechat varchar(1),
	@F_IsEmail varchar(1),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @F_Checked = 0
	BEGIN
		DELETE FROM dbo.tb_D_GlobalAlarmConf WHERE F_TypeNo = @F_TypeNo
		SELECT @F_Log = @F_UserID + ''删除了（'' + F_TypeName + ''）的报警配置。'' FROM dbo.tb_A_EventType WHERE F_TypeNo = @F_TypeNo
		EXEC dbo.proc_A_WriteEventLog 23,@F_UserID,@F_IP,@F_Log
	END
	ELSE
	BEGIN
		IF EXISTS(SELECT F_TypeNo FROM dbo.tb_D_GlobalAlarmConf WHERE F_TypeNo = @F_TypeNo)
		BEGIN
			IF @F_OfflineTime <> ''''
			BEGIN
				UPDATE dbo.tb_D_GlobalAlarmConf SET F_OfflineTime = @F_OfflineTime WHERE F_TypeNo = @F_TypeNo
				SELECT @F_Log = @F_UserID + ''更新了配置（'' + F_TypeName + ''）离线超时'' + @F_OfflineTime + ''分钟报警。'' FROM dbo.tb_A_EventType WHERE F_TypeNo = @F_TypeNo
				EXEC dbo.proc_A_WriteEventLog 23,@F_UserID,@F_IP,@F_Log
			END
			IF @F_DiskSpace <> ''''
			BEGIN
				UPDATE dbo.tb_D_GlobalAlarmConf SET F_DiskSpace = @F_DiskSpace WHERE F_TypeNo = @F_TypeNo
				SELECT @F_Log = @F_UserID + ''更新了配置（'' + F_TypeName + ''）剩余磁盘空间小于'' + @F_DiskSpace + ''M报警。'' FROM dbo.tb_A_EventType WHERE F_TypeNo = @F_TypeNo
				EXEC dbo.proc_A_WriteEventLog 23,@F_UserID,@F_IP,@F_Log
			END
			IF @F_ToUser <> '''' 
			BEGIN
				UPDATE dbo.tb_D_GlobalAlarmConf SET F_ToUser = @F_ToUser WHERE F_TypeNo = @F_TypeNo
				SELECT @F_Log = @F_UserID + ''更新了（'' + F_TypeName + ''）的报警通知人员信息（'' + @F_ToUser + ''）。'' FROM dbo.tb_A_EventType WHERE F_TypeNo = @F_TypeNo
				EXEC dbo.proc_A_WriteEventLog 23,@F_UserID,@F_IP,@F_Log
			END
			ELSE
			BEGIN
				UPDATE dbo.tb_D_GlobalAlarmConf SET F_ToUser = @F_ToUser WHERE F_TypeNo = @F_TypeNo
				SELECT @F_Log = @F_UserID + ''清空了（'' + F_TypeName + ''）的报警通知人员信息。'' FROM dbo.tb_A_EventType WHERE F_TypeNo = @F_TypeNo
				EXEC dbo.proc_A_WriteEventLog 23,@F_UserID,@F_IP,@F_Log
			END
			IF @F_IsWechat <> ''''
			BEGIN
				UPDATE dbo.tb_D_GlobalAlarmConf SET F_IsWechat = @F_IsWechat WHERE F_TypeNo = @F_TypeNo
				IF @F_IsWechat = ''1''
					SELECT @F_Log = @F_UserID + ''添加了微信为（'' + F_TypeName + ''）的报警通知方式。'' FROM dbo.tb_A_EventType WHERE F_TypeNo = @F_TypeNo
				ELSE
					SELECT @F_Log = @F_UserID + ''取消了微信为（'' + F_TypeName + ''）的报警通知方式。'' FROM dbo.tb_A_EventType WHERE F_TypeNo = @F_TypeNo
				EXEC dbo.proc_A_WriteEventLog 23,@F_UserID,@F_IP,@F_Log
			END
			IF @F_IsEmail <> ''''
			BEGIN
				UPDATE dbo.tb_D_GlobalAlarmConf SET F_IsEmail = @F_IsEmail WHERE F_TypeNo = @F_TypeNo
				IF @F_IsWechat = ''1''
					SELECT @F_Log = @F_UserID + ''添加了邮件为（'' + F_TypeName + ''）的报警通知方式。'' FROM dbo.tb_A_EventType WHERE F_TypeNo = @F_TypeNo
				ELSE
					SELECT @F_Log = @F_UserID + ''取消了邮件为（'' + F_TypeName + ''）的报警通知方式。'' FROM dbo.tb_A_EventType WHERE F_TypeNo = @F_TypeNo
				EXEC dbo.proc_A_WriteEventLog 23,@F_UserID,@F_IP,@F_Log
			END
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_D_GlobalAlarmConf (F_TypeNo) VALUES (@F_TypeNo)
			SELECT @F_Log = @F_UserID + ''添加了（'' + F_TypeName + ''）的报警配置。'' FROM dbo.tb_A_EventType WHERE F_TypeNo = @F_TypeNo
			EXEC dbo.proc_A_WriteEventLog 23,@F_UserID,@F_IP,@F_Log
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_C_SynchroNodeData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_C_SynchroNodeData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_C_SynchroNodeData] 
AS
BEGIN
	DECLARE @cur_entity cursor
	DECLARE @cur_node cursor
	DECLARE @F_EntityID bigint
	DECLARE @F_NodeCode bigint
	DECLARE @F_ValueLabel varchar(32)
	DECLARE @F_ReadingDate date
	DECLARE @F_ReadingHour datetime2(0)
	DECLARE @F_ReadingYear smallint
	DECLARE @F_ReadingMonth smallint
	DECLARE @F_EnergyData numeric(18,4)
	DECLARE @F_EnergyCost numeric(18,4)
	DECLARE @F_WorkingData numeric(18,4)
	DECLARE @F_UnWorkingData numeric(18,4)
	DECLARE @F_FlexibleData numeric(18,4)
	DECLARE @F_PeakData numeric(18,4)
	DECLARE @F_ValleyData numeric(18,4)
	DECLARE @F_LevelData numeric(18,4)
	DECLARE @F_PeakCost money
	DECLARE @F_ValleyCost money
	DECLARE @F_LevelCost money
	DECLARE @F_DataGranularity varchar(32)
	DECLARE @F_GranularityValue varchar(32)
	DECLARE @F_StartDate date
	DECLARE @F_EndDate date
	DECLARE @F_EnergyTypeID bigint
	DECLARE @F_Rate numeric(18,2)
	DECLARE @SqlText nvarchar(max)
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT 
		A.F_NodeCode,
		A.F_ValueLabel,
		B.F_ReadingDate,
		SUM(A.F_EnergyData),
		SUM(CASE WHEN dbo.fun_IsWorkingday(A.F_ReadingDate) = 1 THEN CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetWorkingStartTime(A.F_NodeCode,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetWorkingEndTime(A.F_NodeCode,A.F_ReadingDate) THEN A.F_EnergyData ELSE 0 END ELSE 0 END) AS F_WorkingData,
		SUM(CASE WHEN dbo.fun_IsWorkingday(A.F_ReadingDate) = 1 THEN CASE WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetTransitionStime1(A.F_NodeCode,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetTransitionEtime1(A.F_NodeCode,A.F_ReadingDate) THEN A.F_EnergyData WHEN CAST(A.F_ReadingDate AS TIME(0)) >= dbo.fun_GetTransitionStime2(A.F_NodeCode,A.F_ReadingDate) AND CAST(A.F_ReadingDate AS TIME(0)) < dbo.fun_GetTransitionEtime2(A.F_NodeCode,A.F_ReadingDate) THEN A.F_EnergyData ELSE 0 END ELSE 0 END) AS F_FlexibleData
	FROM tb_C_NodeHourData A,
		(SELECT DISTINCT F_NodeCode,F_ValueLabel,CAST(F_ReadingDate AS DATE) AS F_ReadingDate FROM dbo.tb_C_NodeHourData WHERE F_SynNdStatus = 0) B
	WHERE A.F_NodeCode = B.F_NodeCode
		AND A.F_ValueLabel = B.F_ValueLabel
		AND CAST(A.F_ReadingDate AS DATE) = B.F_ReadingDate
	GROUP BY A.F_NodeCode,A.F_ValueLabel,B.F_ReadingDate
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingDate,@F_EnergyData,@F_WorkingData,@F_FlexibleData
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @F_UnWorkingData = @F_EnergyData - @F_WorkingData - @F_FlexibleData
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_NodeDayData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingDate = @F_ReadingDate)
		BEGIN
			UPDATE dbo.tb_C_NodeDayData 
			SET F_EnergyData = @F_EnergyData,
				F_WorkingData = @F_WorkingData,
				F_UnWorkingData = @F_UnWorkingData,
				F_FlexibleData = @F_FlexibleData,
				F_SynNmStatus = 0
			WHERE F_NodeCode = @F_NodeCode 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_ReadingDate = @F_ReadingDate
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_NodeDayData
			(
				F_NodeCode,
				F_ValueLabel,
				F_ReadingDate,
				F_EnergyData,
				F_WorkingData,
				F_UnWorkingData,
				F_FlexibleData,
				F_SynNmStatus
			)
			VALUES
			(
				@F_NodeCode,
				@F_ValueLabel,
				@F_ReadingDate,
				@F_EnergyData,
				@F_WorkingData,
				@F_UnWorkingData,
				@F_FlexibleData,
				0
			)
		END
		UPDATE dbo.tb_C_NodeHourData SET F_SynNdStatus = 1 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND CAST(F_ReadingDate AS DATE) = @F_ReadingDate AND F_SynNdStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingDate,@F_EnergyData,@F_WorkingData,@F_FlexibleData
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT
		A.F_EntityID,
		A.F_EnergyTypeID,
		C.F_ValueLabel,
		B.F_DataGranularity,
		B.F_GranularityValue,
		A.F_ReadingDate,
		SUM(C.F_EnergyData * B.F_Rate)
	FROM
		(
			SELECT DISTINCT
				B.F_EntityID,
				A.F_ReadingDate,
				B.F_EnergyTypeID
			FROM dbo.tb_C_NodeHourData A,dbo.tb_C_EntitySplitNode B
			WHERE A.F_SynEhStatus = 0 
				AND A.F_NodeCode = B.F_NodeCode 
				AND CAST(A.F_ReadingDate AS DATE) = B.F_ReadingDate
		) A, 
		dbo.tb_C_EntitySplitNode B,
		dbo.tb_C_NodeHourData C
	WHERE A.F_EntityID = B.F_EntityID
		AND CAST(A.F_ReadingDate AS DATE) = B.F_ReadingDate
		AND A.F_EnergyTypeID = B.F_EnergyTypeID
		AND C.F_NodeCode = B.F_NodeCode
		AND C.F_ReadingDate = A.F_ReadingDate
	GROUP BY A.F_EntityID,A.F_EnergyTypeID,C.F_ValueLabel,B.F_DataGranularity,B.F_GranularityValue,A.F_ReadingDate
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingHour,@F_EnergyData
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT F_EntityID FROM dbo.tb_C_EntityHourData WHERE F_EntityID = @F_EntityID AND F_EnergyTypeID = @F_EnergyTypeID AND F_ValueLabel = @F_ValueLabel AND F_DataGranularity = @F_DataGranularity AND F_GranularityValue = @F_GranularityValue AND F_ReadingDate = @F_ReadingHour)
		BEGIN
			UPDATE dbo.tb_C_EntityHourData 
			SET F_EnergyData = @F_EnergyData,
				F_SynEdStatus = 0
			WHERE F_EntityID = @F_EntityID 
				AND F_EnergyTypeID = @F_EnergyTypeID 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_DataGranularity = @F_DataGranularity 
				AND F_GranularityValue = @F_GranularityValue
				AND F_ReadingDate = @F_ReadingHour
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_EntityHourData
			(
				F_EntityID,
				F_EnergyTypeID,
				F_ValueLabel,
				F_DataGranularity,
				F_GranularityValue,
				F_ReadingDate,
				F_EnergyData,
				F_SynEdStatus
			)
			VALUES
			(
				@F_EntityID,
				@F_EnergyTypeID,
				@F_ValueLabel,
				@F_DataGranularity,
				@F_GranularityValue,
				@F_ReadingHour,
				@F_EnergyData,
				0
			)
		END
		UPDATE dbo.tb_C_NodeHourData SET F_SynEhStatus = 1 WHERE F_ReadingDate = @F_ReadingHour AND F_SynEhStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_EntityID,@F_EnergyTypeID,@F_ValueLabel,@F_DataGranularity,@F_GranularityValue,@F_ReadingHour,@F_EnergyData
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
	
	SET @cur_node = CURSOR forward_only static FOR 
	SELECT A.F_NodeCode,A.F_ValueLabel,B.F_ReadingYear,B.F_ReadingMonth,SUM(A.F_EnergyData),SUM(A.F_WorkingData),SUM(A.F_UnWorkingData),SUM(A.F_FlexibleData)  
	FROM tb_C_NodeDayData A,
		(SELECT DISTINCT F_NodeCode,F_ValueLabel,YEAR(F_ReadingDate) AS F_ReadingYear,MONTH(F_ReadingDate) AS F_ReadingMonth FROM dbo.tb_C_NodeDayData WHERE F_SynNmStatus = 0) B
	WHERE A.F_NodeCode = B.F_NodeCode 
		AND A.F_ValueLabel = B.F_ValueLabel 
		AND YEAR(A.F_ReadingDate) = B.F_ReadingYear 
		AND MONTH(A.F_ReadingDate) = B.F_ReadingMonth
	GROUP BY A.F_NodeCode,A.F_ValueLabel,B.F_ReadingYear,B.F_ReadingMonth
	
	OPEN @cur_node
	FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingYear,@F_ReadingMonth,@F_EnergyData,@F_WorkingData,@F_UnWorkingData,@F_FlexibleData
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(SELECT F_NodeCode FROM dbo.tb_C_NodeMonthData WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND F_ReadingYear = @F_ReadingYear AND F_ReadingMonth = @F_ReadingMonth)
		BEGIN
			UPDATE dbo.tb_C_NodeMonthData 
			SET F_EnergyData = @F_EnergyData,
				F_WorkingData = @F_WorkingData,
				F_UnWorkingData = @F_UnWorkingData,
				F_FlexibleData = @F_FlexibleData
			WHERE F_NodeCode = @F_NodeCode 
				AND F_ValueLabel = @F_ValueLabel 
				AND F_ReadingYear = @F_ReadingYear 
				AND F_ReadingMonth = @F_ReadingMonth
		END
		ELSE
		BEGIN
			INSERT INTO dbo.tb_C_NodeMonthData
			(
				F_NodeCode,
				F_ValueLabel,
				F_ReadingYear,
				F_ReadingMonth,
				F_EnergyData,
				F_WorkingData,
				F_UnWorkingData,
				F_FlexibleData
			)
			VALUES
			(
				@F_NodeCode,
				@F_ValueLabel,
				@F_ReadingYear,
				@F_ReadingMonth,
				@F_EnergyData,
				@F_WorkingData,
				@F_UnWorkingData,
				@F_FlexibleData
			)
		END
		UPDATE dbo.tb_C_NodeDayData SET F_SynNmStatus = 1 WHERE F_NodeCode = @F_NodeCode AND F_ValueLabel = @F_ValueLabel AND YEAR(F_ReadingDate) = @F_ReadingYear AND MONTH(F_ReadingDate) = @F_ReadingMonth AND F_SynNmStatus = 0
		FETCH NEXT FROM @cur_node INTO @F_NodeCode,@F_ValueLabel,@F_ReadingYear,@F_ReadingMonth,@F_EnergyData,@F_WorkingData,@F_UnWorkingData,@F_FlexibleData
	END
	CLOSE @cur_node
	DEALLOCATE @cur_node
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_ObjectPropertyOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_ObjectPropertyOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_ObjectPropertyOperate]
	@OperFlg char(1),
	@F_PropertyID bigint,
	@F_PropertyName varchar(32),
	@F_PropertyIdentifier varchar(32),
	@F_PropertyUnit varchar(32),
	@F_ObjectTypeID varchar(16),
	@F_GroupTypeID varchar(3),
	@F_PropertyTypeID varchar(16),
	@F_DictionaryType varchar(1),
	@F_DictionaryID varchar(16),
	@F_DictionaryKey varchar(16),
	@F_DefaultValue varchar(32),
	@F_RegularFormula varchar(128),
	@F_IsOnlyRead bit,
	@F_Memo varchar(128),
	@F_User varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_PropertyID = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_B_ObjectProperty
		(
			F_PropertyID,
			F_PropertyName,
			F_PropertyIdentifier,
			F_PropertyUnit,
			F_ObjectTypeID,
			F_GroupTypeID,
			F_PropertyTypeID,
			F_DictionaryType,
			F_DictionaryID,
			F_DictionaryKey,
			F_DefaultValue,
			F_RegularFormula,
			F_IsOnlyRead,
			F_Memo
		)
		VALUES
		(
			@F_PropertyID,
			@F_PropertyName,
			@F_PropertyIdentifier,
			@F_PropertyUnit,
			CASE @F_ObjectTypeID WHEN '''' THEN NULL ELSE @F_ObjectTypeID END,
			@F_GroupTypeID,
			@F_PropertyTypeID,
			@F_DictionaryType,
			@F_DictionaryID,
			@F_DictionaryKey,
			@F_DefaultValue,
			@F_RegularFormula,
			@F_IsOnlyRead,
			@F_Memo
		)
		SET @F_Log = @F_User + ''添加了对象属性（'' + @F_PropertyName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_B_ObjectProperty
		SET F_PropertyName = @F_PropertyName,
			F_PropertyIdentifier = @F_PropertyIdentifier,
			F_PropertyUnit = @F_PropertyUnit,
			F_ObjectTypeID = CASE @F_ObjectTypeID WHEN '''' THEN NULL ELSE @F_ObjectTypeID END,
			F_GroupTypeID = @F_GroupTypeID,
			F_PropertyTypeID = @F_PropertyTypeID,
			F_DictionaryType = @F_DictionaryType,
			F_DictionaryID = @F_DictionaryID,
			F_DictionaryKey = @F_DictionaryKey,
			F_DefaultValue = @F_DefaultValue,
			F_RegularFormula = @F_RegularFormula,
			F_IsOnlyRead = @F_IsOnlyRead,
			F_Memo = @F_Memo
		WHERE F_PropertyID = @F_PropertyID
		SET @F_Log = @F_User + ''修改了对象属性（'' + @F_PropertyName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了对象属性（'' + F_PropertyName + ''）。''  FROM dbo.tb_B_ObjectProperty WHERE F_PropertyID = @F_PropertyID
		DELETE FROM dbo.tb_B_ObjectProperty WHERE F_PropertyID = @F_PropertyID
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_KeyValueTableOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_KeyValueTableOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_KeyValueTableOperate]
	@OperFlg varchar(10),
	@F_DictionaryID bigint,
	@F_DictionaryName varchar(32),
	@F_User varchar(15),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_DictionaryID = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_B_KeyValueTable
		(
			F_DictionaryID,
			F_DictionaryName,
			F_IsReadOnly
		)
		VALUES
		(
			@F_DictionaryID,
			@F_DictionaryName,
			0
		)
		SET @F_Log = @F_User + ''添加了键值字典表（'' + @F_DictionaryName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_B_KeyValueTable
		SET F_DictionaryName = @F_DictionaryName
		WHERE F_DictionaryID = @F_DictionaryID
		
		SET @F_Log = @F_User + ''修改了键值字典表（'' + @F_DictionaryName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了键值字典表（'' + F_DictionaryName + ''）。''  FROM dbo.tb_B_KeyValueTable WHERE F_DictionaryID = @F_DictionaryID
		DELETE FROM dbo.tb_B_KeyValueTable WHERE F_DictionaryID = @F_DictionaryID
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_KeyValueListOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_KeyValueListOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_KeyValueListOperate]
	@OperFlg varchar(10),
	@F_DictionaryID bigint,
	@F_Key varchar(32),
	@F_Value varchar(64),
	@F_User varchar(32),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_B_KeyValueList
		(
			F_DictionaryID,
			F_Key,
			F_Value
		)
		VALUES
		(
			@F_DictionaryID,
			@F_Key,
			@F_Value
		)
		SELECT @F_Log = @F_User + ''对键值表（'' + F_DictionaryName + ''）添加了键值项（'' + @F_Key + '':'' + @F_Value + ''）。''  FROM dbo.tb_B_KeyValueTable WHERE F_DictionaryID = @F_DictionaryID
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_B_KeyValueList
		SET F_Value = @F_Value
		WHERE F_DictionaryID = @F_DictionaryID 
			AND F_Key = @F_Key
		SELECT @F_Log = @F_User + ''对键值表（'' + F_DictionaryName + ''）修改了键值项（'' + @F_Key + '':'' + @F_Value + ''）。''  FROM dbo.tb_B_KeyValueTable WHERE F_DictionaryID = @F_DictionaryID
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''对键值表（'' + F_DictionaryName + ''）删除了键值项（'' + F_Key + '':'' + F_Value + ''）。''  FROM dbo.tb_B_KeyValueTable A,dbo.tb_B_KeyValueList B WHERE A.F_DictionaryID = @F_DictionaryID AND A.F_DictionaryID = B.F_DictionaryID AND B.F_Key = @F_Key
		DELETE FROM dbo.tb_B_KeyValueList WHERE F_DictionaryID = @F_DictionaryID AND F_Key = @F_Key
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_SynTemplateOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_SynTemplateOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_SynTemplateOperate]
	@F_AppCode bigint,
	@F_TemplateID varchar(16),
	@F_TemplateName varchar(32),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF EXISTS(SELECT F_TemplateCode FROM dbo.tb_A_Template WHERE F_AppCode=@F_AppCode AND F_TemplateID=@F_TemplateID)
	BEGIN
		UPDATE dbo.tb_A_Template SET F_TemplateName = @F_TemplateName WHERE F_AppCode=@F_AppCode AND F_TemplateID=@F_TemplateID AND F_TemplateName <> @F_TemplateName
		SET @F_Log = @F_UserID + ''同步更新了设备模板（'' + @F_TemplateName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE
	BEGIN
		INSERT INTO dbo.tb_A_Template
		(
			F_TemplateCode,
			F_TemplateName,
			F_IsRefer,
			F_AppCode,
			F_TemplateID
		)
		VALUES
		(
			dbo.fun_MakeSerialNum(),
			@F_TemplateName,
			1,
			@F_AppCode,
			@F_TemplateID
		)
			
		SET @F_Log = @F_UserID + ''同步添加了设备模板（'' + @F_TemplateName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_CheckEntityCsvFile]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_CheckEntityCsvFile]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_CheckEntityCsvFile]
AS
BEGIN
	DECLARE @Result bit
	DECLARE @Msg varchar(512)
	DECLARE @Count int
	SET @Result = 1
	SET @Msg = ''''
	SET @Count = 0
	SELECT @Count = COUNT(F_EntityID) FROM dbo.tb_B_EntityTreeModelTemp
	IF @Count = 0
	BEGIN
		SET @Result = 0
		SET @Msg = ''文件内容导入失败，没有生成数据记录信息！''
	END
	ELSE
	BEGIN
		SELECT @Count = COUNT(F_EntityID) FROM dbo.tb_B_EntityTreeModelTemp WHERE F_EntityID IS NULL OR F_EntityID = ''''
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''对象编号有'' + cast(@Count as varchar) + ''个空项''
			ELSE SET @Msg = @Msg + ''；对象编号有'' + cast(@Count as varchar) + ''个空项''
		END
		SET @Count = 0
		SELECT @Count = COUNT(F_EntityID) FROM dbo.tb_B_EntityTreeModelTemp GROUP BY F_EntityID HAVING COUNT(1) > 1
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = cast(@Count as varchar) + ''个对象的编号有重复项''
			ELSE SET @Msg = @Msg + ''；'' + cast(@Count as varchar) + ''个对象的编号有重复项''
		END
		SET @Count = 0
		SELECT @Count = COUNT(F_EntityID) FROM dbo.tb_B_EntityTreeModelTemp WHERE F_EntityID IS NOT NULL AND F_EntityID <> '''' AND ISNUMERIC(F_EntityID) = 0
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''对象编号有'' + cast(@Count as varchar) + ''个非整型''
			ELSE SET @Msg = @Msg + ''；对象编号有'' + cast(@Count as varchar) + ''个非整型''
		END
		SET @Count = 0
		SELECT @Count = COUNT(F_ParentID) FROM dbo.tb_B_EntityTreeModelTemp WHERE F_ParentID IS NULL OR F_ParentID = ''''
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''父对象编号有'' + cast(@Count as varchar) + ''个空项''
			ELSE SET @Msg = @Msg + ''；父对象编号有'' + cast(@Count as varchar) + ''个空项''
		END
		SET @Count = 0
		SELECT @Count = COUNT(F_ParentID) FROM dbo.tb_B_EntityTreeModelTemp WHERE F_ParentID IS NOT NULL AND F_ParentID <> '''' AND ISNUMERIC(F_ParentID) = 0
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''父对象编号有'' + cast(@Count as varchar) + ''个非整型''
			ELSE SET @Msg = @Msg + ''；父对象编号有'' + cast(@Count as varchar) + ''个非整型''
		END
		SET @Count = 0
		SELECT @Count = COUNT(F_ParentID) FROM dbo.tb_B_EntityTreeModelTemp WHERE F_ParentID IS NOT NULL AND F_ParentID <> '''' AND F_ParentID <> ''0'' AND F_ParentID NOT IN (SELECT F_EntityID FROM dbo.tb_B_EntityTreeModelTemp)
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''父对象编号有'' + cast(@Count as varchar) + ''个非法值''
			ELSE SET @Msg = @Msg + ''；父对象编号有'' + cast(@Count as varchar) + ''个非法值''
		END
		SET @Count = 0
		SELECT @Count = COUNT(F_EntityName) FROM dbo.tb_B_EntityTreeModelTemp WHERE F_EntityName IS NULL OR F_EntityName = ''''
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''对象名称有'' + cast(@Count as varchar) + ''个空项''
			ELSE SET @Msg = @Msg + ''；对象名称有'' + cast(@Count as varchar) + ''个空项''
		END
		SET @Count = 0
		SELECT @Count = COUNT(F_TemplateID) FROM dbo.tb_B_EntityTreeModelTemp WHERE F_TemplateID IS NOT NULL AND F_TemplateID <> '''' AND F_TemplateID NOT IN (SELECT F_GroupID FROM dbo.tb_B_DictTreeModel)
		IF @Count > 0
		BEGIN
			SET @Result = 0
			IF @Msg = '''' SET @Msg = ''对象模板有'' + cast(@Count as varchar) + ''个非法值''
			ELSE SET @Msg = @Msg + ''；对象模板有'' + cast(@Count as varchar) + ''个非法值''
		END
	END
	IF @Msg = '''' SELECT @Msg = ''共生成'' + cast(COUNT(F_EntityID) as varchar) + ''条合法数据记录，确认导入？'' FROM dbo.tb_B_EntityTreeModelTemp
	SELECT @Result AS result,@Msg AS msg
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_DictTreeTypeOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_DictTreeTypeOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_DictTreeTypeOperate]
	@OperFlg char(1),
	@F_DictTreeNo int,
	@F_DictTreeName varchar(32),
	@F_Memo varchar(256),
	@F_User varchar(15),
	@VistorIP varchar(32)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_B_DictTreeType
		(
			F_DictTreeName,
			F_CreateUser,
			F_CreateDate,
			F_Memo
		)
		VALUES
		(
			@F_DictTreeName,
			@F_User,
			GETDATE(),
			@F_Memo
		)
		SET @F_Log = @F_User + ''添加了对象模板树（'' + @F_DictTreeName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_B_DictTreeType
		SET F_DictTreeName = @F_DictTreeName,
			F_UpdateUser = @F_User,
			F_UpdateDate = GETDATE(),
			F_Memo = @F_Memo
		WHERE F_DictTreeNo = @F_DictTreeNo
		SET @F_Log = @F_User + ''修改了对象模板树（'' + @F_DictTreeName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了对象模板树（'' + F_DictTreeName + ''）。''  FROM dbo.tb_B_DictTreeType WHERE F_DictTreeNo = @F_DictTreeNo
		DELETE FROM dbo.tb_B_DictTreeType WHERE F_DictTreeNo = @F_DictTreeNo
		EXEC dbo.proc_A_WriteEventLog 6,@F_User,@VistorIP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_RouterOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_RouterOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_RouterOperate]
	@OperFlg char(1),
	@F_RouterCode bigint,
	@F_RouterName varchar(32),
	@F_RouterIP varchar(15),
	@F_RouterPort int,
	@F_Interval int,
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_RouterCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_IoTRouter
		(
			F_RouterCode,
			F_RouterName,
			F_RouterIP,
			F_RouterPort,
			F_Interval
		)
		VALUES
		(
			@F_RouterCode,
			@F_RouterName,
			@F_RouterIP,
			@F_RouterPort,
			@F_Interval
		)
		SET @F_Log = @F_UserID + ''添加了物联节点（'' + @F_RouterName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_IoTRouter
		SET F_RouterName = @F_RouterName,
			F_RouterIP = @F_RouterIP,
			F_RouterPort = @F_RouterPort,
			F_Interval = @F_Interval
		WHERE F_RouterCode = @F_RouterCode
		SET @F_Log = @F_UserID + ''修改了物联节点（'' + @F_RouterName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_UserID + ''删除了物联节点（'' + F_RouterName + ''）。'' FROM dbo.tb_A_IoTRouter WHERE F_RouterCode = @F_RouterCode
		DELETE FROM dbo.tb_A_IoTRouter WHERE F_RouterCode = @F_RouterCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_ValueOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_ValueOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_ValueOperate]
	@OperFlg char(1),
	@F_TemplateCode bigint,
	@F_ValueCode varchar(32),
	@F_ValueName varchar(32),
	@F_ValueLabel varchar(32),
	@F_ValueType char(1),
	@F_ValueProperty char(1),
	@F_DataType varchar(16),
	@F_PrecisionRatio int,
	@F_DecimalPoint int,
	@F_DefaultValue varchar(16),
	@F_Unit nvarchar(16),
	@F_ReadWrite varchar(16),
	@F_CommCycle varchar(16),
	@F_Formula varchar(128),
	@F_KV varchar(128),
	@F_IsStorage bit,
	@F_StorageCycle varchar(16),
	@F_RangeLower varchar(16),
	@F_RangeUpper varchar(16),
	@F_SlopeLower varchar(16),
	@F_SlopeUpper varchar(16),
	@F_Benchmark varchar(16),
	@F_Fluctuated varchar(16),
	@F_MinValue varchar(16),
	@F_MaxValue varchar(16),
	@F_IsDisplay bit,
	@F_OrderNum int,
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_ValueCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_Value
		(
			F_TemplateCode,
			F_ValueCode,
			F_ValueName,
			F_ValueLabel,
			F_ValueType,
			F_ValueProperty,
			F_DataType,
			F_PrecisionRatio,
			F_DecimalPoint,
			F_DefaultValue,
			F_Unit,
			F_ReadWrite,
			F_CommCycle,
			F_Formula,
			F_KV,
			F_IsStorage,
			F_StorageCycle,
			F_RangeLower,
			F_RangeUpper,
			F_SlopeLower,
			F_SlopeUpper,
			F_Benchmark,
			F_Fluctuated,
			F_MinValue,
			F_MaxValue,
			F_IsRefer,
			F_IsDisplay
		)
		VALUES
		(
			@F_TemplateCode,
			@F_ValueCode,
			@F_ValueName,
			@F_ValueLabel,
			@F_ValueType,
			@F_ValueProperty,
			@F_DataType,
			@F_PrecisionRatio,
			@F_DecimalPoint,
			@F_DefaultValue,
			@F_Unit,
			@F_ReadWrite,
			CASE @F_CommCycle WHEN '''' THEN NULL ELSE @F_CommCycle END,
			@F_Formula,
			@F_KV,
			@F_IsStorage,
			CASE @F_StorageCycle WHEN '''' THEN NULL ELSE @F_StorageCycle END,
			CASE @F_RangeLower WHEN '''' THEN NULL ELSE @F_RangeLower END,
			CASE @F_RangeUpper WHEN '''' THEN NULL ELSE @F_RangeUpper END,
			CASE @F_SlopeLower WHEN '''' THEN NULL ELSE @F_SlopeLower END,
			CASE @F_SlopeUpper WHEN '''' THEN NULL ELSE @F_SlopeUpper END,
			CASE @F_Benchmark WHEN '''' THEN NULL ELSE @F_Benchmark END,
			CASE @F_Fluctuated WHEN '''' THEN NULL ELSE @F_Fluctuated END,
			CASE @F_MinValue WHEN '''' THEN NULL ELSE @F_MinValue END,
			CASE @F_MaxValue WHEN '''' THEN NULL ELSE @F_MaxValue END,
			0,
			1
		)
		SELECT @F_Log = @F_UserID + ''向设备模板（'' + F_TemplateName + ''）添加了设备变量（'' + @F_ValueName + ''）。'' FROM dbo.tb_A_Template WHERE F_TemplateCode = @F_TemplateCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_Value
		SET F_ValueName = @F_ValueName,
			F_ValueLabel = @F_ValueLabel,
			F_ValueType = @F_ValueType,
			F_ValueProperty = @F_ValueProperty,
			F_DataType = @F_DataType,
			F_PrecisionRatio = @F_PrecisionRatio,
			F_DecimalPoint = @F_DecimalPoint,
			F_DefaultValue = @F_DefaultValue,
			F_Unit = @F_Unit,
			F_ReadWrite = @F_ReadWrite,
			F_CommCycle = CASE @F_CommCycle WHEN '''' THEN NULL ELSE @F_CommCycle END,
			F_Formula = @F_Formula,
			F_KV = @F_KV,
			F_IsStorage = @F_IsStorage,
			F_StorageCycle = CASE @F_StorageCycle WHEN '''' THEN NULL ELSE @F_StorageCycle END,
			F_RangeLower = CASE @F_RangeLower WHEN '''' THEN NULL ELSE @F_RangeLower END,
			F_RangeUpper = CASE @F_RangeUpper WHEN '''' THEN NULL ELSE @F_RangeUpper END,
			F_SlopeLower = CASE @F_SlopeLower WHEN '''' THEN NULL ELSE @F_SlopeLower END,
			F_SlopeUpper = CASE @F_SlopeUpper WHEN '''' THEN NULL ELSE @F_SlopeUpper END,
			F_Benchmark = CASE @F_Benchmark WHEN '''' THEN NULL ELSE @F_Benchmark END,
			F_Fluctuated = CASE @F_Fluctuated WHEN '''' THEN NULL ELSE @F_Fluctuated END,
			F_MinValue = CASE @F_MinValue WHEN '''' THEN NULL ELSE @F_MinValue END,
			F_MaxValue = CASE @F_MaxValue WHEN '''' THEN NULL ELSE @F_MaxValue END
		WHERE F_TemplateCode = @F_TemplateCode
			AND F_ValueCode = @F_ValueCode
		SELECT @F_Log = @F_UserID + ''对设备模板（'' + F_TemplateName + ''）修改了设备变量（'' + @F_ValueName + ''）。'' FROM dbo.tb_A_Template WHERE F_TemplateCode = @F_TemplateCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_UserID + ''对设备模板（'' + F_TemplateName + ''）'' FROM dbo.tb_A_Template WHERE F_TemplateCode = @F_TemplateCode
		SELECT @F_Log = @F_Log + ''删除了设备变量（'' + F_ValueName + ''）'' FROM dbo.tb_A_Value WHERE F_TemplateCode = @F_TemplateCode AND F_ValueCode = @F_ValueCode
		DELETE FROM dbo.tb_A_Value WHERE F_TemplateCode = @F_TemplateCode AND F_ValueCode = @F_ValueCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''4''
	BEGIN
		SELECT @F_Log = @F_UserID + ''对设备模板（'' + F_TemplateName + ''）'' FROM dbo.tb_A_Template WHERE F_TemplateCode = @F_TemplateCode
		IF @F_ValueCode = '''' 
		BEGIN
			SET @F_Log = @F_Log + ''修改了设备变量（全部）的显示状态。'' 
			UPDATE dbo.tb_A_Value SET F_IsDisplay = @F_IsDisplay WHERE F_TemplateCode = @F_TemplateCode
		END
		ELSE
		BEGIN
			SELECT @F_Log = @F_Log + ''修改了设备变量（'' + F_ValueName + ''）的显示状态。'' FROM dbo.tb_A_Value WHERE F_TemplateCode = @F_TemplateCode AND F_ValueCode = @F_ValueCode
			UPDATE dbo.tb_A_Value SET F_IsDisplay = @F_IsDisplay WHERE F_TemplateCode = @F_TemplateCode AND F_ValueCode = @F_ValueCode
		END
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''5''
	BEGIN
		SELECT @F_Log = @F_UserID + ''对设备模板（'' + F_TemplateName + ''）'' FROM dbo.tb_A_Template WHERE F_TemplateCode = @F_TemplateCode
		SELECT @F_Log = @F_Log + ''修改了设备变量（'' + F_ValueName + ''）的排序号。'' FROM dbo.tb_A_Value WHERE F_TemplateCode = @F_TemplateCode AND F_ValueCode = @F_ValueCode
		UPDATE dbo.tb_A_Value SET F_OrderNum = @F_OrderNum WHERE F_TemplateCode = @F_TemplateCode AND F_ValueCode = @F_ValueCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_UserToRole]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_UserToRole]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_UserToRole]
	@F_UserCode bigint,
	@F_RoleCode bigint,
	@F_User varchar(16),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DECLARE @F_UserID varchar(32)
	SELECT @F_UserID = F_UserID FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	
	UPDATE dbo.tb_A_LoginUser SET F_RoleCode = @F_RoleCode WHERE F_UserCode = @F_UserCode
	IF @F_RoleCode IS NULL
	BEGIN
		DELETE FROM dbo.tb_A_MyApp WHERE F_UserCode = @F_UserCode
		SET @F_Log = @F_User + ''取消了账户（'' + @F_UserID + ''）的角色授权。''
	END
	ELSE
	BEGIN
		DELETE FROM dbo.tb_A_MyApp WHERE F_UserCode = @F_UserCode
		INSERT INTO dbo.tb_A_MyApp SELECT @F_UserCode,F_AppNo,F_AppType,1,GETDATE() FROM dbo.tb_A_RoleToApp WHERE F_RoleCode = @F_RoleCode
		SELECT @F_Log = @F_User + ''授权了角色（'' + F_RoleName + ''）给账户（'' + @F_UserID + ''）。'' FROM dbo.tb_A_Role WHERE F_RoleCode = @F_RoleCode
	END
	EXEC dbo.proc_A_WriteEventLog 7,@F_User,@F_IP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_UserOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_UserOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_UserOperate]
	@OperFlg char(1),
	@F_UserCode bigint,
	@F_UserID varchar(32),
	@F_UserName varchar(32),
	@F_UserPwd varchar(256),
	@F_UserType varchar(1),
	@F_Email varchar(32),
	@F_Mobile varchar(11),
	@F_LockIP varchar(15),
	@F_StartDate date,
	@F_EndDate date,
	@F_Kanban varchar(32),
	@F_User varchar(16),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		IF NOT EXISTS (SELECT F_UserCode FROM dbo.tb_A_LoginUser WHERE F_UserID = @F_UserID)
		BEGIN
			SELECT @F_UserCode = dbo.fun_MakeSerialNum()
			INSERT INTO dbo.tb_A_LoginUser
			(
				F_UserCode,
				F_UserID,
				F_UserName,
				F_UserPwd,
				F_UserType,
				F_Email,
				F_Mobile,
				F_LockIP,
				F_StartDate,
				F_EndDate
			)
			VALUES
			(
				@F_UserCode,
				@F_UserID,
				@F_UserName,
				@F_UserPwd,
				@F_UserType,
				@F_Email,
				@F_Mobile,
				@F_LockIP,
				@F_StartDate,
				CASE WHEN @F_EndDate = '''' THEN NULL ELSE @F_EndDate END
			)
			SET @F_Log = @F_User + ''添加了账户（'' + @F_UserID + ''）信息。''
			EXEC dbo.proc_A_WriteEventLog 7,@F_User,@F_IP,@F_Log
		END
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_LoginUser
		SET F_UserID = @F_UserID,
			F_UserName = @F_UserName,
			F_UserPwd = CASE WHEN @F_UserPwd IS NULL OR @F_UserPwd = '''' THEN F_UserPwd ELSE @F_UserPwd END,
			F_Email = @F_Email,
			F_Mobile = @F_Mobile,
			F_LockIP = @F_LockIP,
			F_UserType = @F_UserType,
			F_StartDate = @F_StartDate,
			F_EndDate = CASE WHEN @F_EndDate = '''' THEN NULL ELSE @F_EndDate END
		WHERE F_UserCode = @F_UserCode
		SET @F_Log = @F_User + ''修改了账户（'' + @F_UserID + ''）信息。''
		EXEC dbo.proc_A_WriteEventLog 7,@F_User,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了账户（'' + F_UserID + ''）信息。'' FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
		DELETE FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
		EXEC dbo.proc_A_WriteEventLog 7,@F_User,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''4''
	BEGIN
		UPDATE dbo.tb_A_LoginUser
		SET F_UserName = @F_UserName,
			F_Email = @F_Email,
			F_Mobile = @F_Mobile
		WHERE F_UserCode = @F_UserCode
		SET @F_Log = @F_User + ''更新了个人账户信息。''
		EXEC dbo.proc_A_WriteEventLog 7,@F_User,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''5''
	BEGIN
		UPDATE dbo.tb_A_LoginUser
		SET F_UserPwd = @F_UserPwd
		WHERE F_UserCode = @F_UserCode
		SET @F_Log = @F_User + ''修改了个人密码信息。''
		EXEC dbo.proc_A_WriteEventLog 7,@F_User,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''6''
	BEGIN
		UPDATE dbo.tb_A_LoginUser
		SET F_Kanban = CASE @F_Kanban WHEN '''' THEN NULL ELSE @F_Kanban END
		WHERE F_UserCode = @F_UserCode
		SET @F_Log = @F_User + ''修改了个人看板信息。''
		EXEC dbo.proc_A_WriteEventLog 7,@F_User,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_UploadBookFile]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_UploadBookFile]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_UploadBookFile] 
	@F_OperFlg char(1),
	@F_FileCode bigint,
	@F_FileName varchar(64),
	@F_UploadName varchar(64),
	@F_FileType varchar(16),
	@F_BookCode bigint,
	@F_PageNum int,
	@F_User varchar(16),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DECLARE @F_BookName varchar(32)
	SELECT @F_BookName = F_BookName FROM tb_A_BookInfo WHERE F_BookCode = @F_BookCode
	IF @F_OperFlg = ''1''
	BEGIN
		SELECT @F_FileCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_FileInfo
		(
			F_FileCode,
			F_FileName,
			F_UploadName,
			F_FileType,
			F_BookCode,
			F_PageNum,
			F_UploadUser,
			F_UploadDate
		)
		VALUES
		(
			@F_FileCode,
			@F_FileName,
			@F_UploadName,
			@F_FileType,
			@F_BookCode,
			@F_PageNum,
			@F_User,
			GETDATE()
		)
		SET @F_Log = @F_User + ''上传了文件（'' + @F_UploadName + ''）到电子书（'' + @F_BookName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 13,@F_User,@F_IP,@F_Log
	END
	ELSE IF @F_OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了电子书（'' + @F_BookName + ''）的文件（'' + F_UploadName + ''）。'' FROM dbo.tb_A_FileInfo WHERE F_FileCode = @F_FileCode
		DELETE FROM dbo.tb_A_FileInfo WHERE F_FileCode = @F_FileCode
		EXEC dbo.proc_A_WriteEventLog 13,@F_User,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_TemplateOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_TemplateOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_TemplateOperate]
	@OperFlg char(1),
	@F_TemplateCode bigint,
	@F_EnergyTypeID varchar(32),
	@F_TemplateName varchar(128),
	@F_TemplateLabel varchar(32),
	@F_TemplateType varchar(1),
	@F_DeviceTypeID varchar(32),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_TemplateCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_Template
		(
			F_TemplateCode,
			F_TemplateName,
			F_TemplateLabel,
			F_TemplateType,
			F_EnergyTypeID,
			F_DeviceTypeID,
			F_IsRefer
		)
		VALUES
		(
			@F_TemplateCode,
			@F_TemplateName,
			@F_TemplateLabel,
			@F_TemplateType,
			CASE @F_EnergyTypeID WHEN '''' THEN NULL ELSE @F_EnergyTypeID END,
			CASE @F_DeviceTypeID WHEN '''' THEN NULL ELSE @F_DeviceTypeID END,
			0
		)
		SET @F_Log = @F_UserID + ''添加了设备模板（'' + @F_TemplateName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_Template
		SET F_TemplateName = @F_TemplateName,
			F_TemplateLabel = @F_TemplateLabel,
			F_TemplateType = @F_TemplateType,
			F_EnergyTypeID = CASE @F_EnergyTypeID WHEN '''' THEN NULL ELSE @F_EnergyTypeID END,
			F_DeviceTypeID = CASE @F_DeviceTypeID WHEN '''' THEN NULL ELSE @F_DeviceTypeID END
		WHERE F_TemplateCode = @F_TemplateCode
		SET @F_Log = @F_UserID + ''修改了设备模板（'' + @F_TemplateName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_UserID + ''删除了设备模板（'' + F_TemplateName + ''）。'' FROM dbo.tb_A_Template WHERE F_TemplateCode = @F_TemplateCode
		DELETE FROM dbo.tb_A_Template WHERE F_TemplateCode = @F_TemplateCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_HelpOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_HelpOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_HelpOperate]
	@TypeFlg char(1),
	@OperFlg char(1),
	@F_ProjectNo int,
	@F_MenuCode bigint,
	@F_MenuTag varchar(32),
	@F_MenuName varchar(32),
	@F_MenuIndex int,
	@F_ParentCode bigint
AS
BEGIN
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_MenuCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_ProjectToHelp
		(
			F_ProjectNo,
			F_MenuCode,
			F_MenuTag,
			F_MenuName,
			F_MenuType,
			F_MenuIndex,
			F_IsHasChild,
			F_ParentCode
		)
		VALUES
		(
			@F_ProjectNo,
			@F_MenuCode,
			@F_MenuTag,
			@F_MenuName,
			@TypeFlg,
			@F_MenuIndex,
			0,
			@F_ParentCode
		)
		IF @TypeFlg = ''2'' AND EXISTS(SELECT F_MenuCode FROM dbo.tb_A_ProjectToHelp WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_ParentCode AND (F_IsHasChild = 0 OR F_IsHasChild IS NULL))
			UPDATE dbo.tb_A_ProjectToHelp SET F_IsHasChild = 1 WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_ParentCode
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_ProjectToHelp
		SET F_MenuTag = @F_MenuTag,
			F_MenuName = @F_MenuName,
			F_MenuIndex = @F_MenuIndex
		WHERE F_ProjectNo = @F_ProjectNo
			AND F_MenuCode = @F_MenuCode
		IF @TypeFlg = ''2'' AND EXISTS(SELECT F_MenuCode FROM dbo.tb_A_ProjectToHelp WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_ParentCode AND (F_IsHasChild = 0 OR F_IsHasChild IS NULL))
			UPDATE dbo.tb_A_ProjectToHelp SET F_IsHasChild = 1 WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_ParentCode
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		IF @TypeFlg = ''2'' 
		BEGIN
			SELECT @F_ParentCode = F_ParentCode FROM dbo.tb_A_ProjectToHelp WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_MenuCode
			DELETE FROM dbo.tb_A_ProjectToHelp WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_MenuCode
			IF NOT EXISTS(SELECT F_MenuCode FROM dbo.tb_A_ProjectToHelp WHERE F_ProjectNo = @F_ProjectNo AND F_ParentCode = @F_ParentCode)
				UPDATE dbo.tb_A_ProjectToHelp SET F_IsHasChild = 0 WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_ParentCode
		END
		ELSE
		BEGIN
			DELETE FROM dbo.tb_A_ProjectToHelp WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_MenuCode
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetUserMobileApps]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetUserMobileApps]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetUserMobileApps]
	@F_UserCode bigint
AS
BEGIN
	DECLARE @F_UserType char(1)
	SELECT @F_UserType = F_UserType FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	
	IF @F_UserType = ''1'' OR @F_UserType = ''2''
	BEGIN
		SELECT 
			A.F_AppCode,
			A.F_AppName,
			A.F_AppTag,
			1 AS F_IsAuth,
			C.F_FunctionCode,
			D.F_PluginCode,
			D.F_PluginTag,
			D.F_GuideMode 
		FROM dbo.tb_A_MobileApp A 
			LEFT OUTER JOIN dbo.tb_A_Function C 
				ON A.F_FunctionCode = C.F_FunctionCode 
			LEFT OUTER JOIN dbo.tb_A_Plugins D 
				ON C.F_PluginCode = D.F_PluginCode
	END
	ELSE
	BEGIN
		SELECT 
			A.F_AppCode,
			A.F_AppName,
			A.F_AppTag,
			CASE WHEN B.F_UserCode IS NULL THEN 0 ELSE 1 END AS F_IsAuth,
			C.F_FunctionCode,
			D.F_PluginCode,
			D.F_PluginTag,
			D.F_GuideMode 
		FROM dbo.tb_A_MobileApp A 
			LEFT OUTER JOIN dbo.tb_A_MobileAppToUser B 
				ON B.F_UserCode = @F_UserCode AND A.F_AppCode = B.F_AppCode 
			LEFT OUTER JOIN dbo.tb_A_Function C 
				ON A.F_FunctionCode = C.F_FunctionCode 
			LEFT OUTER JOIN dbo.tb_A_Plugins D 
				ON C.F_PluginCode = D.F_PluginCode
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetUserApps]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetUserApps]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetUserApps]
	@F_UserCode bigint
AS
BEGIN
	DECLARE @F_UserType char(1)
	DECLARE @F_RoleCode bigint
	
	SELECT @F_UserType = F_UserType,@F_RoleCode = F_RoleCode FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	
	IF @F_UserType = ''1'' OR @F_UserType = ''2''
	BEGIN
		SELECT
			A.*,
			CASE WHEN B.F_AppCode IS NULL THEN ''0'' ELSE ''1'' END AS F_Status,
			B.F_AppSize
		FROM
		(
			SELECT
				F_ProjectNo,
				F_ProjectName,
				F_ProjectTag,
				F_ProjectColor,
				1 AS F_Type
			FROM dbo.tb_A_Project
			UNION
			SELECT
				F_AgentCode AS F_ProjectNo,
				F_AgentName AS F_ProjectName,
				F_ProjectTag,
				F_ProjectColor,
				2 AS F_Type
			FROM dbo.tb_A_Agent
		) A LEFT OUTER JOIN dbo.tb_A_MyApp B
			ON B.F_UserCode = @F_UserCode 
			AND B.F_AppCode = A.F_ProjectNo
		ORDER BY F_Type,F_ProjectNo
	END
	ELSE IF @F_UserType = ''3''
	BEGIN
		SELECT
			A.*,
			CASE WHEN B.F_AppCode IS NULL THEN ''0'' ELSE ''1'' END AS F_Status,
			B.F_AppSize
		FROM
		(
			SELECT
				B.F_ProjectNo,
				B.F_ProjectName,
				B.F_ProjectTag,
				B.F_ProjectColor,
				1 AS F_Type
			FROM dbo.tb_A_RoleToApp A,dbo.tb_A_Project B
			WHERE A.F_RoleCode = @F_RoleCode
				AND A.F_AppNo = B.F_ProjectNo
				AND A.F_AppType = 1
			UNION
			SELECT
				F_AgentCode AS F_ProjectNo,
				F_AgentName AS F_ProjectName,
				F_ProjectTag,
				F_ProjectColor,
				2 AS F_Type
			FROM dbo.tb_A_RoleToApp A,dbo.tb_A_Agent B
			WHERE A.F_RoleCode = @F_RoleCode
				AND A.F_AppNo = B.F_AgentCode
				AND A.F_AppType = 2
		) A LEFT OUTER JOIN dbo.tb_A_MyApp B
			ON B.F_UserCode = @F_UserCode 
			AND B.F_AppCode = A.F_ProjectNo
		ORDER BY F_Type,F_ProjectNo
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_PluginIsMappingFun]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_PluginIsMappingFun]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_PluginIsMappingFun] (
	@F_PluginCode bigint
) RETURNS bit
BEGIN
	DECLARE @F_Result bit
	IF EXISTS(SELECT F_FunctionCode FROM tb_A_Function WHERE F_PluginCode = @F_PluginCode) SET @F_Result = 1
	ELSE SET @F_Result = 0
	RETURN @F_Result
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetProjectHelpMenu]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetProjectHelpMenu]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetProjectHelpMenu]
	@F_ProjectNo bigint,
	@F_ParentCode varchar(32),
	@F_MenuType char(1)
AS
BEGIN
	IF @F_MenuType = ''1''
	BEGIN
		SELECT 
			A.F_ParentCode,
			A.F_MenuCode,
			A.F_MenuTag,
			A.F_MenuName,
			A.F_MenuIndex,
			A.F_IsHasChild
		FROM dbo.tb_A_ProjectToHelp A
		WHERE A.F_ProjectNo = @F_ProjectNo
			AND A.F_MenuType = ''1'' 
		ORDER BY A.F_MenuIndex
	END
	ELSE
	BEGIN
		IF @F_ParentCode = ''''
		BEGIN
			SELECT
				A.F_ParentCode,
				A.F_MenuCode,
				A.F_MenuTag,
				A.F_MenuName,
				A.F_MenuIndex,
				A.F_IsHasChild 
			FROM dbo.tb_A_ProjectToHelp A 
			WHERE A.F_ProjectNo = @F_ProjectNo
				AND A.F_MenuType = ''2'' 
			ORDER BY A.F_ParentCode,A.F_MenuIndex
		END
		ELSE
		BEGIN
			SELECT
				A.F_ParentCode,
				A.F_MenuCode,
				A.F_MenuTag,
				A.F_MenuName,
				A.F_MenuIndex,
				A.F_IsHasChild
			FROM dbo.tb_A_ProjectToHelp A 
			WHERE A.F_ProjectNo = @F_ProjectNo 
				AND A.F_ParentCode = @F_ParentCode
				AND A.F_MenuType = ''2'' 
			ORDER BY A.F_ParentCode,A.F_MenuIndex
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetPluginPackage]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetPluginPackage]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetPluginPackage]
	@F_SysStr varchar(max),
	@F_SysMenuStr varchar(max),
	@F_AppStr varchar(max)
AS
BEGIN
	SELECT DISTINCT
		A.F_PluginCode,
		A.F_PluginTag,
		A.F_PluginName
	FROM dbo.tb_A_Plugins A,
		dbo.tb_A_Function B,
		dbo.tb_A_ProjectToMenu C,
		dbo.fun_SplitByComma(@F_SysStr) D
	WHERE C.F_ProjectNo = D.F_ObjectID
		AND C.F_FunctionCode = B.F_FunctionCode
		AND B.F_PluginCode = A.F_PluginCode
	UNION
	SELECT DISTINCT
		A.F_PluginCode,
		A.F_PluginTag,
		A.F_PluginName
	FROM dbo.tb_A_Plugins A,
		dbo.tb_A_Function B,
		dbo.tb_A_ProjectToMenu C,
		dbo.fun_SplitByComma(@F_SysMenuStr) D
	WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
		AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
		AND C.F_FunctionCode = B.F_FunctionCode
		AND B.F_PluginCode = A.F_PluginCode
	UNION
	SELECT DISTINCT
		A.F_PluginCode,
		A.F_PluginTag,
		A.F_PluginName
	FROM dbo.tb_A_Plugins A,
		dbo.tb_A_Function B,
		dbo.tb_A_MobileApp C,
		dbo.fun_SplitByComma(@F_AppStr) D
	WHERE C.F_AppCode = D.F_ObjectID
		AND C.F_FunctionCode = B.F_FunctionCode
		AND B.F_PluginCode = A.F_PluginCode
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_PluginOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_PluginOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_PluginOperate]
	@OperFlg char(1),
	@F_PluginCode bigint,
	@F_PluginName varchar(64),
	@F_PluginTag varchar(64),
	@F_PluginTypeNo varchar(1),
	@F_PluginCategory varchar(1),
	@F_IsConfig bit,
	@F_ConfType varchar(1),
	@F_EnergyConfig bit,
	@F_TemplateConfig bit,
	@F_DeviceConfig bit,
	@F_GuideMode varchar(4),
	@F_User varchar(32)
AS
BEGIN
	IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_A_Plugins
		(
			F_PluginCode,
			F_PluginName,
			F_PluginTag,
			F_PluginTypeNo,
			F_PluginCategory,
			F_IsConfig,
			F_ConfType,
			F_EnergyConfig,
			F_TemplateConfig,
			F_DeviceConfig,
			F_GuideMode,
			F_CreateUser,
			F_CreateDate
		)
		SELECT
			dbo.fun_MakeSerialNum(),
			@F_PluginName,
			@F_PluginTag,
			@F_PluginTypeNo,
			@F_PluginCategory,
			@F_IsConfig,
			@F_ConfType,
			@F_EnergyConfig,
			@F_TemplateConfig,
			@F_DeviceConfig,
			@F_GuideMode,
			@F_User,
			GETDATE()
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_Plugins
		SET F_PluginName = @F_PluginName,
			F_PluginTypeNo = @F_PluginTypeNo,
			F_PluginCategory = @F_PluginCategory,
			F_IsConfig = @F_IsConfig,
			F_ConfType = @F_ConfType,
			F_EnergyConfig = @F_EnergyConfig,
			F_TemplateConfig = @F_TemplateConfig,
			F_DeviceConfig = @F_DeviceConfig,
			F_GuideMode = @F_GuideMode,
			F_UpdateUser = @F_User,
			F_UpdateDate = GETDATE()
		WHERE F_PluginCode = @F_PluginCode
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		DELETE FROM dbo.tb_A_Plugins WHERE F_PluginCode = @F_PluginCode
		DELETE FROM dbo.tb_A_PluginEnvVar WHERE F_PluginCode = @F_PluginCode
		DELETE FROM dbo.tb_A_PluginToCustom WHERE F_PluginCode = @F_PluginCode
		DELETE FROM dbo.tb_A_PluginToDevice WHERE F_PluginCode = @F_PluginCode
		DELETE FROM dbo.tb_A_PluginToEnergy WHERE F_PluginCode = @F_PluginCode
		DELETE FROM dbo.tb_A_PluginToEntity WHERE F_PluginCode = @F_PluginCode
		DELETE FROM dbo.tb_A_PluginToEntityRename WHERE F_PluginCode = @F_PluginCode
		DELETE FROM dbo.tb_A_PluginToTemplate WHERE F_PluginCode = @F_PluginCode
		DELETE FROM dbo.tb_A_PluginToTree WHERE F_PluginCode = @F_PluginCode
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_PluginEnvVarOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_PluginEnvVarOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_PluginEnvVarOperate]
	@F_OperFlg char(1),
	@F_PluginCode bigint,
	@F_EnvVarKey varchar(50),
	@F_User varchar(32)
AS
BEGIN
	IF @F_OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_A_PluginEnvVar
		(
			F_PluginCode,
			F_EnvVarKey
		)
		VALUES
		(
			@F_PluginCode,
			@F_EnvVarKey
		)
	END
	ELSE IF @F_OperFlg = ''3''
	BEGIN
		DELETE FROM dbo.tb_A_PluginEnvVar WHERE F_PluginCode = @F_PluginCode AND F_EnvVarKey = @F_EnvVarKey
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_PlanTaskOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_PlanTaskOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_PlanTaskOperate]
	@OperFlg char(1),
	@F_TaskCode bigint,
	@F_TaskName varchar(64),
	@F_TaskTag varchar(64),
	@F_ProjectNo varchar(32),
	@F_FunctionCode varchar(32),
	@F_TaskType varchar(16),
	@F_YearTime varchar(11),
	@F_MonthTime varchar(8),
	@F_DayTime varchar(8),
	@F_WeekDay varchar(16),
	@F_WeekTime varchar(5),
	@F_CycleTime varchar(16),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		IF @F_TaskType = ''cyc''
		BEGIN
			INSERT INTO dbo.tb_A_PlanTask
			(
				F_TaskCode,
				F_TaskName,
				F_TaskTag,
				F_ProjectNo,
				F_FunctionCode,
				F_TaskType,
				F_CycleTime
			)
			VALUES
			(
				dbo.fun_MakeSerialNum(),
				@F_TaskName,
				@F_TaskTag,
				CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
				CASE @F_FunctionCode WHEN '''' THEN NULL ELSE @F_FunctionCode END,
				@F_TaskType,
				CASE @F_CycleTime WHEN '''' THEN NULL ELSE @F_CycleTime END
			)
		END
		ELSE IF @F_TaskType = ''day''
		BEGIN
			INSERT INTO dbo.tb_A_PlanTask
			(
				F_TaskCode,
				F_TaskName,
				F_TaskTag,
				F_ProjectNo,
				F_FunctionCode,
				F_TaskType,
				F_DayTime
			)
			VALUES
			(
				dbo.fun_MakeSerialNum(),
				@F_TaskName,
				@F_TaskTag,
				CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
				CASE @F_FunctionCode WHEN '''' THEN NULL ELSE @F_FunctionCode END,
				@F_TaskType,
				@F_DayTime
			)
		END
		ELSE IF @F_TaskType = ''week''
		BEGIN
			INSERT INTO dbo.tb_A_PlanTask
			(
				F_TaskCode,
				F_TaskName,
				F_TaskTag,
				F_ProjectNo,
				F_FunctionCode,
				F_TaskType,
				F_WeekDay,
				F_WeekTime
			)
			VALUES
			(
				dbo.fun_MakeSerialNum(),
				@F_TaskName,
				@F_TaskTag,
				CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
				CASE @F_FunctionCode WHEN '''' THEN NULL ELSE @F_FunctionCode END,
				@F_TaskType,
				CASE @F_WeekDay WHEN '''' THEN NULL ELSE @F_WeekDay END,
				@F_WeekTime
			)
		END
		ELSE IF @F_TaskType = ''month''
		BEGIN
			INSERT INTO dbo.tb_A_PlanTask
			(
				F_TaskCode,
				F_TaskName,
				F_TaskTag,
				F_ProjectNo,
				F_FunctionCode,
				F_TaskType,
				F_MonthTime
			)
			VALUES
			(
				dbo.fun_MakeSerialNum(),
				@F_TaskName,
				@F_TaskTag,
				CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
				CASE @F_FunctionCode WHEN '''' THEN NULL ELSE @F_FunctionCode END,
				@F_TaskType,
				@F_MonthTime
			)
		END
		ELSE IF @F_TaskType = ''year''
		BEGIN
			INSERT INTO dbo.tb_A_PlanTask
			(
				F_TaskCode,
				F_TaskName,
				F_TaskTag,
				F_ProjectNo,
				F_FunctionCode,
				F_TaskType,
				F_YearTime
			)
			VALUES
			(
				dbo.fun_MakeSerialNum(),
				@F_TaskName,
				@F_TaskTag,
				CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
				CASE @F_FunctionCode WHEN '''' THEN NULL ELSE @F_FunctionCode END,
				@F_TaskType,
				@F_YearTime
			)
		END
		
		SET @F_Log = @F_UserID + ''添加了计划任务（'' + @F_TaskName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 21,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		IF @F_TaskType = ''cyc''
			UPDATE dbo.tb_A_PlanTask
			SET F_TaskName = @F_TaskName,
				F_TaskTag = @F_TaskTag,
				F_ProjectNo = CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
				F_FunctionCode = CASE @F_FunctionCode WHEN '''' THEN NULL ELSE @F_FunctionCode END,
				F_TaskType = @F_TaskType,
				F_CycleTime = CASE @F_CycleTime WHEN '''' THEN NULL ELSE @F_CycleTime END,
				F_YearTime = NULL,
				F_MonthTime = NULL,
				F_DayTime = NULL,
				F_WeekDay = NULL,
				F_WeekTime = NULL
			WHERE F_TaskCode = @F_TaskCode
		ELSE IF @F_TaskType = ''day''
			UPDATE dbo.tb_A_PlanTask
			SET F_TaskName = @F_TaskName,
				F_TaskTag = @F_TaskTag,
				F_ProjectNo = CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
				F_FunctionCode = CASE @F_FunctionCode WHEN '''' THEN NULL ELSE @F_FunctionCode END,
				F_TaskType = @F_TaskType,
				F_DayTime = @F_DayTime,
				F_YearTime = NULL,
				F_MonthTime = NULL,
				F_CycleTime = NULL,
				F_WeekDay = NULL,
				F_WeekTime = NULL
			WHERE F_TaskCode = @F_TaskCode
		ELSE IF @F_TaskType = ''week''
			UPDATE dbo.tb_A_PlanTask
			SET F_TaskName = @F_TaskName,
				F_TaskTag = @F_TaskTag,
				F_ProjectNo = CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
				F_FunctionCode = CASE @F_FunctionCode WHEN '''' THEN NULL ELSE @F_FunctionCode END,
				F_TaskType = @F_TaskType,
				F_WeekDay = CASE @F_WeekDay WHEN '''' THEN NULL ELSE @F_WeekDay END,
				F_WeekTime = @F_WeekTime,
				F_YearTime = NULL,
				F_MonthTime = NULL,
				F_DayTime = NULL,
				F_CycleTime = NULL
			WHERE F_TaskCode = @F_TaskCode
		ELSE IF @F_TaskType = ''month''
			UPDATE dbo.tb_A_PlanTask
			SET F_TaskName = @F_TaskName,
				F_TaskTag = @F_TaskTag,
				F_ProjectNo = CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
				F_FunctionCode = CASE @F_FunctionCode WHEN '''' THEN NULL ELSE @F_FunctionCode END,
				F_TaskType = @F_TaskType,
				F_MonthTime = @F_MonthTime,
				F_YearTime = NULL,
				F_DayTime = NULL,
				F_CycleTime = NULL,
				F_WeekDay = NULL,
				F_WeekTime = NULL
			WHERE F_TaskCode = @F_TaskCode
		ELSE IF @F_TaskType = ''year''
			UPDATE dbo.tb_A_PlanTask
			SET F_TaskName = @F_TaskName,
				F_TaskTag = @F_TaskTag,
				F_ProjectNo = CASE @F_ProjectNo WHEN '''' THEN NULL ELSE @F_ProjectNo END,
				F_FunctionCode = CASE @F_FunctionCode WHEN '''' THEN NULL ELSE @F_FunctionCode END,
				F_TaskType = @F_TaskType,
				F_YearTime = @F_YearTime,
				F_MonthTime = NULL,
				F_DayTime = NULL,
				F_CycleTime = NULL,
				F_WeekDay = NULL,
				F_WeekTime = NULL
			WHERE F_TaskCode = @F_TaskCode
		SET @F_Log = @F_UserID + ''修改了计划任务（'' + @F_TaskName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 21,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_UserID + ''删除了计划任务（'' + @F_TaskName + ''）。'' FROM dbo.tb_A_PlanTask WHERE F_TaskCode = @F_TaskCode
		DELETE FROM dbo.tb_A_PlanTask WHERE F_TaskCode = @F_TaskCode
		EXEC dbo.proc_A_WriteEventLog 21,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_MobileAppToUser]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_MobileAppToUser]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_MobileAppToUser]
	@OperFlg char(1),
	@F_AppCode bigint,
	@F_UserCode bigint,
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_A_MobileAppToUser
		(
			F_UserCode,
			F_AppCode
		)
		VALUES
		(
			@F_UserCode,
			@F_AppCode
		)
		
		SELECT @F_Log = @F_UserID + ''给用户（'' + A.F_UserID + ''）授权了移动应用（'' + B.F_AppName + ''）。'' FROM dbo.tb_A_LoginUser A,dbo.tb_A_MobileApp B WHERE A.F_UserCode = @F_UserCode AND B.F_AppCode = @F_AppCode
		EXEC dbo.proc_A_WriteEventLog 20,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_UserID + ''取消了用户（'' + A.F_UserID + ''）对移动应用（'' + B.F_AppName + ''）的权限。'' FROM dbo.tb_A_LoginUser A,dbo.tb_A_MobileApp B WHERE A.F_UserCode = @F_UserCode AND B.F_AppCode = @F_AppCode
		DELETE FROM dbo.tb_A_MobileAppToUser WHERE F_AppCode = @F_AppCode AND F_UserCode = @F_UserCode
		EXEC dbo.proc_A_WriteEventLog 20,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_MobileAppOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_MobileAppOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_MobileAppOperate]
	@OperFlg char(1),
	@F_AppCode bigint,
	@F_AppName varchar(32),
	@F_AppTag varchar(32),
	@F_AppType varchar(32),
	@F_FunctionCode bigint,
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_A_MobileApp
		(
			F_AppCode,
			F_AppName,
			F_AppTag,
			F_AppType,
			F_FunctionCode
		)
		VALUES
		(
			dbo.fun_MakeSerialNum(),
			@F_AppName,
			@F_AppTag,
			@F_AppType,
			@F_FunctionCode
		)
		
		SET @F_Log = @F_UserID + ''添加了移动应用（'' + @F_AppName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 20,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_MobileApp
		SET F_AppName = @F_AppName,
			F_AppTag = @F_AppTag,
			F_AppType = @F_AppType,
			F_FunctionCode = @F_FunctionCode
		WHERE F_AppCode = @F_AppCode
		SET @F_Log = @F_UserID + ''修改了移动应用（'' + @F_AppName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 20,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_UserID + ''删除了移动应用（'' + @F_AppName + ''）。'' FROM dbo.tb_A_MobileApp WHERE F_AppCode = @F_AppCode
		DELETE FROM dbo.tb_A_MobileApp WHERE F_AppCode = @F_AppCode
		EXEC dbo.proc_A_WriteEventLog 20,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_MenuOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_MenuOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_MenuOperate]
	@TypeFlg char(1),
	@OperFlg char(1),
	@F_ProjectNo int,
	@F_MenuCode bigint,
	@F_MenuTag varchar(32),
	@F_MenuName varchar(32),
	@F_MenuAbbr varchar(32),
	@F_MenuIndex int,
	@F_MenuPosition varchar(1),
	@F_ParentCode bigint,
	@F_FunctionCode bigint
AS
BEGIN
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_MenuCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_ProjectToMenu
		(
			F_ProjectNo,
			F_MenuCode,
			F_MenuTag,
			F_MenuName,
			F_MenuAbbr,
			F_MenuType,
			F_MenuIndex,
			F_MenuPosition,
			F_IsHasChild,
			F_ParentCode,
			F_FunctionCode
		)
		VALUES
		(
			@F_ProjectNo,
			@F_MenuCode,
			@F_MenuTag,
			@F_MenuName,
			@F_MenuAbbr,
			@TypeFlg,
			@F_MenuIndex,
			@F_MenuPosition,
			0,
			@F_ParentCode,
			@F_FunctionCode
		)
		IF @TypeFlg = ''2'' AND EXISTS(SELECT F_MenuCode FROM dbo.tb_A_ProjectToMenu WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_ParentCode AND (F_IsHasChild = 0 OR F_IsHasChild IS NULL))
			UPDATE dbo.tb_A_ProjectToMenu SET F_IsHasChild = 1 WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_ParentCode
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_ProjectToMenu
		SET F_MenuTag = @F_MenuTag,
			F_MenuName = @F_MenuName,
			F_MenuAbbr = @F_MenuAbbr,
			F_MenuIndex = @F_MenuIndex,
			F_FunctionCode = @F_FunctionCode
		WHERE F_ProjectNo = @F_ProjectNo
			AND F_MenuCode = @F_MenuCode
		IF @TypeFlg = ''2'' AND EXISTS(SELECT F_MenuCode FROM dbo.tb_A_ProjectToMenu WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_ParentCode AND (F_IsHasChild = 0 OR F_IsHasChild IS NULL))
			UPDATE dbo.tb_A_ProjectToMenu SET F_IsHasChild = 1 WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_ParentCode
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		IF @TypeFlg = ''2'' 
		BEGIN
			SELECT @F_ParentCode = F_ParentCode FROM dbo.tb_A_ProjectToMenu WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_MenuCode
			DELETE FROM dbo.tb_A_ProjectToMenu WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_MenuCode
			IF NOT EXISTS(SELECT F_FunctionCode FROM dbo.tb_A_ProjectToMenu WHERE F_ProjectNo = @F_ProjectNo AND F_ParentCode = @F_ParentCode)
				UPDATE dbo.tb_A_ProjectToMenu SET F_IsHasChild = 0 WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_ParentCode
		END
		ELSE
		BEGIN
			DELETE FROM dbo.tb_A_ProjectToMenu WHERE F_ProjectNo = @F_ProjectNo AND F_MenuCode = @F_MenuCode
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_RoleToApp]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_RoleToApp]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_RoleToApp]
	@OperFlg char(1),
	@F_RoleCode bigint,
	@F_AppNo bigint,
	@F_AppType int,
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''0''
	BEGIN
		DELETE FROM dbo.tb_A_RoleToApp WHERE F_RoleCode = @F_RoleCode AND F_AppNo = @F_AppNo
		SELECT @F_Log = @F_UserID + ''删除了角色（'' + F_RoleName + ''）'' FROM dbo.tb_A_Role WHERE F_RoleCode = @F_RoleCode
		IF @F_AppType = 1
			SELECT @F_Log = @F_Log + ''的《'' + F_ProjectName + ''》系统权限。'' FROM dbo.tb_A_Project WHERE F_ProjectNo = @F_AppNo
		ELSE IF @F_AppType = 2
			SELECT @F_Log = @F_Log + ''的《'' + F_AgentName + ''》系统权限。'' FROM dbo.tb_A_Agent WHERE F_AgentCode = @F_AppNo
		EXEC dbo.proc_A_WriteEventLog 8,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_A_RoleToApp VALUES (@F_RoleCode,@F_AppNo,@F_AppType)
		SELECT @F_Log = @F_UserID + ''添加了角色（'' + F_RoleName + ''）'' FROM dbo.tb_A_Role WHERE F_RoleCode = @F_RoleCode
		IF @F_AppType = 1
			SELECT @F_Log = @F_Log + ''的《'' + F_ProjectName + ''》系统权限。'' FROM dbo.tb_A_Project WHERE F_ProjectNo = @F_AppNo
		ELSE IF @F_AppType = 2
			SELECT @F_Log = @F_Log + ''的《'' + F_AgentName + ''》系统权限。'' FROM dbo.tb_A_Agent WHERE F_AgentCode = @F_AppNo
		EXEC dbo.proc_A_WriteEventLog 8,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_RoleOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_RoleOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_RoleOperate]
	@OperFlg char(1),
	@F_RoleCode bigint,
	@F_RoleName varchar(32),
	@F_RoleGroup varchar(32),
	@F_Kanban varchar(32),
	@F_Project varchar(32),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_RoleCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_Role
		(
			F_RoleCode,
			F_RoleName,
			F_RoleGroup,
			F_Kanban
		)
		VALUES
		(
			@F_RoleCode,
			@F_RoleName,
			@F_RoleGroup,
			CASE @F_Kanban WHEN '''' THEN NULL ELSE @F_Kanban END
		)
		SET @F_Log = @F_UserID + ''添加了角色（'' + @F_RoleName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 8,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_Role
		SET F_RoleName = @F_RoleName,
			F_RoleGroup = @F_RoleGroup,
			F_Kanban = CASE @F_Kanban WHEN '''' THEN NULL ELSE @F_Kanban END,
			F_Project = CASE @F_Project WHEN '''' THEN NULL ELSE @F_Project END
		WHERE F_RoleCode = @F_RoleCode
		SET @F_Log = @F_UserID + ''修改了角色（'' + @F_RoleName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 8,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_UserID + ''删除了角色（'' + F_RoleName + ''）。'' FROM dbo.tb_A_Role WHERE F_RoleCode = @F_RoleCode
		DELETE FROM dbo.tb_A_Role WHERE F_RoleCode = @F_RoleCode
		EXEC dbo.proc_A_WriteEventLog 8,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_CalendarOperate]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_CalendarOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_CalendarOperate]
	@OperFlg char(1),
	@F_StartDate date,
	@F_EndDate date,
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @TempDate date
	DECLARE @F_Log varchar(512)
	
	DELETE FROM dbo.tb_D_WorkCalendar WHERE F_Date BETWEEN @F_StartDate AND @F_EndDate
    SET @TempDate = @F_StartDate
    WHILE DATEDIFF(D,@TempDate,@F_EndDate) >= 0
	BEGIN	
		INSERT INTO dbo.tb_D_WorkCalendar VALUES(@TempDate,@OperFlg)
		SET @TempDate = DATEADD(D,1,@TempDate)
	END
	
	SET @F_Log = @F_UserID + ''设置日期范围（'' + CAST(@F_StartDate AS VARCHAR) + ''～'' + CAST(@F_EndDate AS VARCHAR) + ''）为'' + (CASE @OperFlg WHEN 1 THEN ''工作日'' ELSE ''节假日'' END) + ''。''
	EXEC dbo.proc_A_WriteEventLog 10,@F_UserID,@F_IP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_BookOperate]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_BookOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_BookOperate] 
	@F_Type char(1),
	@F_BookCode bigint,
	@F_BookName varchar(64),
	@F_BookImage varchar(32),
	@F_TypeNo int,
	@F_User varchar(16),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @F_Type = ''1''
	BEGIN
		SELECT @F_BookCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_BookInfo
		(
			F_BookCode,
			F_BookName,
			F_BookImage,
			F_TypeNo,
			F_MakeUser,
			F_MakeDate
		)
		VALUES
		(
			@F_BookCode,
			@F_BookName,
			@F_BookImage,
			@F_TypeNo,
			@F_User,
			GETDATE()
		)
		SET @F_Log = @F_User + ''添加了电子书（'' + @F_BookName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 13,@F_User,@F_IP,@F_Log
	END
	ELSE IF @F_Type = ''2''
	BEGIN
		UPDATE dbo.tb_A_BookInfo
		SET F_BookName = @F_BookName,
			F_MakeUser = @F_User,
			F_MakeDate = GETDATE()
		WHERE F_BookCode = @F_BookCode
		SET @F_Log = @F_User + ''修改了电子书（'' + @F_BookName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 13,@F_User,@F_IP,@F_Log
	END
	ELSE IF @F_Type = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了电子书（'' + F_BookName + ''）。'' FROM dbo.tb_A_BookInfo WHERE F_BookCode = @F_BookCode
		DELETE FROM dbo.tb_A_BookInfo WHERE F_BookCode = @F_BookCode
		DELETE FROM dbo.tb_A_FileInfo WHERE F_BookCode = @F_BookCode
		EXEC dbo.proc_A_WriteEventLog 13,@F_User,@F_IP,@F_Log
	END
	ELSE IF @F_Type = ''4''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了电子书（'' + F_BookName + ''）的徽标。'' FROM dbo.tb_A_BookInfo WHERE F_BookCode = @F_BookCode
		UPDATE dbo.tb_A_BookInfo SET F_BookImage = NULL WHERE F_BookCode = @F_BookCode
		EXEC dbo.proc_A_WriteEventLog 13,@F_User,@F_IP,@F_Log
	END
	ELSE IF @F_Type = ''5''
	BEGIN
		SELECT @F_Log = @F_User + ''上传了电子书（'' + F_BookName + ''）的徽标。'' FROM dbo.tb_A_BookInfo WHERE F_BookCode = @F_BookCode
		UPDATE dbo.tb_A_BookInfo SET F_BookImage = @F_BookImage WHERE F_BookCode = @F_BookCode
		EXEC dbo.proc_A_WriteEventLog 13,@F_User,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_ApplyOperate]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_ApplyOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_ApplyOperate]
	@OperFlg char(1),
	@F_RouterCode bigint,
	@F_AppCode bigint,
	@F_AppID varchar(32),
	@F_AppName varchar(32),
	@F_SecretKey varchar(512),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_A_IoTApp
		(
			F_RouterCode,
			F_AppCode,
			F_AppID,
			F_AppName,
			F_SecretKey
		)
		VALUES
		(
			@F_RouterCode,
			dbo.fun_MakeSerialNum(),
			@F_AppID,
			@F_AppName,
			@F_SecretKey
		)
		SET @F_Log = @F_UserID + ''添加了物联应用（'' + @F_AppName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_IoTApp
		SET F_RouterCode = @F_RouterCode,
			F_AppID = @F_AppID,
			F_AppName = @F_AppName,
			F_SecretKey = @F_SecretKey
		WHERE F_AppCode = @F_AppCode
		SET @F_Log = @F_UserID + ''修改了物联应用（'' + @F_AppName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_UserID + ''删除了物联应用（'' + F_AppName + ''）。'' FROM dbo.tb_A_IoTApp WHERE F_AppCode = @F_AppCode
		DELETE FROM dbo.tb_A_IoTApp WHERE F_AppCode = @F_AppCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_AgentOperate]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_AgentOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_AgentOperate]
	@OperFlg char(1),
	@F_AgentCode bigint,
	@F_AgentName varchar(32),
	@F_AgentAbbr varchar(16),
	@F_ProjectTag varchar(16),
	@F_ProjectType varchar(32),
	@F_AgentURL varchar(512),
	@F_PublicKey varchar(128),
	@F_ProjectDes varchar(128),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_AgentCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_Agent
		(
			F_AgentCode,
			F_AgentName,
			F_AgentAbbr,
			F_ProjectTag,
			F_ProjectType,
			F_AgentURL,
			F_PublicKey,
			F_ProjectDes
		)
		VALUES
		(
			dbo.fun_MakeSerialNum(),
			@F_AgentName,
			@F_AgentAbbr,
			@F_ProjectTag,
			@F_ProjectType,
			@F_AgentURL,
			@F_PublicKey,
			@F_ProjectDes
		)
		SET @F_Log = @F_UserID + ''添加了代理应用（'' + @F_AgentName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 9,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''2''
	BEGIN
		UPDATE dbo.tb_A_Agent
		SET F_AgentName = @F_AgentName,
			F_AgentAbbr = @F_AgentAbbr,
			F_ProjectTag = @F_ProjectTag,
			F_ProjectType = @F_ProjectType,
			F_AgentURL = @F_AgentURL,
			F_PublicKey = @F_PublicKey,
			F_ProjectDes = @F_ProjectDes
		WHERE F_AgentCode = @F_AgentCode
		SET @F_Log = @F_UserID + ''修改了代理应用（'' + @F_AgentName + ''）。''
		EXEC dbo.proc_A_WriteEventLog 9,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_UserID + ''删除了代理应用（'' + F_AgentName + ''）。'' FROM dbo.tb_A_Agent WHERE F_AgentCode = @F_AgentCode
		DELETE FROM dbo.tb_A_Agent WHERE F_AgentCode = @F_AgentCode
		EXEC dbo.proc_A_WriteEventLog 9,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetProjectFunNum]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetProjectFunNum]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetProjectFunNum] (
	@F_ProjectNo int,
	@F_MenuType char(1)
) RETURNS int
BEGIN
	DECLARE @Num int
	SET @Num = 0
	SELECT @Num = COUNT(F_MenuCode) FROM dbo.tb_A_ProjectToMenu WHERE F_ProjectNo = @F_ProjectNo AND F_MenuType = @F_MenuType
	RETURN @Num
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_EmailOperate]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_EmailOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_EmailOperate]
	@OperFlg char(1),
	@F_EmailCode bigint,
	@F_Recipient varchar(1024),
	@F_Copier varchar(1024),
	@F_Theme varchar(1024),
	@F_Content varchar(max),
	@F_Attachment varchar(128),
	@F_AttachCode varchar(128),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_EmailCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_EmailInfo
		(
			F_EmailCode,
			F_Recipient,
			F_Copier,
			F_Theme,
			F_Content,
			F_Attachment,
			F_AttachCode,
			F_Status
		)
		VALUES
		(
			@F_EmailCode,
			@F_Recipient,
			@F_Copier,
			@F_Theme,
			@F_Content,
			@F_Attachment,
			@F_AttachCode,
			0
		)
		SET @F_Log = @F_UserID + ''新建了电子邮件（编号：'' + CAST(@F_EmailCode AS VARCHAR) + ''）。''
		EXEC dbo.proc_A_WriteEventLog 22,@F_UserID,@F_IP,@F_Log
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		SET @F_Log = @F_UserID + ''删除了电子邮件（编号：'' + CAST(@F_EmailCode AS VARCHAR) + ''）。''
		DELETE FROM dbo.tb_A_EmailInfo WHERE F_EmailCode = @F_EmailCode
		EXEC dbo.proc_A_WriteEventLog 22,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_DocumentOperate]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_DocumentOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_DocumentOperate] 
	@F_OperFlg char(1),
	@F_DocumentCode bigint,
	@F_DocumentName varchar(64),
	@F_DocumentType varchar(16),
	@F_ParentCode bigint,
	@F_UploadName varchar(64),
	@F_FileType varchar(16),
	@F_User varchar(16),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)

	IF @F_OperFlg = ''1''
	BEGIN
		INSERT INTO dbo.tb_A_DocumentInfo
		(
			F_DocumentCode,
			F_DocumentName,
			F_DocumentType,
			F_ParentCode,
			F_FileType,
			F_UploadName,
			F_CreateUser,
			F_CreateDate
		)
		VALUES
		(
			dbo.fun_MakeSerialNum(),
			@F_DocumentName,
			@F_DocumentType,
			@F_ParentCode,
			@F_FileType,
			@F_UploadName,
			@F_User,
			GETDATE()
		)
		IF @F_DocumentType = ''folder'' SET @F_Log = @F_User + ''添加了文件夹（'' + @F_DocumentName + ''）到文档资料库。''
		ELSE SET @F_Log = @F_User + ''上传了文件（'' + @F_UploadName + ''）到文档资料库。''
		EXEC dbo.proc_A_WriteEventLog 18,@F_User,@F_IP,@F_Log
	END
	ELSE IF @F_OperFlg = ''2''
	BEGIN
		IF @F_DocumentType = ''folder''
		BEGIN
			SELECT @F_Log = @F_User + ''将文件夹（'' + F_DocumentName + ''）名称更改为（'' + @F_DocumentName + ''）。'' FROM dbo.tb_A_DocumentInfo WHERE F_DocumentCode = @F_DocumentCode
			UPDATE dbo.tb_A_DocumentInfo SET F_DocumentName = @F_DocumentName WHERE F_DocumentCode = @F_DocumentCode AND F_DocumentName <> @F_DocumentName
		END
		ELSE
		BEGIN
			SELECT @F_Log = @F_User + ''将文件（'' + F_UploadName + ''）名称更改为（'' + @F_UploadName + ''）。'' FROM dbo.tb_A_DocumentInfo WHERE F_DocumentCode = @F_DocumentCode
			UPDATE dbo.tb_A_DocumentInfo SET F_UploadName = @F_UploadName WHERE F_DocumentCode = @F_DocumentCode AND F_UploadName <> @F_UploadName
		END
		IF @@ROWCOUNT > 0
		BEGIN
			EXEC dbo.proc_A_WriteEventLog 18,@F_User,@F_IP,@F_Log
		END
	END
	ELSE IF @F_OperFlg = ''3''
	BEGIN
		SELECT @F_Log = @F_User + ''删除了'' + CASE F_DocumentType WHEN ''folder'' THEN ''文件夹'' ELSE ''文件'' END + ''（'' + CASE F_DocumentType WHEN ''folder'' THEN F_DocumentName ELSE F_UploadName END + ''）。'' FROM dbo.tb_A_DocumentInfo WHERE F_DocumentCode = @F_DocumentCode
		DELETE FROM dbo.tb_A_DocumentInfo WHERE F_DocumentCode = @F_DocumentCode
		EXEC dbo.proc_A_WriteEventLog 18,@F_User,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetEntityPropertyKeyText]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetEntityPropertyKeyText]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetEntityPropertyKeyText] (
	@F_DictionaryID bigint,
	@F_PropertyValue varchar(512)
) RETURNS varchar(512) 
BEGIN
	DECLARE @PropertyText varchar(512)
	
	SELECT @PropertyText = F_Value FROM dbo.tb_B_KeyValueList WHERE F_DictionaryID = @F_DictionaryID AND F_Key = @F_PropertyValue
	RETURN ISNULL(@PropertyText,'''')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntityPropertyInfo]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntityPropertyInfo]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntityPropertyInfo]
	@F_EntityID varchar(max),
	@F_PropertyType varchar(1),
	@F_Date varchar(7),
	@F_Filter varchar(max)
AS
BEGIN
	IF @F_PropertyType IS NULL OR @F_PropertyType = ''''
	BEGIN
		IF @F_Filter IS NULL OR @F_Filter = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_PropertyID,
				A.F_PropertyName,
				A.F_PropertyIdentifier,
				A.F_PropertyUnit,
				A.F_GroupTypeID,
				A.F_PropertyTypeID,
				ISNULL(ISNULL(E.F_PropertyValue,A.F_DefaultValue),'''') AS F_PropertyValue,
				CASE 
					WHEN E.F_PropertyValue IS NULL OR E.F_PropertyValue = '''' THEN ''''
					WHEN A.F_DictionaryType IS NULL OR A.F_DictionaryType = '''' THEN ''''
					WHEN A.F_DictionaryType = ''1'' THEN dbo.fun_GetEntityPropertyKeyText(A.F_DictionaryID,E.F_PropertyValue)
					WHEN A.F_DictionaryType = ''2'' THEN dbo.fun_GetEntityPropertyTreeText(A.F_DictionaryKey,A.F_DictionaryID,A.F_PropertyIdentifier,E.F_PropertyValue)
				END AS F_PropertyText
			FROM
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_OrderNum,
					D.F_PropertyID,
					D.F_PropertyName,
					D.F_PropertyIdentifier,
					D.F_PropertyUnit,
					D.F_GroupTypeID,
					D.F_PropertyTypeID,
					D.F_DictionaryType,
					D.F_DictionaryID,
					D.F_DictionaryKey,
					D.F_DefaultValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.tb_B_DictTreeProperty C,
					dbo.tb_B_ObjectProperty D
				WHERE A.F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_EntityID))
					AND A.F_TemplateID = C.F_GroupID
					AND C.F_PropertyID = D.F_PropertyID
			) A LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty E
				ON A.F_EntityID = E.F_EntityID AND A.F_PropertyID = E.F_PropertyID AND E.F_EndYM = ''9999-12-31''
			ORDER BY A.F_OrderTag,A.F_OrderNum
		END
		BEGIN
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_PropertyID,
				A.F_PropertyName,
				A.F_PropertyIdentifier,
				A.F_PropertyUnit,
				A.F_GroupTypeID,
				A.F_PropertyTypeID,
				ISNULL(ISNULL(E.F_PropertyValue,A.F_DefaultValue),'''') AS F_PropertyValue,
				CASE 
					WHEN E.F_PropertyValue IS NULL OR E.F_PropertyValue = '''' THEN ''''
					WHEN A.F_DictionaryType IS NULL OR A.F_DictionaryType = '''' THEN ''''
					WHEN A.F_DictionaryType = ''1'' THEN dbo.fun_GetEntityPropertyKeyText(A.F_DictionaryID,E.F_PropertyValue)
					WHEN A.F_DictionaryType = ''2'' THEN dbo.fun_GetEntityPropertyTreeText(A.F_DictionaryKey,A.F_DictionaryID,A.F_PropertyIdentifier,E.F_PropertyValue)
				END AS F_PropertyText
			FROM
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_OrderNum,
					D.F_PropertyID,
					D.F_PropertyName,
					D.F_PropertyIdentifier,
					D.F_PropertyUnit,
					D.F_GroupTypeID,
					D.F_PropertyTypeID,
					D.F_DictionaryType,
					D.F_DictionaryID,
					D.F_DictionaryKey,
					D.F_DefaultValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.tb_B_DictTreeProperty C,
					dbo.tb_B_ObjectProperty D
				WHERE A.F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_EntityID))
					AND A.F_TemplateID = C.F_GroupID
					AND C.F_PropertyID = D.F_PropertyID
					AND D.F_PropertyIdentifier IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_Filter))
			) A LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty E
				ON A.F_EntityID = E.F_EntityID AND A.F_PropertyID = E.F_PropertyID AND E.F_EndYM = ''9999-12-31''
			ORDER BY A.F_OrderTag,A.F_OrderNum
		END
	END
	ELSE IF @F_PropertyType = ''A''
	BEGIN
		IF @F_Filter IS NULL OR @F_Filter = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_PropertyID,
				A.F_PropertyName,
				A.F_PropertyIdentifier,
				A.F_PropertyUnit,
				A.F_GroupTypeID,
				A.F_PropertyTypeID,
				ISNULL(ISNULL(E.F_PropertyValue,A.F_DefaultValue),'''') AS F_PropertyValue,
				CASE 
					WHEN E.F_PropertyValue IS NULL OR E.F_PropertyValue = '''' THEN ''''
					WHEN A.F_DictionaryType IS NULL OR A.F_DictionaryType = '''' THEN ''''
					WHEN A.F_DictionaryType = ''1'' THEN dbo.fun_GetEntityPropertyKeyText(A.F_DictionaryID,E.F_PropertyValue)
					WHEN A.F_DictionaryType = ''2'' THEN dbo.fun_GetEntityPropertyTreeText(A.F_DictionaryKey,A.F_DictionaryID,A.F_PropertyIdentifier,E.F_PropertyValue)
				END AS F_PropertyText
			FROM
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_OrderNum,
					D.F_PropertyID,
					D.F_PropertyName,
					D.F_PropertyIdentifier,
					D.F_PropertyUnit,
					D.F_GroupTypeID,
					D.F_PropertyTypeID,
					D.F_DictionaryType,
					D.F_DictionaryID,
					D.F_DictionaryKey,
					D.F_DefaultValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.tb_B_DictTreeProperty C,
					dbo.tb_B_ObjectProperty D
				WHERE A.F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_EntityID))
					AND A.F_TemplateID = C.F_GroupID
					AND C.F_PropertyID = D.F_PropertyID
					AND D.F_GroupTypeID = @F_PropertyType
			) A LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty E
				ON A.F_EntityID = E.F_EntityID AND A.F_PropertyID = E.F_PropertyID AND E.F_EndYM = ''9999-12-31''
			ORDER BY A.F_OrderTag,A.F_OrderNum
		END
		ELSE
		BEGIN
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_PropertyID,
				A.F_PropertyName,
				A.F_PropertyIdentifier,
				A.F_PropertyUnit,
				A.F_GroupTypeID,
				A.F_PropertyTypeID,
				ISNULL(ISNULL(E.F_PropertyValue,A.F_DefaultValue),'''') AS F_PropertyValue,
				CASE 
					WHEN E.F_PropertyValue IS NULL OR E.F_PropertyValue = '''' THEN ''''
					WHEN A.F_DictionaryType IS NULL OR A.F_DictionaryType = '''' THEN ''''
					WHEN A.F_DictionaryType = ''1'' THEN dbo.fun_GetEntityPropertyKeyText(A.F_DictionaryID,E.F_PropertyValue)
					WHEN A.F_DictionaryType = ''2'' THEN dbo.fun_GetEntityPropertyTreeText(A.F_DictionaryKey,A.F_DictionaryID,A.F_PropertyIdentifier,E.F_PropertyValue)
				END AS F_PropertyText
			FROM
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_OrderNum,
					D.F_PropertyID,
					D.F_PropertyName,
					D.F_PropertyIdentifier,
					D.F_PropertyUnit,
					D.F_GroupTypeID,
					D.F_PropertyTypeID,
					D.F_DictionaryType,
					D.F_DictionaryID,
					D.F_DictionaryKey,
					D.F_DefaultValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.tb_B_DictTreeProperty C,
					dbo.tb_B_ObjectProperty D
				WHERE A.F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_EntityID))
					AND A.F_TemplateID = C.F_GroupID
					AND C.F_PropertyID = D.F_PropertyID
					AND D.F_GroupTypeID = @F_PropertyType
					AND D.F_PropertyIdentifier IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_Filter))
			) A LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty E
				ON A.F_EntityID = E.F_EntityID AND A.F_PropertyID = E.F_PropertyID AND E.F_EndYM = ''9999-12-31''
			ORDER BY A.F_OrderTag,A.F_OrderNum
		END
	END
	ELSE IF @F_PropertyType = ''B'' AND @F_Date <> ''''
	BEGIN
		IF @F_Filter IS NULL OR @F_Filter = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_PropertyID,
				A.F_PropertyName,
				A.F_PropertyIdentifier,
				A.F_PropertyUnit,
				A.F_GroupTypeID,
				A.F_PropertyTypeID,
				ISNULL(ISNULL(E.F_PropertyValue,A.F_DefaultValue),'''') AS F_PropertyValue,
				CASE 
					WHEN E.F_PropertyValue IS NULL OR E.F_PropertyValue = '''' THEN ''''
					WHEN A.F_DictionaryType IS NULL OR A.F_DictionaryType = '''' THEN ''''
					WHEN A.F_DictionaryType = ''1'' THEN dbo.fun_GetEntityPropertyKeyText(A.F_DictionaryID,E.F_PropertyValue)
					WHEN A.F_DictionaryType = ''2'' THEN dbo.fun_GetEntityPropertyTreeText(A.F_DictionaryKey,A.F_DictionaryID,A.F_PropertyIdentifier,E.F_PropertyValue)
				END AS F_PropertyText
			FROM
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_OrderNum,
					D.F_PropertyID,
					D.F_PropertyName,
					D.F_PropertyIdentifier,
					D.F_PropertyUnit,
					D.F_GroupTypeID,
					D.F_PropertyTypeID,
					D.F_DictionaryType,
					D.F_DictionaryID,
					D.F_DictionaryKey,
					D.F_DefaultValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.tb_B_DictTreeProperty C,
					dbo.tb_B_ObjectProperty D
				WHERE A.F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_EntityID))
					AND A.F_TemplateID = C.F_GroupID
					AND C.F_PropertyID = D.F_PropertyID
					AND D.F_GroupTypeID = @F_PropertyType
			) A LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty E
				ON A.F_EntityID = E.F_EntityID 
				AND A.F_PropertyID = E.F_PropertyID
				AND @F_Date BETWEEN CONVERT(VARCHAR(7),F_StartYM,120) AND CONVERT(VARCHAR(7),F_EndYM,120)
			ORDER BY A.F_OrderTag,A.F_OrderNum
		END
		ELSE
		BEGIN
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_PropertyID,
				A.F_PropertyName,
				A.F_PropertyIdentifier,
				A.F_PropertyUnit,
				A.F_GroupTypeID,
				A.F_PropertyTypeID,
				ISNULL(ISNULL(E.F_PropertyValue,A.F_DefaultValue),'''') AS F_PropertyValue,
				CASE 
					WHEN E.F_PropertyValue IS NULL OR E.F_PropertyValue = '''' THEN ''''
					WHEN A.F_DictionaryType IS NULL OR A.F_DictionaryType = '''' THEN ''''
					WHEN A.F_DictionaryType = ''1'' THEN dbo.fun_GetEntityPropertyKeyText(A.F_DictionaryID,E.F_PropertyValue)
					WHEN A.F_DictionaryType = ''2'' THEN dbo.fun_GetEntityPropertyTreeText(A.F_DictionaryKey,A.F_DictionaryID,A.F_PropertyIdentifier,E.F_PropertyValue)
				END AS F_PropertyText
			FROM
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_OrderNum,
					D.F_PropertyID,
					D.F_PropertyName,
					D.F_PropertyIdentifier,
					D.F_PropertyUnit,
					D.F_GroupTypeID,
					D.F_PropertyTypeID,
					D.F_DictionaryType,
					D.F_DictionaryID,
					D.F_DictionaryKey,
					D.F_DefaultValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.tb_B_DictTreeProperty C,
					dbo.tb_B_ObjectProperty D
				WHERE A.F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_EntityID))
					AND A.F_TemplateID = C.F_GroupID
					AND C.F_PropertyID = D.F_PropertyID
					AND D.F_GroupTypeID = @F_PropertyType
					AND D.F_PropertyIdentifier IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_Filter))
			) A LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty E
				ON A.F_EntityID = E.F_EntityID 
				AND A.F_PropertyID = E.F_PropertyID
				AND @F_Date BETWEEN CONVERT(VARCHAR(7),F_StartYM,120) AND CONVERT(VARCHAR(7),F_EndYM,120)
			ORDER BY A.F_OrderTag,A.F_OrderNum
		END		
	END
	ELSE IF @F_PropertyType = ''B'' AND (@F_Date IS NULL OR @F_Date = '''')
	BEGIN
		IF @F_Filter IS NULL OR @F_Filter = ''''
		BEGIN
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_PropertyID,
				A.F_PropertyName,
				A.F_PropertyIdentifier,
				A.F_PropertyUnit,
				A.F_GroupTypeID,
				A.F_PropertyTypeID,
				ISNULL(ISNULL(E.F_PropertyValue,A.F_DefaultValue),'''') AS F_PropertyValue,
				CASE 
					WHEN E.F_PropertyValue IS NULL OR E.F_PropertyValue = '''' THEN ''''
					WHEN A.F_DictionaryType IS NULL OR A.F_DictionaryType = '''' THEN ''''
					WHEN A.F_DictionaryType = ''1'' THEN dbo.fun_GetEntityPropertyKeyText(A.F_DictionaryID,E.F_PropertyValue)
					WHEN A.F_DictionaryType = ''2'' THEN dbo.fun_GetEntityPropertyTreeText(A.F_DictionaryKey,A.F_DictionaryID,A.F_PropertyIdentifier,E.F_PropertyValue)
				END AS F_PropertyText
			FROM
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_OrderNum,
					D.F_PropertyID,
					D.F_PropertyName,
					D.F_PropertyIdentifier,
					D.F_PropertyUnit,
					D.F_GroupTypeID,
					D.F_PropertyTypeID,
					D.F_DictionaryType,
					D.F_DictionaryID,
					D.F_DictionaryKey,
					D.F_DefaultValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.tb_B_DictTreeProperty C,
					dbo.tb_B_ObjectProperty D
				WHERE A.F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_EntityID))
					AND A.F_TemplateID = C.F_GroupID
					AND C.F_PropertyID = D.F_PropertyID
					AND D.F_GroupTypeID = @F_PropertyType
			) A LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty E
				ON A.F_EntityID = E.F_EntityID 
				AND A.F_PropertyID = E.F_PropertyID
				AND E.F_EndYM = ''9999-12-31''
			ORDER BY A.F_OrderTag,A.F_OrderNum
		END
		ELSE
		BEGIN
			SELECT
				A.F_EntityID,
				A.F_EntityName,
				A.F_PropertyID,
				A.F_PropertyName,
				A.F_PropertyIdentifier,
				A.F_PropertyUnit,
				A.F_GroupTypeID,
				A.F_PropertyTypeID,
				ISNULL(ISNULL(E.F_PropertyValue,A.F_DefaultValue),'''') AS F_PropertyValue,
				CASE 
					WHEN E.F_PropertyValue IS NULL OR E.F_PropertyValue = '''' THEN ''''
					WHEN A.F_DictionaryType IS NULL OR A.F_DictionaryType = '''' THEN ''''
					WHEN A.F_DictionaryType = ''1'' THEN dbo.fun_GetEntityPropertyKeyText(A.F_DictionaryID,E.F_PropertyValue)
					WHEN A.F_DictionaryType = ''2'' THEN dbo.fun_GetEntityPropertyTreeText(A.F_DictionaryKey,A.F_DictionaryID,A.F_PropertyIdentifier,E.F_PropertyValue)
				END AS F_PropertyText
			FROM
			(
				SELECT
					A.F_EntityID,
					A.F_EntityName,
					A.F_OrderTag,
					C.F_OrderNum,
					D.F_PropertyID,
					D.F_PropertyName,
					D.F_PropertyIdentifier,
					D.F_PropertyUnit,
					D.F_GroupTypeID,
					D.F_PropertyTypeID,
					D.F_DictionaryType,
					D.F_DictionaryID,
					D.F_DictionaryKey,
					D.F_DefaultValue
				FROM dbo.tb_B_EntityTreeModel A,
					dbo.tb_B_DictTreeProperty C,
					dbo.tb_B_ObjectProperty D
				WHERE A.F_EntityID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_EntityID))
					AND A.F_TemplateID = C.F_GroupID
					AND C.F_PropertyID = D.F_PropertyID
					AND D.F_GroupTypeID = @F_PropertyType
					AND D.F_PropertyIdentifier IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_Filter))
			) A LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty E
				ON A.F_EntityID = E.F_EntityID 
				AND A.F_PropertyID = E.F_PropertyID
				AND E.F_EndYM = ''9999-12-31''
			ORDER BY A.F_OrderTag,A.F_OrderNum
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntityPortraitInfo]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntityPortraitInfo]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntityPortraitInfo]
	@F_EntityID bigint,
	@F_PortraitID bigint
AS
BEGIN
	SELECT
		A.F_PropertyID,
		A.F_PropertyName,
		A.F_PropertyIdentifier,
		A.F_PropertyUnit,
		A.F_GroupTypeID,
		A.F_PropertyTypeID,
		ISNULL(ISNULL(E.F_PropertyValue,A.F_DefaultValue),'''') AS F_PropertyValue,
		CASE 
			WHEN E.F_PropertyValue IS NULL OR E.F_PropertyValue = '''' THEN ''''
			WHEN A.F_DictionaryType IS NULL OR A.F_DictionaryType = '''' THEN ''''
			WHEN A.F_DictionaryType = ''1'' THEN dbo.fun_GetEntityPropertyKeyText(A.F_DictionaryID,E.F_PropertyValue)
			WHEN A.F_DictionaryType = ''2'' THEN dbo.fun_GetEntityPropertyTreeText(A.F_DictionaryKey,A.F_DictionaryID,A.F_PropertyIdentifier,E.F_PropertyValue)
		END AS F_PropertyText
	FROM
	(
		SELECT
			A.F_EntityID,
			C.F_PortraitID,
			E.F_PortraitName,
			C.F_OrderNum,
			D.F_PropertyID,
			D.F_PropertyName,
			D.F_PropertyIdentifier,
			D.F_PropertyUnit,
			D.F_GroupTypeID,
			D.F_PropertyTypeID,
			D.F_DictionaryType,
			D.F_DictionaryID,
			D.F_DictionaryKey,
			D.F_DefaultValue
		FROM dbo.tb_B_EntityTreeModel A,
			dbo.tb_B_DictTreeProperty C,
			dbo.tb_B_ObjectProperty D,
			dbo.tb_B_DictPortrait E
		WHERE A.F_EntityID = @F_EntityID
			AND C.F_PortraitID = @F_PortraitID
			AND A.F_TemplateID = C.F_GroupID
			AND C.F_PropertyID = D.F_PropertyID
			AND E.F_GroupID = C.F_GroupID
			AND E.F_PortraitID = C.F_PortraitID
	) A LEFT OUTER JOIN dbo.tb_B_EntityTreeProperty E
		ON A.F_EntityID = E.F_EntityID AND A.F_PropertyID = E.F_PropertyID AND E.F_EndYM = ''9999-12-31''
	ORDER BY A.F_OrderNum
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetDictTemplateTag]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetDictTemplateTag]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetDictTemplateTag] (
	@F_TemplateID bigint
) RETURNS varchar(32) 
BEGIN
	DECLARE @F_TemplateTag varchar(32)
	SELECT @F_TemplateTag = F_GroupTag FROM dbo.tb_B_DictTreeModel WHERE F_GroupID = @F_TemplateID
	RETURN @F_TemplateTag
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPluginContextCustom]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPluginContextCustom]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [dbo].[fun_GetPluginContextCustom] (
	@F_FunctionCode bigint,
	@F_ProjectNo varchar(16),
	@F_UserCode bigint
)
RETURNS @tb_ContextCustom TABLE(tree int,id varchar(32), name varchar(128),pId varchar(32),type varchar(1),av bit,typeTag varchar(32),tplId bigint,nTplId bigint,orderby varchar(32))
BEGIN
    DECLARE @F_UserType char(1)
	SELECT @F_UserType = F_UserType FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	IF @F_UserType = ''1'' OR @F_UserType = ''2''
	BEGIN
		IF @F_ProjectNo = ''''
		BEGIN
			INSERT INTO @tb_ContextCustom
			SELECT
				B.F_EntityTreeNo,
				A.id,
				A.name,
				dbo.fun_GetPluginCustomNodePId(''v'',@F_FunctionCode,B.F_PluginCode,B.F_EntityTreeNo,A.tpl),
				'''',
				0,
				'''',
				null,
				null,
				A.orderby
			FROM dbo.fun_GetPluginCustomEntity(@F_FunctionCode) A,dbo.tb_A_PluginToCustom B
			WHERE B.F_FunctionCode = @F_FunctionCode
			INSERT INTO @tb_ContextCustom
			SELECT
				A.F_EntityTreeNo,
				A.F_EntityID,
				A.F_EntityName,
				dbo.fun_GetPluginCustomNodePId(''a'',@F_FunctionCode,B.F_PluginCode,B.F_EntityTreeNo,A.F_EntityID),
				ISNULL(A.F_ObjectGroup,''''),
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END,
				dbo.fun_GetDictTemplateTag(A.F_TemplateID),
				A.F_TemplateID,
				A.F_NodeTemplate,
				A.F_OrderTag
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToEntity B
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND A.F_IsDisplay = 1
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND B.F_EntityID = A.F_EntityID
			ORDER BY F_EntityTreeNo,A.F_EntityDepth,A.F_OrderTag
		END
		ELSE
		BEGIN
			INSERT INTO @tb_ContextCustom
			SELECT
				B.F_EntityTreeNo,
				A.id,
				A.name,
				dbo.fun_GetPluginCustomNodePId(''v'',@F_FunctionCode,B.F_PluginCode,B.F_EntityTreeNo,A.tpl),
				'''',
				0,
				'''',
				null,
				null,
				A.orderby
			FROM dbo.fun_GetPluginCustomEntity(@F_FunctionCode) A,dbo.tb_A_PluginToCustom B
			WHERE B.F_FunctionCode = @F_FunctionCode
			INSERT INTO @tb_ContextCustom
			SELECT
				A.F_EntityTreeNo,
				A.F_EntityID,
				A.F_EntityName,
				dbo.fun_GetPluginCustomNodePId(''a'',@F_FunctionCode,B.F_PluginCode,B.F_EntityTreeNo,A.F_EntityID),
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av,
				dbo.fun_GetDictTemplateTag(A.F_TemplateID),
				A.F_TemplateID,
				A.F_NodeTemplate,
				A.F_OrderTag
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToEntity B,dbo.tb_A_ProjectToTree C
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND C.F_ProjectNo = @F_ProjectNo
				AND A.F_IsDisplay = 1
				AND B.F_EntityTreeNo = C.F_EntityTreeNo
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND B.F_EntityID = C.F_EntityID
				AND C.F_EntityID = A.F_EntityID
			ORDER BY F_EntityTreeNo,A.F_EntityDepth,A.F_OrderTag
		END
	END
	ELSE
	BEGIN
		IF @F_ProjectNo = ''''
		BEGIN
			INSERT INTO @tb_ContextCustom
			SELECT
				B.F_EntityTreeNo,
				A.id,
				A.name,
				dbo.fun_GetPluginCustomNodePId(''v'',@F_FunctionCode,B.F_PluginCode,B.F_EntityTreeNo,A.tpl),
				'''',
				0,
				'''',
				null,
				null,
				A.orderby
			FROM dbo.fun_GetPluginCustomEntity(@F_FunctionCode) A,dbo.tb_A_PluginToCustom B
			WHERE B.F_FunctionCode = @F_FunctionCode
			INSERT INTO @tb_ContextCustom
			SELECT
				A.F_EntityTreeNo,
				A.F_EntityID,
				A.F_EntityName,
				dbo.fun_GetPluginCustomNodePId(''a'',@F_FunctionCode,B.F_PluginCode,B.F_EntityTreeNo,A.F_EntityID),
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av,
				dbo.fun_GetDictTemplateTag(A.F_TemplateID),
				A.F_TemplateID,
				A.F_NodeTemplate,
				A.F_OrderTag
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToEntity B,dbo.tb_A_LoginUser C,dbo.tb_A_RoleToTree D
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND C.F_UserCode = @F_UserCode
				AND A.F_IsDisplay = 1
				AND C.F_RoleCode = D.F_RoleCode
				AND B.F_EntityTreeNo = D.F_EntityTreeNo
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND B.F_EntityID = D.F_EntityID
				AND D.F_EntityID = A.F_EntityID
			ORDER BY F_EntityTreeNo,A.F_EntityDepth,A.F_OrderTag
		END
		ELSE
		BEGIN
			INSERT INTO @tb_ContextCustom
			SELECT
				B.F_EntityTreeNo,
				A.id,
				A.name,
				dbo.fun_GetPluginCustomNodePId(''v'',@F_FunctionCode,B.F_PluginCode,B.F_EntityTreeNo,A.tpl),
				'''',
				0,
				'''',
				null,
				null,
				A.orderby
			FROM dbo.fun_GetPluginCustomEntity(@F_FunctionCode) A,dbo.tb_A_PluginToCustom B
			WHERE B.F_FunctionCode = @F_FunctionCode
			INSERT INTO @tb_ContextCustom
			SELECT
				A.F_EntityTreeNo,
				A.F_EntityID,
				A.F_EntityName,
				dbo.fun_GetPluginCustomNodePId(''a'',@F_FunctionCode,B.F_PluginCode,B.F_EntityTreeNo,A.F_EntityID),
				ISNULL(A.F_ObjectGroup,'''') AS type,
				CASE WHEN A.F_ObjectGroup = ''2'' OR A.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeAorVType(A.F_EntityID) ELSE 0 END AS av,
				dbo.fun_GetDictTemplateTag(A.F_TemplateID),
				A.F_TemplateID,
				A.F_NodeTemplate,
				A.F_OrderTag
			FROM dbo.tb_B_EntityTreeModel A,tb_A_PluginToEntity B,dbo.tb_A_ProjectToTree C,dbo.tb_A_LoginUser D,dbo.tb_A_RoleToTree E
			WHERE B.F_FunctionCode = @F_FunctionCode
				AND C.F_ProjectNo = @F_ProjectNo
				AND D.F_UserCode = @F_UserCode
				AND A.F_IsDisplay = 1
				AND D.F_RoleCode = E.F_RoleCode
				AND B.F_EntityTreeNo = C.F_EntityTreeNo
				AND B.F_EntityTreeNo = E.F_EntityTreeNo
				AND B.F_EntityTreeNo = A.F_EntityTreeNo
				AND B.F_EntityID = C.F_EntityID
				AND C.F_EntityID = E.F_EntityID
				AND E.F_EntityID = A.F_EntityID
			ORDER BY F_EntityTreeNo,A.F_EntityDepth,A.F_OrderTag
		END
	END

    RETURN
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_GetEntityTreeData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_GetEntityTreeData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_GetEntityTreeData]
	@F_PluginCode bigint,
	@F_FunctionCode bigint,
	@F_AppCode varchar(16),
	@F_UserCode bigint,
	@F_HasEnergy bit,
	@F_EnergyTypeID varchar(max),
	@F_HasDevice bit,
	@F_DeviceTypeID varchar(max),
	@F_TemplateTag varchar(32)
AS
BEGIN
	DECLARE @F_ConfType VARCHAR(1)
	DECLARE @F_FilterID VARCHAR(max)
	
	IF @F_TemplateTag <> ''''
	BEGIN
		SELECT @F_FilterID = (STUFF((SELECT '','' + CAST(A.F_EntityID AS VARCHAR) FROM dbo.tb_B_EntityTreeModel A,dbo.tb_B_DictTreeModel B WHERE B.F_GroupTag = @F_TemplateTag AND (A.F_TemplateID = B.F_GroupID OR A.F_DeviceTypeID = B.F_GroupID) FOR xml path('''')),1,1,''''))
		IF EXISTS(SELECT F_GroupID FROM dbo.tb_B_DictTreeModel WHERE F_GroupTag = @F_TemplateTag AND F_ObjectGroup = ''3'') SET @F_HasDevice = 1
	END
	SELECT @F_ConfType = F_ConfType FROM dbo.tb_A_Plugins WHERE F_PluginCode = @F_PluginCode
	IF @F_ConfType = ''1''
	BEGIN
		IF @F_HasEnergy = 0 AND @F_HasDevice = 0
		BEGIN
			IF @F_FilterID IS NULL OR @F_FilterID = ''''
			BEGIN
				SELECT
					F_EntityTreeNo AS tree,
					F_EntityTreeNo AS id,
					F_EntityTreeRename AS name,
					0 AS pId,
					'''' AS type,
					2 AS flag,
					0 AS av,
					NULL AS tplId,
					NULL AS nTplId,
					'''' AS typeTag,
					0 AS F_EntityDepth,
					''0'' AS F_OrderTag
				FROM dbo.tb_A_PluginToEntityRename
				WHERE F_FunctionCode = @F_FunctionCode
					AND F_PluginCode = @F_PluginCode
				UNION
				SELECT
					A.tree,
					A.id,
					A.name,
					CASE WHEN dbo.fun_GetRenameEntityTree(@F_FunctionCode,@F_PluginCode,A.tree) <> '''' THEN A.tree ELSE 0 END AS pId,
					A.type,
					2 AS flag,
					A.av,
					B.F_TemplateID AS tplId,
					B.F_NodeTemplate AS nTplId,
					dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
					B.F_EntityDepth,
					B.F_OrderTag
				FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
					dbo.tb_B_EntityTreeModel B
				WHERE A.id = B.F_EntityID
				ORDER BY F_EntityDepth,F_OrderTag
			END
			ELSE
			BEGIN
				SELECT
					F_EntityTreeNo AS tree,
					F_EntityTreeNo AS id,
					F_EntityTreeRename AS name,
					0 AS pId,
					'''' AS type,
					2 AS flag,
					0 AS av,
					NULL AS tplId,
					NULL AS nTplId,
					'''' AS typeTag,
					0 AS F_EntityDepth,
					''0'' AS F_OrderTag
				FROM dbo.tb_A_PluginToEntityRename
				WHERE F_FunctionCode = @F_FunctionCode
					AND F_PluginCode = @F_PluginCode
				UNION
				SELECT
					A.tree,
					A.id,
					A.name,
					CASE WHEN dbo.fun_GetRenameEntityTree(@F_FunctionCode,@F_PluginCode,A.tree) <> '''' THEN A.tree ELSE 0 END AS pId,
					A.type,
					2 AS flag,
					A.av,
					B.F_TemplateID AS tplId,
					B.F_NodeTemplate AS nTplId,
					dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
					B.F_EntityDepth,
					B.F_OrderTag
				FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
					dbo.tb_B_EntityTreeModel B
				WHERE A.id = B.F_EntityID
					AND A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
				ORDER BY F_EntityDepth,F_OrderTag
			END
		END
		ELSE IF @F_HasEnergy = 1 AND @F_HasDevice = 0
		BEGIN
			IF @F_EnergyTypeID = ''''
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						F_EntityTreeNo AS tree,
						F_EntityTreeNo AS id,
						F_EntityTreeRename AS name,
						0 AS pId,
						'''' AS type,
						2 AS flag,
						0 AS av,
						NULL AS tplId,
						NULL AS nTplId,
						'''' AS typeTag,
						0 AS F_EntityDepth,
						''0'' AS F_OrderTag
					FROM dbo.tb_A_PluginToEntityRename
					WHERE F_FunctionCode = @F_FunctionCode
						AND F_PluginCode = @F_PluginCode
					UNION
					SELECT
						A.tree,
						A.id,
						A.name,
						CASE WHEN dbo.fun_GetRenameEntityTree(@F_FunctionCode,@F_PluginCode,A.tree) <> '''' THEN A.tree ELSE 0 END AS pId,
						A.type,
						2 AS flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C
					WHERE A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
					ORDER BY F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT
						F_EntityTreeNo AS tree,
						F_EntityTreeNo AS id,
						F_EntityTreeRename AS name,
						0 AS pId,
						'''' AS type,
						2 AS flag,
						0 AS av,
						NULL AS tplId,
						NULL AS nTplId,
						'''' AS typeTag,
						0 AS F_EntityDepth,
						''0'' AS F_OrderTag
					FROM dbo.tb_A_PluginToEntityRename
					WHERE F_FunctionCode = @F_FunctionCode
						AND F_PluginCode = @F_PluginCode
					UNION
					SELECT
						A.tree,
						A.id,
						A.name,
						CASE WHEN dbo.fun_GetRenameEntityTree(@F_FunctionCode,@F_PluginCode,A.tree) <> '''' THEN A.tree ELSE 0 END AS pId,
						A.type,
						2 AS flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
						AND A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C
					WHERE B.F_NodeID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
			ELSE
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						F_EntityTreeNo AS tree,
						F_EntityTreeNo AS id,
						F_EntityTreeRename AS name,
						0 AS pId,
						'''' AS type,
						2 AS flag,
						0 AS av,
						NULL AS tplId,
						NULL AS nTplId,
						'''' AS typeTag,
						0 AS F_EntityDepth,
						''0'' AS F_OrderTag
					FROM dbo.tb_A_PluginToEntityRename
					WHERE F_FunctionCode = @F_FunctionCode
						AND F_PluginCode = @F_PluginCode
					UNION
					SELECT
						A.tree,
						A.id,
						A.name,
						CASE WHEN dbo.fun_GetRenameEntityTree(@F_FunctionCode,@F_PluginCode,A.tree) <> '''' THEN A.tree ELSE 0 END AS pId,
						A.type,
						2 AS flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_SplitByComma(@F_EnergyTypeID) D
					WHERE A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
						AND dbo.fun_GetNodeEnergyType(B.F_NodeID)  = D.F_ObjectID
					ORDER BY F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT
						F_EntityTreeNo AS tree,
						F_EntityTreeNo AS id,
						F_EntityTreeRename AS name,
						0 AS pId,
						'''' AS type,
						2 AS flag,
						0 AS av,
						NULL AS tplId,
						NULL AS nTplId,
						'''' AS typeTag,
						0 AS F_EntityDepth,
						''0'' AS F_OrderTag
					FROM dbo.tb_A_PluginToEntityRename
					WHERE F_FunctionCode = @F_FunctionCode
						AND F_PluginCode = @F_PluginCode
					UNION
					SELECT
						A.tree,
						A.id,
						A.name,
						CASE WHEN dbo.fun_GetRenameEntityTree(@F_FunctionCode,@F_PluginCode,A.tree) <> '''' THEN A.tree ELSE 0 END AS pId,
						A.type,
						2 AS flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
						AND A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_SplitByComma(@F_EnergyTypeID) D
					WHERE B.F_NodeID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
						AND dbo.fun_GetNodeEnergyType(B.F_NodeID)  = D.F_ObjectID
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
		END
		ELSE IF @F_HasEnergy = 0 AND @F_HasDevice = 1
		BEGIN
			IF @F_DeviceTypeID = ''''
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						F_EntityTreeNo AS tree,
						F_EntityTreeNo AS id,
						F_EntityTreeRename AS name,
						0 AS pId,
						'''' AS type,
						2 AS flag,
						0 AS av,
						NULL AS tplId,
						NULL AS nTplId,
						'''' AS typeTag,
						0 AS F_EntityDepth,
						''0'' AS F_OrderTag
					FROM dbo.tb_A_PluginToEntityRename
					WHERE F_FunctionCode = @F_FunctionCode
						AND F_PluginCode = @F_PluginCode
					UNION
					SELECT
						A.tree,
						A.id,
						A.name,
						CASE WHEN dbo.fun_GetRenameEntityTree(@F_FunctionCode,@F_PluginCode,A.tree) <> '''' THEN A.tree ELSE 0 END AS pId,
						A.type,
						2 AS flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C
					WHERE A.id = B.F_EntityID
						AND B.F_DeviceID = C.F_EntityID
					ORDER BY F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT
						F_EntityTreeNo AS tree,
						F_EntityTreeNo AS id,
						F_EntityTreeRename AS name,
						0 AS pId,
						'''' AS type,
						2 AS flag,
						0 AS av,
						NULL AS tplId,
						NULL AS nTplId,
						'''' AS typeTag,
						0 AS F_EntityDepth,
						''0'' AS F_OrderTag
					FROM dbo.tb_A_PluginToEntityRename
					WHERE F_FunctionCode = @F_FunctionCode
						AND F_PluginCode = @F_PluginCode
					UNION
					SELECT
						A.tree,
						A.id,
						A.name,
						CASE WHEN dbo.fun_GetRenameEntityTree(@F_FunctionCode,@F_PluginCode,A.tree) <> '''' THEN A.tree ELSE 0 END AS pId,
						A.type,
						2 AS flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
						AND A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C
					WHERE B.F_DeviceID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_DeviceID = C.F_EntityID
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
			ELSE
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						F_EntityTreeNo AS tree,
						F_EntityTreeNo AS id,
						F_EntityTreeRename AS name,
						0 AS pId,
						'''' AS type,
						2 AS flag,
						0 AS av,
						NULL AS tplId,
						NULL AS nTplId,
						'''' AS typeTag,
						0 AS F_EntityDepth,
						''0'' AS F_OrderTag
					FROM dbo.tb_A_PluginToEntityRename
					WHERE F_FunctionCode = @F_FunctionCode
						AND F_PluginCode = @F_PluginCode
					UNION
					SELECT
						A.tree,
						A.id,
						A.name,
						CASE WHEN dbo.fun_GetRenameEntityTree(@F_FunctionCode,@F_PluginCode,A.tree) <> '''' THEN A.tree ELSE 0 END AS pId,
						A.type,
						2 AS flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_SplitByComma(@F_DeviceTypeID) D
					WHERE A.id = B.F_EntityID
						AND B.F_DeviceID = C.F_EntityID
						AND dbo.fun_GetNodeDeviceType(B.F_DeviceID) = D.F_ObjectID
					ORDER BY F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT
						F_EntityTreeNo AS tree,
						F_EntityTreeNo AS id,
						F_EntityTreeRename AS name,
						0 AS pId,
						'''' AS type,
						2 AS flag,
						0 AS av,
						NULL AS tplId,
						NULL AS nTplId,
						'''' AS typeTag,
						0 AS F_EntityDepth,
						''0'' AS F_OrderTag
					FROM dbo.tb_A_PluginToEntityRename
					WHERE F_FunctionCode = @F_FunctionCode
						AND F_PluginCode = @F_PluginCode
					UNION
					SELECT
						A.tree,
						A.id,
						A.name,
						CASE WHEN dbo.fun_GetRenameEntityTree(@F_FunctionCode,@F_PluginCode,A.tree) <> '''' THEN A.tree ELSE 0 END AS pId,
						A.type,
						2 AS flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
						AND A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_SplitByComma(@F_DeviceTypeID) D
					WHERE B.F_DeviceID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_DeviceID = C.F_EntityID
						AND dbo.fun_GetNodeDeviceType(B.F_DeviceID) = D.F_ObjectID
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
		END
	END
	ELSE IF @F_ConfType = ''2'' OR @F_ConfType = ''3''
	BEGIN
		IF @F_HasEnergy = 0 AND @F_HasDevice = 0
		BEGIN
			IF @F_FilterID IS NULL OR @F_FilterID = ''''
			BEGIN
				SELECT
					A.tree,
					A.id,
					A.name,
					A.pId,
					A.type,
					A.flag,
					A.av,
					B.F_TemplateID AS tplId,
					B.F_NodeTemplate AS nTplId,
					dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
					B.F_EntityDepth,
					B.F_OrderTag
				FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
					dbo.tb_B_EntityTreeModel B
				WHERE A.id = B.F_EntityID
				ORDER BY tree,B.F_EntityDepth,B.F_OrderTag
			END
			ELSE
			BEGIN
				SELECT
					A.tree,
					A.id,
					A.name,
					A.pId,
					A.type,
					A.flag,
					A.av,
					B.F_TemplateID AS tplId,
					B.F_NodeTemplate AS nTplId,
					dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
					B.F_EntityDepth,
					B.F_OrderTag
				FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
					dbo.tb_B_EntityTreeModel B
				WHERE A.id = B.F_EntityID
					AND A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
				ORDER BY tree,B.F_EntityDepth,B.F_OrderTag
			END
		END
		ELSE IF @F_HasEnergy = 1 AND @F_HasDevice = 0
		BEGIN
			IF @F_EnergyTypeID = ''''
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						A.flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C
					WHERE A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
					ORDER BY tree,F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						A.flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
						AND A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C
					WHERE B.F_NodeID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
					ORDER BY tree,F_EntityDepth,F_OrderTag
				END
			END
			ELSE
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						A.flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_SplitByComma(@F_EnergyTypeID) D
					WHERE A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
						AND dbo.fun_GetNodeEnergyType(B.F_NodeID) = D.F_ObjectID
					ORDER BY tree,F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						A.flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
						AND A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_SplitByComma(@F_EnergyTypeID) D
					WHERE B.F_NodeID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
						AND dbo.fun_GetNodeEnergyType(B.F_NodeID) = D.F_ObjectID
					ORDER BY tree,F_EntityDepth,F_OrderTag
				END
			END
		END
		ELSE IF @F_HasEnergy = 0 AND @F_HasDevice = 1
		BEGIN
			IF @F_DeviceTypeID = ''''
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						A.flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C
					WHERE A.id = B.F_EntityID
						AND B.F_DeviceID = C.F_EntityID
					ORDER BY tree,F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						A.flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
						AND A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C
					WHERE B.F_DeviceID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_DeviceID = C.F_EntityID
					ORDER BY tree,F_EntityDepth,F_OrderTag
				END
			END
			ELSE
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						A.flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_GetUserDeviceAuth(@F_UserCode,@F_DeviceTypeID) D
					WHERE A.id = B.F_EntityID
						AND B.F_DeviceID = D.id
						AND B.F_DeviceID = C.F_EntityID
					ORDER BY tree,F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						A.flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
						AND A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_EntityDepth,
						C.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_GetUserDeviceAuth(@F_UserCode,@F_DeviceTypeID) D
					WHERE B.F_DeviceID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_DeviceID = D.id
						AND B.F_DeviceID = C.F_EntityID
					ORDER BY tree,F_EntityDepth,F_OrderTag
				END
			END
		END
	END
	ELSE IF @F_ConfType = ''4''
	BEGIN
		IF @F_HasEnergy = 0 AND @F_HasDevice = 0
		BEGIN
			IF @F_FilterID IS NULL OR @F_FilterID = ''''
			BEGIN
				SELECT
					A.tree,
					A.id,
					A.name,
					A.pId,
					A.type,
					2 AS flag,
					A.av,
					A.tplId,
					A.nTplId,
					A.typeTag
				FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
				ORDER BY A.orderby
			END
			ELSE
			BEGIN
				SELECT
					A.tree,
					A.id,
					A.name,
					A.pId,
					A.type,
					2 AS flag,
					A.av,
					A.tplId,
					A.nTplId,
					A.typeTag
				FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
				WHERE A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
				ORDER BY A.orderby
			END
		END
		ELSE IF @F_HasEnergy = 1 AND @F_HasDevice = 0
		BEGIN
			IF @F_EnergyTypeID = ''''
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						2 AS flag,
						A.av,
						A.tplId,
						A.nTplId,
						A.typeTag,
						A.orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_OrderTag AS orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C
					WHERE A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
					ORDER BY orderby
				END
				ELSE
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						2 AS flag,
						A.av,
						A.tplId,
						A.nTplId,
						A.typeTag,
						A.orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
					WHERE A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_OrderTag AS orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C
					WHERE B.F_NodeID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
					ORDER BY orderby
				END
			END
			ELSE
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						2 AS flag,
						A.av,
						A.tplId,
						A.nTplId,
						A.typeTag,
						A.orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_OrderTag AS orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_SplitByComma(@F_EnergyTypeID) D
					WHERE A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
						AND dbo.fun_GetNodeEnergyType(B.F_NodeID) = D.F_ObjectID
					ORDER BY orderby
				END
				ELSE
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						2 AS flag,
						A.av,
						A.tplId,
						A.nTplId,
						A.typeTag,
						A.orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
					WHERE A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_NodeID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_OrderTag AS orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeMetering B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_SplitByComma(@F_EnergyTypeID) D
					WHERE B.F_NodeID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_EndDate IS NULL
						AND B.F_NodeID = C.F_EntityID
						AND dbo.fun_GetNodeEnergyType(B.F_NodeID) = D.F_ObjectID
					ORDER BY orderby
				END
			END
		END
		ELSE IF @F_HasEnergy = 0 AND @F_HasDevice = 1
		BEGIN
			IF @F_DeviceTypeID = ''''
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						2 AS flag,
						A.av,
						A.tplId,
						A.nTplId,
						A.typeTag,
						A.orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_OrderTag AS orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C
					WHERE A.id = B.F_EntityID
						AND B.F_DeviceID = C.F_EntityID
					ORDER BY orderby
				END
				ELSE
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						2 AS flag,
						A.av,
						A.tplId,
						A.nTplId,
						A.typeTag,
						A.orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
					WHERE A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_OrderTag AS orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C
					WHERE B.F_DeviceID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_DeviceID = C.F_EntityID
					ORDER BY orderby
				END
			END
			ELSE
			BEGIN
				IF @F_FilterID IS NULL OR @F_FilterID = ''''
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						2 AS flag,
						A.av,
						A.tplId,
						A.nTplId,
						A.typeTag,
						A.orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_OrderTag AS orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_GetUserDeviceAuth(@F_UserCode,@F_DeviceTypeID) D
					WHERE A.id = B.F_EntityID
						AND B.F_DeviceID = D.id
						AND B.F_DeviceID = C.F_EntityID
					ORDER BY orderby
				END
				ELSE
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						2 AS flag,
						A.av,
						A.tplId,
						A.nTplId,
						A.typeTag,
						A.orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
					WHERE A.id IN (SELECT id FROM dbo.fun_GetParentNodeByChilds(@F_FilterID))
					UNION
					SELECT
						A.tree,
						B.F_DeviceID AS id,
						C.F_EntityName AS name,
						A.id AS pId,
						C.F_ObjectGroup AS type,
						2 AS flag,
						dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
						C.F_TemplateID AS tplId,
						C.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
						C.F_OrderTag AS orderby
					FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeToDevice B,
						dbo.tb_B_EntityTreeModel C,
						dbo.fun_GetUserDeviceAuth(@F_UserCode,@F_DeviceTypeID) D
					WHERE B.F_DeviceID IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_FilterID))
						AND A.id = B.F_EntityID
						AND B.F_DeviceID = D.id
						AND B.F_DeviceID = C.F_EntityID
					ORDER BY orderby
				END
			END
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_GetEntityTreeAsynData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_GetEntityTreeAsynData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_GetEntityTreeAsynData]
	@F_PluginCode bigint,
	@F_FunctionCode bigint,
	@F_AppCode varchar(16),
	@F_UserCode bigint,
	@F_HasEnergy bit,
	@F_EnergyTypeID varchar(max),
	@F_HasDevice bit,
	@F_DeviceTypeID varchar(max),
	@F_PId bigint
AS
BEGIN
	DECLARE @F_ConfType VARCHAR(1)
	SELECT @F_ConfType = F_ConfType FROM dbo.tb_A_Plugins WHERE F_PluginCode = @F_PluginCode
	IF @F_ConfType = ''1''
	BEGIN
		IF @F_HasEnergy = 0 AND @F_HasDevice = 0
		BEGIN
			IF @F_PId = 0
			BEGIN
				IF EXISTS(SELECT F_EntityTreeRename FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode)
				BEGIN
					SELECT
						F_EntityTreeNo AS tree,
						F_EntityTreeNo AS id,
						F_EntityTreeRename AS name,
						0 AS pId,
						'''' AS type,
						2 AS flag,
						0 AS av,
						NULL AS tplId,
						NULL AS nTplId,
						'''' AS typeTag,
						0 AS F_EntityDepth,
						''0'' AS F_OrderTag
					FROM dbo.tb_A_PluginToEntityRename
					WHERE F_FunctionCode = @F_FunctionCode
						AND F_PluginCode = @F_PluginCode
				END
				ELSE
				BEGIN
					SELECT
						A.tree,
						A.id,
						A.name,
						0 AS pId,
						A.type,
						2 AS flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
			ELSE
			BEGIN
				SELECT * FROM
				(
					SELECT
						A.tree,
						A.id,
						A.name,
						dbo.fun_GetPluginToEntityRenamePId(@F_FunctionCode,@F_PluginCode,A.tree) AS pId,
						A.type,
						2 AS flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
				) A
				WHERE pId = @F_PId
				ORDER BY F_EntityDepth,F_OrderTag
			END
		END
		ELSE IF @F_HasEnergy = 1 AND @F_HasDevice = 0
		BEGIN
			IF @F_EnergyTypeID = ''''
			BEGIN
				IF @F_PId = 0
				BEGIN
					IF EXISTS(SELECT F_EntityTreeRename FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode)
					BEGIN
						SELECT
							F_EntityTreeNo AS tree,
							F_EntityTreeNo AS id,
							F_EntityTreeRename AS name,
							0 AS pId,
							'''' AS type,
							2 AS flag,
							0 AS av,
							NULL AS tplId,
							NULL AS nTplId,
							'''' AS typeTag,
							0 AS F_EntityDepth,
							''0'' AS F_OrderTag
						FROM dbo.tb_A_PluginToEntityRename
						WHERE F_FunctionCode = @F_FunctionCode
							AND F_PluginCode = @F_PluginCode
					END
					ELSE
					BEGIN
						SELECT
							A.tree,
							A.id,
							A.name,
							0 AS pId,
							A.type,
							2 AS flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						ORDER BY F_EntityDepth,F_OrderTag
					END
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							dbo.fun_GetPluginToEntityRenamePId(@F_FunctionCode,@F_PluginCode,A.tree) AS pId,
							A.type,
							2 AS flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_NodeID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeMetering B,
							dbo.tb_B_EntityTreeModel C
						WHERE A.id = B.F_EntityID
							AND B.F_EndDate IS NULL
							AND B.F_NodeID = C.F_EntityID
					) A
					WHERE pId = @F_PId
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
			ELSE
			BEGIN
				IF @F_PId = 0
				BEGIN
					IF EXISTS(SELECT F_EntityTreeRename FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode)
					BEGIN
						SELECT
							F_EntityTreeNo AS tree,
							F_EntityTreeNo AS id,
							F_EntityTreeRename AS name,
							0 AS pId,
							'''' AS type,
							2 AS flag,
							0 AS av,
							NULL AS tplId,
							NULL AS nTplId,
							'''' AS typeTag,
							0 AS F_EntityDepth,
							''0'' AS F_OrderTag
						FROM dbo.tb_A_PluginToEntityRename
						WHERE F_FunctionCode = @F_FunctionCode
							AND F_PluginCode = @F_PluginCode
					END
					ELSE
					BEGIN
						SELECT
							A.tree,
							A.id,
							A.name,
							0 AS pId,
							A.type,
							2 AS flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						ORDER BY F_EntityDepth,F_OrderTag
					END
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							dbo.fun_GetPluginToEntityRenamePId(@F_FunctionCode,@F_PluginCode,A.tree) AS pId,
							A.type,
							2 AS flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_NodeID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeMetering B,
							dbo.tb_B_EntityTreeModel C,
							dbo.fun_SplitByComma(@F_EnergyTypeID) D
						WHERE A.id = B.F_EntityID
							AND B.F_EndDate IS NULL
							AND B.F_NodeID = C.F_EntityID
							AND dbo.fun_GetNodeEnergyType(B.F_NodeID)  = D.F_ObjectID
					) A
					WHERE pId = @F_PId
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
		END
		ELSE IF @F_HasEnergy = 0 AND @F_HasDevice = 1
		BEGIN
			IF @F_DeviceTypeID = ''''
			BEGIN
				IF @F_PId = 0
				BEGIN
					IF EXISTS(SELECT F_EntityTreeRename FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode)
					BEGIN
						SELECT
							F_EntityTreeNo AS tree,
							F_EntityTreeNo AS id,
							F_EntityTreeRename AS name,
							0 AS pId,
							'''' AS type,
							2 AS flag,
							0 AS av,
							NULL AS tplId,
							NULL AS nTplId,
							'''' AS typeTag,
							0 AS F_EntityDepth,
							''0'' AS F_OrderTag
						FROM dbo.tb_A_PluginToEntityRename
						WHERE F_FunctionCode = @F_FunctionCode
							AND F_PluginCode = @F_PluginCode
					END
					ELSE
					BEGIN
						SELECT
							A.tree,
							A.id,
							A.name,
							0 AS pId,
							A.type,
							2 AS flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						ORDER BY F_EntityDepth,F_OrderTag
					END
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							dbo.fun_GetPluginToEntityRenamePId(@F_FunctionCode,@F_PluginCode,A.tree) AS pId,
							A.type,
							2 AS flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_DeviceID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeToDevice B,
							dbo.tb_B_EntityTreeModel C
						WHERE A.id = B.F_EntityID
							AND B.F_DeviceID = C.F_EntityID
					) A
					WHERE pId = @F_PId
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
			ELSE
			BEGIN
				IF @F_PId = 0
				BEGIN
					IF EXISTS(SELECT F_EntityTreeRename FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode = @F_PluginCode)
					BEGIN
						SELECT
							F_EntityTreeNo AS tree,
							F_EntityTreeNo AS id,
							F_EntityTreeRename AS name,
							0 AS pId,
							'''' AS type,
							2 AS flag,
							0 AS av,
							NULL AS tplId,
							NULL AS nTplId,
							'''' AS typeTag,
							0 AS F_EntityDepth,
							''0'' AS F_OrderTag
						FROM dbo.tb_A_PluginToEntityRename
						WHERE F_FunctionCode = @F_FunctionCode
							AND F_PluginCode = @F_PluginCode
					END
					ELSE
					BEGIN
						SELECT
							A.tree,
							A.id,
							A.name,
							0 AS pId,
							A.type,
							2 AS flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						ORDER BY F_EntityDepth,F_OrderTag
					END
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							0 AS pId,
							A.type,
							2 AS flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_DeviceID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextEntity(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeToDevice B,
							dbo.tb_B_EntityTreeModel C,
							dbo.fun_SplitByComma(@F_DeviceTypeID) D
						WHERE A.id = B.F_EntityID
							AND B.F_DeviceID = C.F_EntityID
							AND dbo.fun_GetNodeDeviceType(B.F_DeviceID) = D.F_ObjectID
					) A
					WHERE pId = @F_PId
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
		END
	END
	ELSE IF @F_ConfType = ''2'' OR @F_ConfType = ''3''
	BEGIN
		IF @F_HasEnergy = 0 AND @F_HasDevice = 0
		BEGIN
			IF @F_PId = 0
			BEGIN
				SELECT * FROM
				(
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						A.flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
				) A
				WHERE pId = 0 OR F_EntityDepth = 2
				ORDER BY F_EntityDepth,F_OrderTag
			END
			ELSE
			BEGIN
				SELECT * FROM
				(
					SELECT
						A.tree,
						A.id,
						A.name,
						A.pId,
						A.type,
						A.flag,
						A.av,
						B.F_TemplateID AS tplId,
						B.F_NodeTemplate AS nTplId,
						dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
						B.F_EntityDepth,
						B.F_OrderTag
					FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
						dbo.tb_B_EntityTreeModel B
					WHERE A.id = B.F_EntityID
				) A
				WHERE pId = @F_PId
				ORDER BY F_EntityDepth,F_OrderTag
			END
		END
		ELSE IF @F_HasEnergy = 1 AND @F_HasDevice = 0
		BEGIN
			IF @F_EnergyTypeID = ''''
			BEGIN
				IF @F_PId = 0
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							A.flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_NodeID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeMetering B,
							dbo.tb_B_EntityTreeModel C
						WHERE A.id = B.F_EntityID
							AND B.F_EndDate IS NULL
							AND B.F_NodeID = C.F_EntityID
					) A
					WHERE pId = 0 OR F_EntityDepth = 2
					ORDER BY F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							A.flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_NodeID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeMetering B,
							dbo.tb_B_EntityTreeModel C
						WHERE A.id = B.F_EntityID
							AND B.F_EndDate IS NULL
							AND B.F_NodeID = C.F_EntityID
					) A
					WHERE pId = @F_PId
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
			ELSE
			BEGIN
				IF @F_PId = 0
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							A.flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_NodeID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeMetering B,
							dbo.tb_B_EntityTreeModel C,
							dbo.fun_SplitByComma(@F_EnergyTypeID) D
						WHERE A.id = B.F_EntityID
							AND B.F_EndDate IS NULL
							AND B.F_NodeID = C.F_EntityID
							AND dbo.fun_GetNodeEnergyType(B.F_NodeID) = D.F_ObjectID
					) A
					WHERE pId = 0 OR F_EntityDepth = 2
					ORDER BY F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							A.flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_NodeID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeMetering B,
							dbo.tb_B_EntityTreeModel C,
							dbo.fun_SplitByComma(@F_EnergyTypeID) D
						WHERE A.id = B.F_EntityID
							AND B.F_EndDate IS NULL
							AND B.F_NodeID = C.F_EntityID
							AND dbo.fun_GetNodeEnergyType(B.F_NodeID) = D.F_ObjectID
					) A
					WHERE pId = @F_PId
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
		END
		ELSE IF @F_HasEnergy = 0 AND @F_HasDevice = 1
		BEGIN
			IF @F_DeviceTypeID = ''''
			BEGIN
				IF @F_PId = 0
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							A.flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_DeviceID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeToDevice B,
							dbo.tb_B_EntityTreeModel C
						WHERE A.id = B.F_EntityID
							AND B.F_DeviceID = C.F_EntityID
					) A
					WHERE pId = 0 OR F_EntityDepth = 2
					ORDER BY F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							A.flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_DeviceID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeToDevice B,
							dbo.tb_B_EntityTreeModel C
						WHERE A.id = B.F_EntityID
							AND B.F_DeviceID = C.F_EntityID
					) A
					WHERE pId = @F_PId
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
			ELSE
			BEGIN
				IF @F_PId = 0
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							A.flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_DeviceID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeToDevice B,
							dbo.tb_B_EntityTreeModel C,
							dbo.fun_GetUserDeviceAuth(@F_UserCode,@F_DeviceTypeID) D
						WHERE A.id = B.F_EntityID
							AND B.F_DeviceID = D.id
							AND B.F_DeviceID = C.F_EntityID
					) A
					WHERE pId = 0 OR F_EntityDepth = 2
					ORDER BY F_EntityDepth,F_OrderTag
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							A.flag,
							A.av,
							B.F_TemplateID AS tplId,
							B.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(B.F_TemplateID) AS typeTag,
							B.F_EntityDepth,
							B.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeModel B
						WHERE A.id = B.F_EntityID
						UNION
						SELECT
							A.tree,
							B.F_DeviceID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_EntityDepth,
							C.F_OrderTag
						FROM dbo.fun_GetPluginContextTree(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeToDevice B,
							dbo.tb_B_EntityTreeModel C,
							dbo.fun_GetUserDeviceAuth(@F_UserCode,@F_DeviceTypeID) D
						WHERE A.id = B.F_EntityID
							AND B.F_DeviceID = D.id
							AND B.F_DeviceID = C.F_EntityID
					) A
					WHERE pId = @F_PId
					ORDER BY F_EntityDepth,F_OrderTag
				END
			END
		END
	END
	ELSE IF @F_ConfType = ''4''
	BEGIN
		IF @F_HasEnergy = 0 AND @F_HasDevice = 0
		BEGIN
			IF @F_PId = 0
			BEGIN
				SELECT
					A.tree,
					A.id,
					A.name,
					A.pId,
					A.type,
					2 AS flag,
					A.av,
					A.tplId,
					A.nTplId,
					A.typeTag
				FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
				WHERE pId = ''0''
				ORDER BY A.orderby
			END
			ELSE
			BEGIN
				SELECT
					A.tree,
					A.id,
					A.name,
					A.pId,
					A.type,
					2 AS flag,
					A.av,
					A.tplId,
					A.nTplId,
					A.typeTag
				FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
				WHERE pId = @F_PId
				ORDER BY A.orderby
			END
		END
		ELSE IF @F_HasEnergy = 1 AND @F_HasDevice = 0
		BEGIN
			IF @F_EnergyTypeID = ''''
			BEGIN
				IF @F_PId = 0
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							2 AS flag,
							A.av,
							A.tplId,
							A.nTplId,
							A.typeTag,
							A.orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
						UNION
						SELECT
							A.tree,
							B.F_NodeID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_OrderTag AS orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeMetering B,
							dbo.tb_B_EntityTreeModel C
						WHERE A.id = B.F_EntityID
							AND B.F_EndDate IS NULL
							AND B.F_NodeID = C.F_EntityID
					) A
					WHERE pId = ''0''
					ORDER BY orderby
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							2 AS flag,
							A.av,
							A.tplId,
							A.nTplId,
							A.typeTag,
							A.orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
						UNION
						SELECT
							A.tree,
							B.F_NodeID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_OrderTag AS orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeMetering B,
							dbo.tb_B_EntityTreeModel C
						WHERE A.id = B.F_EntityID
							AND B.F_EndDate IS NULL
							AND B.F_NodeID = C.F_EntityID
					) A
					WHERE pId = @F_PId
					ORDER BY orderby
				END
			END
			ELSE
			BEGIN
				IF @F_PId = 0
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							2 AS flag,
							A.av,
							A.tplId,
							A.nTplId,
							A.typeTag,
							A.orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
						UNION
						SELECT
							A.tree,
							B.F_NodeID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_OrderTag AS orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeMetering B,
							dbo.tb_B_EntityTreeModel C,
							dbo.fun_SplitByComma(@F_EnergyTypeID) D
						WHERE A.id = B.F_EntityID
							AND B.F_EndDate IS NULL
							AND B.F_NodeID = C.F_EntityID
							AND dbo.fun_GetNodeEnergyType(B.F_NodeID) = D.F_ObjectID
					) A
					WHERE pId = ''0''
					ORDER BY orderby
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							2 AS flag,
							A.av,
							A.tplId,
							A.nTplId,
							A.typeTag,
							A.orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
						UNION
						SELECT
							A.tree,
							B.F_NodeID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_OrderTag AS orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeMetering B,
							dbo.tb_B_EntityTreeModel C,
							dbo.fun_SplitByComma(@F_EnergyTypeID) D
						WHERE A.id = B.F_EntityID
							AND B.F_EndDate IS NULL
							AND B.F_NodeID = C.F_EntityID
							AND dbo.fun_GetNodeEnergyType(B.F_NodeID) = D.F_ObjectID
					) A
					WHERE pId = @F_PId
					ORDER BY orderby
				END
			END
		END
		ELSE IF @F_HasEnergy = 0 AND @F_HasDevice = 1
		BEGIN
			IF @F_DeviceTypeID = ''''
			BEGIN
				IF @F_PId = 0
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							2 AS flag,
							A.av,
							A.tplId,
							A.nTplId,
							A.typeTag,
							A.orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
						UNION
						SELECT
							A.tree,
							B.F_DeviceID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_OrderTag AS orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeToDevice B,
							dbo.tb_B_EntityTreeModel C
						WHERE A.id = B.F_EntityID
							AND B.F_DeviceID = C.F_EntityID
					) A
					WHERE pId = ''0''
					ORDER BY orderby
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							2 AS flag,
							A.av,
							A.tplId,
							A.nTplId,
							A.typeTag,
							A.orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
						UNION
						SELECT
							A.tree,
							B.F_DeviceID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_OrderTag AS orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeToDevice B,
							dbo.tb_B_EntityTreeModel C
						WHERE A.id = B.F_EntityID
							AND B.F_DeviceID = C.F_EntityID
					) A
					WHERE pId = @F_PId
					ORDER BY orderby
				END
			END
			ELSE
			BEGIN
				IF @F_PId = 0
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							2 AS flag,
							A.av,
							A.tplId,
							A.nTplId,
							A.typeTag,
							A.orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
						UNION
						SELECT
							A.tree,
							B.F_DeviceID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_OrderTag AS orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeToDevice B,
							dbo.tb_B_EntityTreeModel C,
							dbo.fun_GetUserDeviceAuth(@F_UserCode,@F_DeviceTypeID) D
						WHERE A.id = B.F_EntityID
							AND B.F_DeviceID = D.id
							AND B.F_DeviceID = C.F_EntityID
					) A
					WHERE pId = ''0''
					ORDER BY orderby
				END
				ELSE
				BEGIN
					SELECT * FROM
					(
						SELECT
							A.tree,
							A.id,
							A.name,
							A.pId,
							A.type,
							2 AS flag,
							A.av,
							A.tplId,
							A.nTplId,
							A.typeTag,
							A.orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A
						UNION
						SELECT
							A.tree,
							B.F_DeviceID AS id,
							C.F_EntityName AS name,
							A.id AS pId,
							C.F_ObjectGroup AS type,
							2 AS flag,
							dbo.fun_GetNodeAorVType(C.F_EntityID) AS av,
							C.F_TemplateID AS tplId,
							C.F_NodeTemplate AS nTplId,
							dbo.fun_GetDictTemplateTag(C.F_TemplateID) AS typeTag,
							C.F_OrderTag AS orderby
						FROM dbo.fun_GetPluginContextCustom(@F_FunctionCode,@F_AppCode,@F_UserCode) A,
							dbo.tb_B_EntityTreeToDevice B,
							dbo.tb_B_EntityTreeModel C,
							dbo.fun_GetUserDeviceAuth(@F_UserCode,@F_DeviceTypeID) D
						WHERE A.id = B.F_EntityID
							AND B.F_DeviceID = D.id
							AND B.F_DeviceID = C.F_EntityID
					) A
					WHERE pId = @F_PId
					ORDER BY orderby
				END
			END
		END
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetDictTag]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetDictTag]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetDictTag] (@F_GroupID bigint)
RETURNS varchar(256) 
BEGIN
	DECLARE @Name varchar(128)
	SELECT @Name = F_GroupTag FROM dbo.tb_B_DictTreeModel WHERE F_GroupID = @F_GroupID
	RETURN @Name
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetDictName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetDictName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetDictName] (@F_GroupID bigint)
RETURNS varchar(256) 
BEGIN
	DECLARE @Name varchar(128)
	SELECT @Name = F_GroupName FROM dbo.tb_B_DictTreeModel WHERE F_GroupID = @F_GroupID
	RETURN ISNULL(@Name,'''')
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetMultiDeviceData]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetMultiDeviceData]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetMultiDeviceData]
	@F_EntityStr varchar(max),
	@F_DeviceTypeID varchar(max),
	@F_IsHasChild bit,
	@F_IsHasEntity bit
AS
BEGIN
	IF @F_EntityStr IS NOT NULL AND @F_DeviceTypeID IS NOT NULL
	BEGIN
		IF @F_IsHasChild = 0
		BEGIN
			IF @F_IsHasEntity = 1
			BEGIN
				SELECT 
					dbo.fun_GetNodeDeviceType(A.code) AS type_id,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.code)) AS type_name,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.code)) AS type_tag,
					dbo.fun_GetNodeTemplate(A.code) AS tpl_id,
					A.code,
					dbo.fun_GetEntityName(A.code) AS name,
					A.entity_str 
				FROM (
					SELECT 
						A.F_DeviceID AS code,
						STUFF((
							SELECT 
								'','' + CAST(F_EntityID AS VARCHAR) 
							FROM  dbo.view_EntityUnionToDevice
							WHERE F_DeviceID = A.F_DeviceID  
							FOR XML PATH('''')
						),1,1,'''') AS entity_str 
					FROM dbo.view_EntityUnionToDevice A,
						dbo.fun_SplitByComma(@F_EntityStr) B,
						dbo.fun_SplitByComma(@F_DeviceTypeID) C
					WHERE A.F_EntityID = B.F_ObjectID 
						AND dbo.fun_GetNodeDeviceType(A.F_DeviceID) = C.F_ObjectID
					GROUP BY A.F_DeviceID
				) A
				ORDER BY dbo.fun_GetEntityOrderTag(A.code)
			END
			ELSE
			BEGIN
				SELECT 
					dbo.fun_GetNodeDeviceType(A.code) AS type_id,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.code)) AS type_name,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.code)) AS type_tag,
					dbo.fun_GetNodeTemplate(A.code) AS tpl_id,
					A.code,
					dbo.fun_GetEntityName(A.code) AS name
				FROM (
					SELECT 
						A.F_DeviceID AS code
					FROM dbo.view_EntityUnionToDevice A,
						dbo.fun_SplitByComma(@F_EntityStr) B,
						dbo.fun_SplitByComma(@F_DeviceTypeID) C
					WHERE A.F_EntityID = B.F_ObjectID 
						AND dbo.fun_GetNodeDeviceType(A.F_DeviceID) = C.F_ObjectID
					GROUP BY A.F_DeviceID
				) A
				ORDER BY dbo.fun_GetEntityOrderTag(A.code)
			END
		END
		ELSE
		BEGIN
			IF @F_IsHasEntity = 1
			BEGIN
				SELECT 
					dbo.fun_GetNodeDeviceType(A.code) AS type_id,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.code)) AS type_name,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.code)) AS type_tag,
					dbo.fun_GetNodeTemplate(A.code) AS tpl_id,
					A.code,
					dbo.fun_GetEntityName(A.code) AS name,
					A.entity_str 
				FROM (
					SELECT 
						A.F_DeviceID AS code,
						STUFF((
							SELECT 
								'','' + CAST(F_EntityID AS VARCHAR) 
							FROM dbo.view_EntityUnionToDevice 
							WHERE F_DeviceID = a.F_DeviceID
							FOR XML PATH('''')
						),1,1,'''') AS entity_str 
					FROM dbo.view_EntityUnionToDevice A,
						dbo.fun_GetChildNodeByParents(@F_EntityStr) B,
						dbo.fun_SplitByComma(@F_DeviceTypeID) C
					WHERE A.F_EntityID = B.id
						AND dbo.fun_GetNodeDeviceType(A.F_DeviceID) = C.F_ObjectID
					GROUP BY F_DeviceID
				) A
				ORDER BY dbo.fun_GetEntityOrderTag(A.code)
			END
			ELSE
			BEGIN
				SELECT 
					dbo.fun_GetNodeDeviceType(A.code) AS type_id,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.code)) AS type_name,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.code)) AS type_tag,
					dbo.fun_GetNodeTemplate(A.code) AS tpl_id,
					A.code,
					dbo.fun_GetEntityName(A.code) AS name
				FROM (
					SELECT 
						A.F_DeviceID AS code
					FROM dbo.view_EntityUnionToDevice A,
						dbo.fun_GetChildNodeByParents(@F_EntityStr) B,
						dbo.fun_SplitByComma(@F_DeviceTypeID) C
					WHERE A.F_EntityID = B.id
						AND dbo.fun_GetNodeDeviceType(A.F_DeviceID) = C.F_ObjectID
					GROUP BY F_DeviceID
				) A
				ORDER BY dbo.fun_GetEntityOrderTag(A.code)
			END
		END
	END
	ELSE IF @F_EntityStr IS NOT NULL AND @F_DeviceTypeID IS NULL
	BEGIN
		IF @F_IsHasChild = 0
		BEGIN
			IF @F_IsHasEntity = 1
			BEGIN
				SELECT 
					dbo.fun_GetNodeDeviceType(A.code) AS type_id,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.code)) AS type_name,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.code)) AS type_tag,
					dbo.fun_GetNodeTemplate(A.code) AS tpl_id,
					A.code,
					dbo.fun_GetEntityName(A.code) AS name,
					A.entity_str 
				FROM (
					SELECT 
						A.F_DeviceID AS code,
						STUFF((
							SELECT 
								'','' + CAST(F_EntityID AS VARCHAR) 
							FROM dbo.view_EntityUnionToDevice 
							WHERE F_DeviceID = a.F_DeviceID 
							FOR XML PATH('''')
						),1,1,'''') AS entity_str 
					FROM dbo.view_EntityUnionToDevice A,
						dbo.fun_SplitByComma(@F_EntityStr) B 
					WHERE A.F_EntityID = B.F_ObjectID 
					GROUP BY A.F_DeviceID
				) A
				ORDER BY dbo.fun_GetEntityOrderTag(A.code)
			END
			ELSE
			BEGIN
				SELECT 
					dbo.fun_GetNodeDeviceType(A.code) AS type_id,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.code)) AS type_name,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.code)) AS type_tag,
					dbo.fun_GetNodeTemplate(A.code) AS tpl_id,
					A.code,
					dbo.fun_GetEntityName(A.code) AS name 
				FROM (
					SELECT 
						A.F_DeviceID AS code
					FROM dbo.view_EntityUnionToDevice A,
						dbo.fun_SplitByComma(@F_EntityStr) B 
					WHERE A.F_EntityID = B.F_ObjectID 
					GROUP BY A.F_DeviceID
				) A
				ORDER BY dbo.fun_GetEntityOrderTag(A.code)
			END
		END
		ELSE
		BEGIN
			IF @F_IsHasEntity = 1
			BEGIN
				SELECT 
					dbo.fun_GetNodeDeviceType(A.code) AS type_id,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.code)) AS type_name,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.code)) AS type_tag,
					dbo.fun_GetNodeTemplate(A.code) AS tpl_id,
					A.code,
					dbo.fun_GetEntityName(A.code) AS name,
					A.entity_str 
				FROM (
					SELECT 
						A.F_DeviceID AS code,
						STUFF((
							SELECT 
								'','' + CAST(F_EntityID AS VARCHAR) 
							FROM dbo.view_EntityUnionToDevice 
							WHERE F_DeviceID = a.F_DeviceID 
							FOR XML PATH('''')
						),1,1,'''') AS entity_str 
					FROM dbo.view_EntityUnionToDevice A,
						dbo.fun_GetChildNodeByParents(@F_EntityStr) B 
					WHERE A.F_EntityID = B.id 
					GROUP BY F_DeviceID
				) A
				ORDER BY dbo.fun_GetEntityOrderTag(A.code)
			END
			ELSE
			BEGIN
				SELECT 
					dbo.fun_GetNodeDeviceType(A.code) AS type_id,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.code)) AS type_name,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.code)) AS type_tag,
					dbo.fun_GetNodeTemplate(A.code) AS tpl_id,
					A.code,
					dbo.fun_GetEntityName(A.code) AS name
				FROM (
					SELECT 
						A.F_DeviceID AS code
					FROM dbo.view_EntityUnionToDevice A,
						dbo.fun_GetChildNodeByParents(@F_EntityStr) B 
					WHERE A.F_EntityID = B.id 
					GROUP BY F_DeviceID
				) A
				ORDER BY dbo.fun_GetEntityOrderTag(A.code)
			END
		END
	END
	ELSE IF @F_EntityStr IS NULL AND @F_DeviceTypeID IS NOT NULL
	BEGIN
		IF @F_IsHasEntity = 1
		BEGIN
			SELECT 
				dbo.fun_GetNodeDeviceType(A.code) as type_id,
				dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.code)) AS type_name,
				dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.code)) AS type_tag,
				dbo.fun_GetNodeTemplate(A.code) AS tpl_id,
				A.code,
				dbo.fun_GetEntityName(A.code) AS name,
				A.entity_str 
			FROM (
				SELECT A.F_DeviceID AS code,
				STUFF((
					SELECT 
						'','' + CAST(F_EntityID AS VARCHAR) 
					FROM dbo.view_EntityUnionToDevice 
					WHERE F_DeviceID = A.F_DeviceID 
					FOR XML PATH('''')
				),1,1,'''') AS entity_str 
				FROM dbo.view_EntityUnionToDevice A ,
					dbo.fun_SplitByComma(@F_DeviceTypeID) B
				WHERE dbo.fun_GetNodeDeviceType(A.F_DeviceID) = B.F_ObjectID
				GROUP BY A.F_DeviceID
			) A
			ORDER BY dbo.fun_GetEntityOrderTag(A.code)
		END
		ELSE
		BEGIN
			SELECT 
				dbo.fun_GetNodeDeviceType(A.code) as type_id,
				dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.code)) AS type_name,
				dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.code)) AS type_tag,
				dbo.fun_GetNodeTemplate(A.code) AS tpl_id,
				A.code,
				dbo.fun_GetEntityName(A.code) AS name
			FROM (
				SELECT A.F_DeviceID AS code
				FROM dbo.view_EntityUnionToDevice A ,
					dbo.fun_SplitByComma(@F_DeviceTypeID) B
				WHERE dbo.fun_GetNodeDeviceType(A.F_DeviceID) = B.F_ObjectID
				GROUP BY A.F_DeviceID
			) A
			ORDER BY dbo.fun_GetEntityOrderTag(A.code)
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_API_GetEntityRelationInfo]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_API_GetEntityRelationInfo]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_API_GetEntityRelationInfo]
	@F_EntityID varchar(max),
	@F_DeviceTypeID bigint,
	@F_FilterTag varchar(32),
	@F_FilterValue varchar(32),
	@F_IsHasChild bit
AS
BEGIN
	IF @F_DeviceTypeID IS NULL
	BEGIN
		IF @F_FilterTag <> ''''
		BEGIN
			IF @F_FilterValue <> ''''
			BEGIN
				IF @F_IsHasChild = 0
				BEGIN
					SELECT
						T.F_ObjectID AS F_EntityID,
						dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName, 
						A.F_DeviceID AS F_NodeID,
						dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
						dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
						dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
						dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName 
					FROM dbo.fun_SplitByComma(@F_EntityID) T
						LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A 
							ON T.F_ObjectID = A.F_EntityID AND dbo.fun_GetEntityPropertyValue(A.F_DeviceID,@F_FilterTag) = @F_FilterValue
					ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
				END
				ELSE IF @F_IsHasChild = 1
				BEGIN
					SELECT
						T.F_ObjectID AS F_EntityID,
						dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName, 
						dbo.fun_GetNodeToEntityID(A.F_DeviceID) AS F_ToEntityID,
						dbo.fun_GetEntityPathName(dbo.fun_GetNodeToEntityID(A.F_DeviceID)) AS F_ToEntityName, 
						A.F_DeviceID AS F_NodeID,
						dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
						dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
						dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
						dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName 
					FROM dbo.fun_SplitByComma(@F_EntityID) T,
						dbo.fun_GetChildNodeByParents(@F_EntityID) B
						LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A 
							ON B.id = A.F_EntityID AND dbo.fun_GetEntityPropertyValue(A.F_DeviceID,@F_FilterTag) = @F_FilterValue
					ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
				END
			END
			ELSE
			BEGIN
				IF @F_IsHasChild = 0
				BEGIN
					SELECT
						T.F_ObjectID AS F_EntityID,
						dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName,  
						A.F_DeviceID AS F_NodeID,
						dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
						dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
						dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
						dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName,
						dbo.fun_GetEntityPropertyValue(A.F_DeviceID,@F_FilterTag) AS F_TagValue
					FROM dbo.fun_SplitByComma(@F_EntityID) T
						LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A
							ON T.F_ObjectID = A.F_EntityID
					ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
				END
				ELSE IF @F_IsHasChild = 1
				BEGIN
					SELECT
						T.F_ObjectID AS F_EntityID,
						dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName,  
						dbo.fun_GetNodeToEntityID(A.F_DeviceID) AS F_ToEntityID,
						dbo.fun_GetEntityPathName(dbo.fun_GetNodeToEntityID(A.F_DeviceID)) AS F_ToEntityName, 
						A.F_DeviceID AS F_NodeID,
						dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
						dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
						dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
						dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName,
						dbo.fun_GetEntityPropertyValue(A.F_DeviceID,@F_FilterTag) AS F_TagValue
					FROM dbo.fun_SplitByComma(@F_EntityID) T,
						dbo.fun_GetChildNodeByParents(@F_EntityID) B
						LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A
							ON B.id = A.F_EntityID
					ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
				END
			END
		END
		ELSE
		BEGIN
			IF @F_IsHasChild = 0
			BEGIN
				SELECT
					T.F_ObjectID AS F_EntityID,
					dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName,  
					A.F_DeviceID AS F_NodeID,
					dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
					dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName 
				FROM dbo.fun_SplitByComma(@F_EntityID) T
					LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A
						ON T.F_ObjectID = A.F_EntityID
				ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
			END
			ELSE IF @F_IsHasChild = 1
			BEGIN
				SELECT
					T.F_ObjectID AS F_EntityID,
					dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName,  
					dbo.fun_GetNodeToEntityID(A.F_DeviceID) AS F_ToEntityID,
					dbo.fun_GetEntityPathName(dbo.fun_GetNodeToEntityID(A.F_DeviceID)) AS F_ToEntityName, 
					A.F_DeviceID AS F_NodeID,
					dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
					dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName 
				FROM dbo.fun_SplitByComma(@F_EntityID) T,
					dbo.fun_GetChildNodeByParents(@F_EntityID) B
					LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A
						ON B.id = A.F_EntityID
				ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
			END
		END
	END
	ELSE
	BEGIN
		IF @F_FilterTag <> ''''
		BEGIN
			IF @F_FilterValue <> ''''
			BEGIN
				IF @F_IsHasChild = 0
				BEGIN
					SELECT
						T.F_ObjectID AS F_EntityID,
						dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName,  
						A.F_DeviceID AS F_NodeID,
						dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
						dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
						dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
						dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName 
					FROM dbo.fun_SplitByComma(@F_EntityID) T
						LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A
							ON T.F_ObjectID = A.F_EntityID 
							AND dbo.fun_GetNodeDeviceType(A.F_DeviceID) = @F_DeviceTypeID
							AND dbo.fun_GetEntityPropertyValue(A.F_DeviceID,@F_FilterTag) = @F_FilterValue
					WHERE A.F_DeviceID IS NOT NULL
					ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
				END
				ELSE IF @F_IsHasChild = 1
				BEGIN
					SELECT
						T.F_ObjectID AS F_EntityID,
						dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName, 
						dbo.fun_GetNodeToEntityID(A.F_DeviceID) AS F_ToEntityID,
						dbo.fun_GetEntityPathName(dbo.fun_GetNodeToEntityID(A.F_DeviceID)) AS F_ToEntityName, 
						A.F_DeviceID AS F_NodeID,
						dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
						dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
						dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
						dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName 
					FROM dbo.fun_SplitByComma(@F_EntityID) T,
						dbo.fun_GetChildNodeByParents(@F_EntityID) B
						LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A
							ON B.id = A.F_EntityID 
							AND dbo.fun_GetNodeDeviceType(A.F_DeviceID) = @F_DeviceTypeID
							AND dbo.fun_GetEntityPropertyValue(A.F_DeviceID,@F_FilterTag) = @F_FilterValue
					WHERE A.F_DeviceID IS NOT NULL
					ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
				END
			END
			ELSE
			BEGIN
				IF @F_IsHasChild = 0
				BEGIN
					SELECT
						T.F_ObjectID AS F_EntityID,
						dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName, 
						A.F_DeviceID AS F_NodeID,
						dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
						dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
						dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
						dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName ,
						dbo.fun_GetEntityPropertyValue(A.F_DeviceID,@F_FilterTag) AS F_TagValue
					FROM dbo.fun_SplitByComma(@F_EntityID) T
						LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A
							ON T.F_ObjectID = A.F_EntityID
							AND dbo.fun_GetNodeDeviceType(A.F_DeviceID) = @F_DeviceTypeID
					WHERE A.F_DeviceID IS NOT NULL
					ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
				END
				ELSE IF @F_IsHasChild = 1
				BEGIN
					SELECT
						T.F_ObjectID AS F_EntityID,
						dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName, 
						dbo.fun_GetNodeToEntityID(A.F_DeviceID) AS F_ToEntityID,
						dbo.fun_GetEntityPathName(dbo.fun_GetNodeToEntityID(A.F_DeviceID)) AS F_ToEntityName, 
						A.F_DeviceID AS F_NodeID,
						dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
						dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
						dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
						dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName ,
						dbo.fun_GetEntityPropertyValue(A.F_DeviceID,@F_FilterTag) AS F_TagValue
					FROM dbo.fun_SplitByComma(@F_EntityID) T,
						dbo.fun_GetChildNodeByParents(@F_EntityID) B
						LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A
							ON B.id = A.F_EntityID
							AND dbo.fun_GetNodeDeviceType(A.F_DeviceID) = @F_DeviceTypeID
					WHERE A.F_DeviceID IS NOT NULL
					ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
				END
			END
		END
		ELSE
		BEGIN
			IF @F_IsHasChild = 0
			BEGIN
				SELECT
					T.F_ObjectID AS F_EntityID,
					dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName, 
					A.F_DeviceID AS F_NodeID,
					dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
					dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName 
				FROM dbo.fun_SplitByComma(@F_EntityID) T
					LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A
						ON T.F_ObjectID = A.F_EntityID
						AND dbo.fun_GetNodeDeviceType(A.F_DeviceID) = @F_DeviceTypeID
				WHERE A.F_DeviceID IS NOT NULL
				ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
			END
			ELSE IF @F_IsHasChild = 1
			BEGIN
				SELECT
					T.F_ObjectID AS F_EntityID,
					dbo.fun_GetEntityPathName(T.F_ObjectID) AS F_EntityName, 
					dbo.fun_GetNodeToEntityID(A.F_DeviceID) AS F_ToEntityID,
					dbo.fun_GetEntityPathName(dbo.fun_GetNodeToEntityID(A.F_DeviceID)) AS F_ToEntityName, 
					A.F_DeviceID AS F_NodeID,
					dbo.fun_GetEntityName(A.F_DeviceID) AS F_NodeName,
					dbo.fun_GetEntityPathName(A.F_DeviceID) AS F_NodeFullName,
					dbo.fun_GetDictTag(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeTag,
					dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_DeviceID)) AS F_NodeTypeName 
				FROM dbo.fun_SplitByComma(@F_EntityID) T,
					dbo.fun_GetChildNodeByParents(@F_EntityID) B
					LEFT OUTER JOIN dbo.tb_B_EntityTreeToDevice A
						ON B.id = A.F_EntityID
						AND dbo.fun_GetNodeDeviceType(A.F_DeviceID) = @F_DeviceTypeID
				WHERE A.F_DeviceID IS NOT NULL
				ORDER BY dbo.fun_GetEntityOrderTag(A.F_EntityID),dbo.fun_GetEntityOrderTag(A.F_DeviceID)
			END
		END
		
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetNetNodeList]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetNetNodeList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetNetNodeList]
	@Type varchar(16),
	@Code varchar(16),
	@Keyword varchar(32)
AS
BEGIN
	IF @Type = ''router''
	BEGIN
		IF @Keyword = ''''
			SELECT 
				ROW_NUMBER()OVER(ORDER BY A.F_NodeNo) AS F_RowNum,
				A.F_NodeCode,
				A.F_NodeName,
				A.F_NodeNo,
				dbo.fun_GetEntityName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
				dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
				A.F_IsVisible,
				A.F_IsStorage,
				C.F_TemplateCode,
				C.F_TemplateName
			FROM dbo.tb_A_IoTApp B,
				dbo.tb_A_Template C,
				dbo.tb_A_IoTNode A
			WHERE B.F_RouterCode = @Code
				AND C.F_AppCode = B.F_AppCode
				AND A.F_TemplateCode = C.F_TemplateCode
		ELSE
			SELECT 
				ROW_NUMBER()OVER(ORDER BY A.F_NodeNo) AS F_RowNum,
				A.F_NodeCode,
				A.F_NodeName,
				A.F_NodeNo,
				dbo.fun_GetEntityName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
				dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
				A.F_IsVisible,
				A.F_IsStorage,
				C.F_TemplateCode,
				C.F_TemplateName
			FROM dbo.tb_A_IoTApp B,
				dbo.tb_A_Template C,
				dbo.tb_A_IoTNode A
			WHERE B.F_RouterCode = @Code
				AND C.F_AppCode = B.F_AppCode
				AND A.F_TemplateCode = C.F_TemplateCode
				AND (A.F_NodeName LIKE ''%'' + @Keyword + ''%'' OR A.F_NodeNo LIKE ''%'' + @Keyword + ''%'')
	END
	ELSE IF @Type = ''app''
	BEGIN
		IF @Keyword = ''''
			SELECT 
				ROW_NUMBER()OVER(ORDER BY A.F_NodeName) AS F_RowNum,
				A.F_NodeCode,
				A.F_NodeName,
				A.F_NodeNo,
				dbo.fun_GetNodeEnergyType(A.F_NodeCode) AS F_EnergyTypeID,
				dbo.fun_GetEntityName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
				dbo.fun_GetNodeDeviceType(A.F_NodeCode) AS F_DeviceTypeID,
				dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
				A.F_IsVisible,
				A.F_IsStorage,
				C.F_TemplateCode,
				C.F_TemplateName
			FROM dbo.tb_A_Template C,
				dbo.tb_A_IoTNode A
			WHERE C.F_AppCode = @Code
				AND A.F_TemplateCode = C.F_TemplateCode
			ORDER BY A.F_NodeName
		ELSE
			SELECT 
				ROW_NUMBER()OVER(ORDER BY A.F_NodeName) AS F_RowNum,
				A.F_NodeCode,
				A.F_NodeName,
				A.F_NodeNo,
				dbo.fun_GetNodeEnergyType(A.F_NodeCode) AS F_EnergyTypeID,
				dbo.fun_GetEntityName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
				dbo.fun_GetNodeDeviceType(A.F_NodeCode) AS F_DeviceTypeID,
				dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
				A.F_IsVisible,
				A.F_IsStorage,
				C.F_TemplateCode,
				C.F_TemplateName
			FROM dbo.tb_A_Template C,
				dbo.tb_A_IoTNode A
			WHERE C.F_AppCode = @Code
				AND A.F_TemplateCode = C.F_TemplateCode
				AND (A.F_NodeName LIKE ''%'' + @Keyword + ''%'' OR A.F_NodeNo LIKE ''%'' + @Keyword + ''%'')
			ORDER BY A.F_NodeName
	END
	ELSE IF @Type = ''tpl''
	BEGIN
		IF @Keyword = ''''
			SELECT 
				ROW_NUMBER()OVER(ORDER BY A.F_NodeName) AS F_RowNum,
				A.F_NodeCode,
				A.F_NodeName,
				A.F_NodeNo,
				dbo.fun_GetNodeEnergyType(A.F_NodeCode) AS F_EnergyTypeID,
				dbo.fun_GetEntityName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
				dbo.fun_GetNodeDeviceType(A.F_NodeCode) AS F_DeviceTypeID,
				dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
				A.F_IsVisible,
				A.F_IsStorage,
				C.F_TemplateCode,
				C.F_TemplateName
			FROM dbo.tb_A_Template C,
				dbo.tb_A_IoTNode A
			WHERE C.F_TemplateCode = @Code
				AND A.F_TemplateCode = C.F_TemplateCode
			ORDER BY A.F_NodeName
		ELSE
			SELECT 
				ROW_NUMBER()OVER(ORDER BY A.F_NodeName) AS F_RowNum,
				A.F_NodeCode,
				A.F_NodeName,
				A.F_NodeNo,
				dbo.fun_GetNodeEnergyType(A.F_NodeCode) AS F_EnergyTypeID,
				dbo.fun_GetEntityName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
				dbo.fun_GetNodeDeviceType(A.F_NodeCode) AS F_DeviceTypeID,
				dbo.fun_GetDictName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
				A.F_IsVisible,
				A.F_IsStorage,
				C.F_TemplateCode,
				C.F_TemplateName
			FROM dbo.tb_A_Template C,
				dbo.tb_A_IoTNode A
			WHERE C.F_TemplateCode = @Code
				AND A.F_TemplateCode = C.F_TemplateCode
				AND (A.F_NodeName LIKE ''%'' + @Keyword + ''%'' OR A.F_NodeNo LIKE ''%'' + @Keyword + ''%'')
			ORDER BY A.F_NodeName
	END
	ELSE IF @Type = ''node''
	BEGIN
		SELECT
			B.F_ValueCode,
			B.F_ValueName,
			B.F_ValueLabel,
			B.F_ValueType,
			B.F_ValueProperty,
			B.F_DataType,
			B.F_CommCycle,
			B.F_Unit,
			B.F_ReadWrite,
			C.F_DeviationValue
		FROM dbo.tb_A_IoTNode A,
			dbo.tb_A_Value B
			LEFT OUTER JOIN dbo.tb_A_DeviationValue C ON C.F_NodeCode = @Code AND C.F_ValueLabel = B.F_ValueLabel
		WHERE A.F_NodeCode = @Code
			AND A.F_TemplateCode = B.F_TemplateCode
		ORDER BY B.F_OrderNum
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetDictionaryName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetDictionaryName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetDictionaryName] (
	@F_DictionaryType char(1),
	@F_DictionaryID bigint
) RETURNS varchar(32) 
BEGIN
	DECLARE @F_DictionaryName varchar(32)
	IF @F_DictionaryType IS NULL OR @F_DictionaryType = '''' SET @F_DictionaryName = ''''
	ELSE IF @F_DictionaryType = ''1'' SELECT @F_DictionaryName = F_DictionaryName FROM dbo.tb_B_KeyValueTable WHERE F_DictionaryID = @F_DictionaryID
	ELSE SELECT @F_DictionaryName = F_GroupName FROM dbo.tb_B_DictTreeModel WHERE F_GroupID = @F_DictionaryID
	RETURN @F_DictionaryName
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetDictFullName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetDictFullName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetDictFullName] (@F_GroupID bigint,@F_HasRoot bit)
RETURNS varchar(256) 
BEGIN
	DECLARE @FullName varchar(256)
	DECLARE @Name varchar(32)
	DECLARE @ParentID bigint
	SET @FullName = '' ''

	SELECT @ParentID = F_ParentID, @Name = F_GroupName FROM dbo.tb_B_DictTreeModel WHERE F_GroupID = @F_GroupID
	WHILE @ParentID <> 0
	BEGIN
		SET @FullName = STUFF(@FullName,1,0,''-'' + @Name)
		SELECT @ParentID = F_ParentID, @Name = F_GroupName FROM dbo.tb_B_DictTreeModel WHERE F_GroupID = @ParentID
	END
	IF @F_HasRoot = 1 SET @FullName = STUFF(@FullName,1,0,@Name)
	ELSE SET @FullName = STUFF(@FullName,1,1,'''')
	RETURN rtrim(@FullName)
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetDeviceTypeName]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetDeviceTypeName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetDeviceTypeName] (
	@F_EntityID bigint
) RETURNS varchar(32) 
BEGIN
	DECLARE @F_TypeName varchar(32)
	SELECT @F_TypeName = F_GroupName FROM dbo.tb_B_DictTreeModel WHERE F_GroupID = @F_EntityID
	RETURN @F_TypeName
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetIotNodeList]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetIotNodeList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetIotNodeList]
	@F_AppCode varchar(16),
	@F_EnergyTypeID varchar(16),
	@F_DeviceTypeID varchar(16),
	@Keyword varchar(32)
AS
BEGIN
	IF @F_AppCode = ''''
	BEGIN
		IF @F_DeviceTypeID = ''''
		BEGIN
			IF @F_EnergyTypeID = ''''
			BEGIN
				SELECT 
					ROW_NUMBER()OVER(ORDER BY B.F_AppCode,A.F_NodeNo) AS F_RowNum,
					A.F_NodeCode,
					A.F_NodeName,
					A.F_NodeNo,
					B.F_AppName,
					dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
					dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
					A.F_IsVisible,
					A.F_IsStorage,
					C.F_TemplateCode,
					C.F_TemplateName,
					A.F_Location
				FROM dbo.tb_A_IoTApp B,
					dbo.tb_A_Template C,
					dbo.tb_A_IoTNode A
				WHERE A.F_TemplateCode = C.F_TemplateCode
					AND A.F_AppCode = B.F_AppCode
					AND A.F_NodeName LIKE ''%'' + @Keyword + ''%''
			END
			ELSE
			BEGIN
				SELECT 
					ROW_NUMBER()OVER(ORDER BY B.F_AppCode,A.F_NodeNo) AS F_RowNum,
					A.F_NodeCode,
					A.F_NodeName,
					A.F_NodeNo,
					B.F_AppName,
					dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
					dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
					A.F_IsVisible,
					A.F_IsStorage,
					C.F_TemplateCode,
					C.F_TemplateName,
					A.F_Location
				FROM dbo.tb_A_IoTApp B,
					dbo.tb_A_Template C,
					dbo.tb_A_IoTNode A
				WHERE dbo.fun_GetNodeEnergyType(A.F_NodeCode) = @F_EnergyTypeID
					AND A.F_TemplateCode = C.F_TemplateCode
					AND A.F_AppCode = B.F_AppCode
					AND A.F_NodeName LIKE ''%'' + @Keyword + ''%''
			END
		END
		ELSE
		BEGIN
			IF @F_EnergyTypeID = ''''
			BEGIN
				SELECT 
					ROW_NUMBER()OVER(ORDER BY B.F_AppCode,A.F_NodeNo) AS F_RowNum,
					A.F_NodeCode,
					A.F_NodeName,
					A.F_NodeNo,
					B.F_AppName,
					dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
					dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
					A.F_IsVisible,
					A.F_IsStorage,
					C.F_TemplateCode,
					C.F_TemplateName,
					A.F_Location
				FROM dbo.tb_A_IoTApp B,
					dbo.tb_A_Template C,
					dbo.tb_A_IoTNode A
				WHERE dbo.fun_GetNodeDeviceType(A.F_NodeCode) = @F_DeviceTypeID
					AND A.F_TemplateCode = C.F_TemplateCode
					AND A.F_AppCode = B.F_AppCode
					AND A.F_NodeName LIKE ''%'' + @Keyword + ''%''
			END
			ELSE
			BEGIN
				SELECT 
					ROW_NUMBER()OVER(ORDER BY B.F_AppCode,A.F_NodeNo) AS F_RowNum,
					A.F_NodeCode,
					A.F_NodeName,
					A.F_NodeNo,
					B.F_AppName,
					dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
					dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
					A.F_IsVisible,
					A.F_IsStorage,
					C.F_TemplateCode,
					C.F_TemplateName,
					A.F_Location
				FROM dbo.tb_A_IoTApp B,
					dbo.tb_A_Template C,
					dbo.tb_A_IoTNode A
				WHERE dbo.fun_GetNodeEnergyType(A.F_NodeCode) = @F_EnergyTypeID
					AND dbo.fun_GetNodeDeviceType(A.F_NodeCode) = @F_DeviceTypeID
					AND A.F_TemplateCode = C.F_TemplateCode
					AND A.F_AppCode = B.F_AppCode
					AND A.F_NodeName LIKE ''%'' + @Keyword + ''%''
			END
		END
	END
	ELSE
	BEGIN
		IF @F_DeviceTypeID = ''''
		BEGIN
			IF @F_EnergyTypeID = ''''
			BEGIN
				SELECT 
					ROW_NUMBER()OVER(ORDER BY B.F_AppCode,A.F_NodeNo) AS F_RowNum,
					A.F_NodeCode,
					A.F_NodeName,
					A.F_NodeNo,
					B.F_AppName,
					dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
					dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
					A.F_IsVisible,
					A.F_IsStorage,
					C.F_TemplateCode,
					C.F_TemplateName,
					A.F_Location
				FROM dbo.tb_A_IoTApp B,
					dbo.tb_A_Template C,
					dbo.tb_A_IoTNode A
				WHERE A.F_AppCode = @F_AppCode
					AND A.F_TemplateCode = C.F_TemplateCode
					AND A.F_AppCode = B.F_AppCode
					AND A.F_NodeName LIKE ''%'' + @Keyword + ''%''
			END
			ELSE
			BEGIN
				SELECT 
					ROW_NUMBER()OVER(ORDER BY B.F_AppCode,A.F_NodeNo) AS F_RowNum,
					A.F_NodeCode,
					A.F_NodeName,
					A.F_NodeNo,
					B.F_AppName,
					dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
					dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
					A.F_IsVisible,
					A.F_IsStorage,
					C.F_TemplateCode,
					C.F_TemplateName,
					A.F_Location
				FROM dbo.tb_A_IoTApp B,
					dbo.tb_A_Template C,
					dbo.tb_A_IoTNode A
				WHERE dbo.fun_GetNodeEnergyType(A.F_NodeCode) = @F_EnergyTypeID
					AND A.F_AppCode = @F_AppCode
					AND A.F_TemplateCode = C.F_TemplateCode
					AND A.F_AppCode = B.F_AppCode
					AND A.F_NodeName LIKE ''%'' + @Keyword + ''%''
			END
		END
		ELSE
		BEGIN
			IF @F_EnergyTypeID = ''''
			BEGIN
				SELECT 
					ROW_NUMBER()OVER(ORDER BY B.F_AppCode,A.F_NodeNo) AS F_RowNum,
					A.F_NodeCode,
					A.F_NodeName,
					A.F_NodeNo,
					B.F_AppName,
					dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
					dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
					A.F_IsVisible,
					A.F_IsStorage,
					C.F_TemplateCode,
					C.F_TemplateName,
					A.F_Location
				FROM dbo.tb_A_IoTApp B,
					dbo.tb_A_Template C,
					dbo.tb_A_IoTNode A
				WHERE A.F_AppCode = @F_AppCode
					AND dbo.fun_GetNodeDeviceType(A.F_NodeCode) = @F_DeviceTypeID
					AND A.F_TemplateCode = C.F_TemplateCode
					AND A.F_AppCode = B.F_AppCode
					AND A.F_NodeName LIKE ''%'' + @Keyword + ''%''
			END
			ELSE
			BEGIN
				SELECT 
					ROW_NUMBER()OVER(ORDER BY B.F_AppCode,A.F_NodeNo) AS F_RowNum,
					A.F_NodeCode,
					A.F_NodeName,
					A.F_NodeNo,
					B.F_AppName,
					dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyType,
					dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceType,
					A.F_IsVisible,
					A.F_IsStorage,
					C.F_TemplateCode,
					C.F_TemplateName,
					A.F_Location
				FROM dbo.tb_A_IoTApp B,
					dbo.tb_A_Template C,
					dbo.tb_A_IoTNode A
				WHERE A.F_AppCode = @F_AppCode
					AND dbo.fun_GetNodeEnergyType(A.F_NodeCode) = @F_EnergyTypeID
					AND dbo.fun_GetNodeDeviceType(A.F_NodeCode) = @F_DeviceTypeID
					AND A.F_TemplateCode = C.F_TemplateCode
					AND A.F_AppCode = B.F_AppCode
					AND A.F_NodeName LIKE ''%'' + @Keyword + ''%''
			END
		END
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_ExportNodeInfo]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_ExportNodeInfo]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_ExportNodeInfo]
	@F_IsApp bit,
	@F_AppCode bigint,
	@F_IsDevice bit,
	@F_DeviceCode bigint
AS
BEGIN
	DECLARE @SqlText varchar(max)
	DECLARE @SqlTag1 varchar(max)
	DECLARE @SqlTag2 varchar(max)
	DECLARE @PropertyTag varchar(32)
	DECLARE @cur_property cursor
	IF @F_IsApp = 1
	BEGIN
		IF @F_IsDevice IS NULL OR @F_IsDevice = 0
		BEGIN
			SELECT
				C.F_AppName,
				A.F_NodeCode,
				A.F_NodeName,
				dbo.fun_GetNodeTemplateName(A.F_NodeCode) AS F_TemplateName,
				dbo.fun_GetNodeEnergyType(A.F_NodeCode) AS F_EnergyTypeCode,
				dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyTypeName,
				dbo.fun_GetNodeDeviceType(A.F_NodeCode) AS F_DeviceTypeCode,
				dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceTypeName,
				A.F_NodeNo,
				A.F_Location,
				ISNULL(CAST(A.F_ParentCode AS VARCHAR),'''''''') AS F_ParentCode,
				A.F_NodeRank,
				CASE WHEN B.F_ObjectGroup IS NULL THEN '''' WHEN B.F_ObjectGroup = ''2'' THEN dbo.fun_GetNodeMeteringEntityID(B.F_EntityTreeNo,B.F_EntityID) WHEN B.F_ObjectGroup = ''3'' THEN dbo.fun_GetNodeRelationEntityID(B.F_EntityTreeNo,B.F_EntityID) END AS F_ToEntity
			FROM dbo.tb_A_IoTApp C,
				dbo.tb_A_IoTNode A LEFT OUTER JOIN dbo.tb_B_EntityTreeModel B ON A.F_NodeCode = B.F_EntityID
			WHERE A.F_AppCode = @F_AppCode
				AND A.F_NodeCode = B.F_EntityID
				AND C.F_AppCode = A.F_AppCode
		END
		ELSE IF @F_IsDevice = 1
		BEGIN						
			SET @SqlTag1 = ''''
			SET @SqlTag2 = ''''
			SET @cur_property = CURSOR forward_only static FOR SELECT A.F_PropertyIdentifier FROM dbo.tb_B_ObjectProperty A,dbo.tb_B_DictTreeProperty B WHERE B.F_GroupID = @F_DeviceCode AND B.F_PropertyID = A.F_PropertyID AND A.F_PropertyTypeID <> ''4'' ORDER BY B.F_OrderNum
			OPEN @cur_property
			FETCH NEXT FROM @cur_property INTO @PropertyTag
			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @SqlTag1 = @SqlTag1 + '',dbo.fun_GetEntityPropertyValue(A.F_NodeCode,'''''' + @PropertyTag + '''''') AS '' + @PropertyTag
				SET @SqlTag2 = @SqlTag2 + '',dbo.fun_GetEntityPropertyValue(F_EntityID,'''''' + @PropertyTag + '''''') AS '' + @PropertyTag
				FETCH NEXT FROM @cur_property INTO @PropertyTag
			END
			CLOSE @cur_property
			DEALLOCATE @cur_property
			
			SET @SqlText = 
			''SELECT 
				C.F_AppName,
				A.F_NodeCode,
				A.F_NodeName,
				dbo.fun_GetNodeTemplateName(A.F_NodeCode) AS F_TemplateName,
				dbo.fun_GetNodeEnergyType(A.F_NodeCode) AS F_EnergyTypeCode,
				dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyTypeName,
				dbo.fun_GetNodeDeviceType(A.F_NodeCode) AS F_DeviceTypeCode,
				dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceTypeName,
				A.F_NodeNo,
				A.F_Location,
				CASE WHEN B.F_ParentID = dbo.fun_GetEntityTreeRootNode(B.F_ParentID) THEN 0 ELSE ISNULL(B.F_ParentID,A.F_ParentCode) END AS F_ParentCode,
				A.F_NodeRank,
				CASE WHEN B.F_ObjectGroup IS NULL THEN '''''''' WHEN B.F_ObjectGroup = ''''2'''' THEN dbo.fun_GetNodeMeteringEntityID(B.F_EntityTreeNo,B.F_EntityID) WHEN B.F_ObjectGroup = ''''3'''' THEN dbo.fun_GetNodeRelationEntityID(B.F_EntityTreeNo,B.F_EntityID) END AS F_ToEntity  
				'' + @SqlTag1 + '' 
			FROM dbo.tb_A_IoTApp C,dbo.tb_A_IoTNode A LEFT OUTER JOIN dbo.tb_B_EntityTreeModel B ON A.F_NodeCode = B.F_EntityID 
			WHERE A.F_AppCode = '' + CAST(@F_AppCode AS VARCHAR) + '' 
				AND dbo.fun_GetNodeDeviceType(A.F_NodeCode) = '' + CAST(@F_DeviceCode AS VARCHAR) +  '' 
				AND C.F_AppCode = A.F_AppCode''
		END
	END
	ELSE IF @F_IsDevice = 1
	BEGIN
		SET @SqlTag1 = ''''
		SET @SqlTag2 = ''''
		SET @cur_property = CURSOR forward_only static FOR SELECT A.F_PropertyIdentifier FROM dbo.tb_B_ObjectProperty A,dbo.tb_B_DictTreeProperty B WHERE B.F_GroupID = @F_DeviceCode AND B.F_PropertyID = A.F_PropertyID AND A.F_PropertyTypeID <> ''4'' ORDER BY B.F_OrderNum
		OPEN @cur_property
		FETCH NEXT FROM @cur_property INTO @PropertyTag
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @SqlTag1 = @SqlTag1 + '',dbo.fun_GetEntityPropertyValue(A.F_NodeCode,'''''' + @PropertyTag + '''''') AS '' + @PropertyTag
			SET @SqlTag2 = @SqlTag2 + '',dbo.fun_GetEntityPropertyValue(F_EntityID,'''''' + @PropertyTag + '''''') AS '' + @PropertyTag
			FETCH NEXT FROM @cur_property INTO @PropertyTag
		END
		CLOSE @cur_property
		DEALLOCATE @cur_property
		
		SET @SqlText = 
		''SELECT 
			A.F_NodeCode,
			A.F_NodeName,
			dbo.fun_GetNodeTemplateName(A.F_NodeCode) AS F_TemplateName,
			dbo.fun_GetNodeEnergyType(A.F_NodeCode) AS F_EnergyTypeCode,
			dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(A.F_NodeCode)) AS F_EnergyTypeName,
			dbo.fun_GetNodeDeviceType(A.F_NodeCode) AS F_DeviceTypeCode,
			dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(A.F_NodeCode)) AS F_DeviceTypeName,
			A.F_NodeNo,
			A.F_Location,
			CASE WHEN B.F_ParentID = dbo.fun_GetEntityTreeRootNode(B.F_ParentID) THEN 0 ELSE ISNULL(B.F_ParentID,A.F_ParentCode) END AS F_ParentCode,
			A.F_NodeRank,
			CASE WHEN B.F_ObjectGroup IS NULL THEN '''''''' WHEN B.F_ObjectGroup = ''''2'''' THEN dbo.fun_GetNodeMeteringEntityID(B.F_EntityTreeNo,B.F_EntityID) WHEN B.F_ObjectGroup = ''''3'''' THEN dbo.fun_GetNodeRelationEntityID(B.F_EntityTreeNo,B.F_EntityID) END AS F_ToEntity  
			'' + @SqlTag1 + '' 
		FROM dbo.tb_A_IoTNode A LEFT OUTER JOIN dbo.tb_B_EntityTreeModel B ON A.F_NodeCode = B.F_EntityID 
		WHERE dbo.fun_GetNodeDeviceType(A.F_NodeCode) = '' + CAST(@F_DeviceCode AS VARCHAR) + '' OR dbo.fun_GetNodeObjTemplate(A.F_NodeCode) = '' + CAST(@F_DeviceCode AS VARCHAR) +  
		'' UNION SELECT
			F_EntityID AS F_NodeCode,
			F_EntityName AS F_NodeName,
			dbo.fun_GetNodeTemplateName(F_EntityID) AS F_TemplateName,
			dbo.fun_GetNodeEnergyType(F_EntityID) AS F_EnergyTypeCode,
			dbo.fun_GetEnergyTypeName(dbo.fun_GetNodeEnergyType(F_EntityID)) AS F_EnergyTypeName,
			dbo.fun_GetNodeDeviceType(F_EntityID) AS F_DeviceTypeCode,
			dbo.fun_GetDeviceTypeName(dbo.fun_GetNodeDeviceType(F_EntityID)) AS F_DeviceTypeName,
			'''''''',
			'''''''',
			ISNULL(CAST(F_ParentID AS VARCHAR),'''''''') AS F_ParentCode,
			'''''''' AS F_NodeRank,
			CASE WHEN F_ObjectGroup IS NULL THEN '''''''' WHEN F_ObjectGroup = ''''2'''' THEN dbo.fun_GetNodeMeteringEntityID(F_EntityTreeNo,F_EntityID) WHEN F_ObjectGroup = ''''3'''' THEN dbo.fun_GetNodeRelationEntityID(F_EntityTreeNo,F_EntityID) END AS F_ToEntity  
			'' + @SqlTag2 + '' 
		FROM dbo.tb_B_EntityTreeModel 
		WHERE F_ParentID <> 0 AND dbo.fun_GetNodeDeviceType(F_EntityID) = '' + CAST(@F_DeviceCode AS VARCHAR) + '' AND dbo.fun_GetNodeAorVType(F_EntityID) = 0''
		EXEC (@SqlText)
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_MakeParamSerial]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_MakeParamSerial]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_MakeParamSerial]()
RETURNS bigint
BEGIN
	DECLARE @SerialNum bigint
	SELECT @SerialNum = MAX(F_ValueCode) + 1 FROM dbo.tb_A_Value
	IF @SerialNum IS NULL SET @SerialNum = CAST(DATEDIFF(s,''1970-01-01'',GETDATE()) AS bigint)
	RETURN @SerialNum
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetUserProjectAuth]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetUserProjectAuth]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetUserProjectAuth] (
	@F_ProjectNo int,
	@F_UserCode bigint
) RETURNS int
BEGIN
	DECLARE @HasAuth int
	DECLARE @F_UserType char(1)
	DECLARE @F_RoleCode bigint
	
	SELECT @F_UserType = F_UserType,@F_RoleCode = F_RoleCode FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	IF NOT EXISTS(SELECT F_ProjectNo FROM dbo.tb_A_Project WHERE F_ProjectNo = @F_ProjectNo)
		AND NOT EXISTS(SELECT F_AgentCode FROM dbo.tb_A_Agent WHERE F_AgentCode = @F_ProjectNo)
		SET @HasAuth = -1
	ELSE IF @F_UserType = ''1'' OR @F_UserType = ''2'' SET @HasAuth = 1
	ELSE IF EXISTS(SELECT F_AppNo FROM dbo.tb_A_RoleToApp WHERE F_RoleCode = @F_RoleCode AND F_AppNo = @F_ProjectNo) SET @HasAuth = 1
	ELSE SET @HasAuth = 0
	
	RETURN @HasAuth
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetUserFunKanban]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetUserFunKanban]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetUserFunKanban] (
	@F_UserCode bigint
) RETURNS varchar(128)
BEGIN
	DECLARE @F_UserType char(1)
	DECLARE @F_Kanban varchar(128)
	
	SELECT @F_UserType = F_UserType FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	IF @F_UserType = ''1'' OR @F_UserType = ''2'' SELECT @F_Kanban = CAST(B.F_FunctionCode AS VARCHAR) + ''@'' + A.F_PluginTag + ''@'' + CAST(A.F_PluginCode AS VARCHAR) FROM dbo.tb_A_Plugins A,dbo.tb_A_Function B,dbo.tb_A_LoginUser C WHERE C.F_UserCode = @F_UserCode AND C.F_Kanban = B.F_FunctionCode AND B.F_PluginCode = A.F_PluginCode
	ELSE SELECT @F_Kanban = CAST(B.F_FunctionCode AS VARCHAR) + ''@'' + A.F_PluginTag + ''@'' + CAST(A.F_PluginCode AS VARCHAR) FROM dbo.tb_A_Plugins A,dbo.tb_A_Function B,dbo.tb_A_LoginUser C,tb_A_Role D WHERE C.F_UserCode = @F_UserCode AND C.F_RoleCode = D.F_RoleCode AND D.F_Kanban = B.F_FunctionCode AND B.F_PluginCode = A.F_PluginCode
	
	RETURN @F_Kanban
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetPluginFunCount]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetPluginFunCount]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetPluginFunCount] (
	@F_PluginCode bigint
) RETURNS int
BEGIN
	DECLARE @TotalCount int
	SELECT @TotalCount = COUNT(F_FunctionCode) FROM dbo.tb_A_Function WHERE F_PluginCode = @F_PluginCode
	RETURN @TotalCount
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_GetFunctionEnvVar]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_GetFunctionEnvVar]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_GetFunctionEnvVar] (@F_FunctionCode bigint)
RETURNS varchar(max) 
BEGIN
	DECLARE @envvar varchar(max)
	SELECT @envvar = STUFF((SELECT '','' + F_EnvVarKey + '':'' + F_EnvVarValue + '''' FROM dbo.tb_A_FunctionEnvVar WHERE F_FunctionCode = @F_FunctionCode FOR XML PATH('''')),1,1,'''')
	RETURN CASE WHEN @envvar IS NULL THEN '''' ELSE ''{'' + @envvar + ''}'' END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_FunctionOperate]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_FunctionOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_FunctionOperate]
	@OperFlg char(1),
	@F_FunctionCode bigint,
	@F_FunctionName varchar(64),
	@F_FunctionTag varchar(64),
	@F_FunctionTypeNo varchar(1),
	@F_PluginCode bigint,
	@F_User varchar(32)
AS
BEGIN
	IF @OperFlg = ''1''
	BEGIN
		SELECT @F_FunctionCode = dbo.fun_MakeSerialNum()
		INSERT INTO dbo.tb_A_Function
		(
			F_FunctionCode,
			F_FunctionName,
			F_FunctionTag,
			F_FunctionTypeNo,
			F_PluginCode,
			F_CreateUser,
			F_CreateDate
		)
		SELECT
			dbo.fun_MakeSerialNum(),
			@F_FunctionName,
			@F_FunctionTag,
			@F_FunctionTypeNo,
			@F_PluginCode,
			@F_User,
			GETDATE()
	END
	ELSE IF @OperFlg = ''2''
	BEGIN		
		IF EXISTS(SELECT F_FunctionCode FROM dbo.tb_A_Function WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode <> @F_PluginCode)
		BEGIN
			DELETE FROM dbo.tb_A_PluginToCustom WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode <> @F_PluginCode
			DELETE FROM dbo.tb_A_PluginToDevice WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode <> @F_PluginCode
			DELETE FROM dbo.tb_A_PluginToEnergy WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode <> @F_PluginCode
			DELETE FROM dbo.tb_A_PluginToEntity WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode <> @F_PluginCode
			DELETE FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode <> @F_PluginCode
			DELETE FROM dbo.tb_A_PluginToTemplate WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode <> @F_PluginCode
			DELETE FROM dbo.tb_A_PluginToTree WHERE F_FunctionCode = @F_FunctionCode AND F_PluginCode <> @F_PluginCode
		END
		
		UPDATE dbo.tb_A_Function
		SET F_FunctionTag = @F_FunctionTag,
			F_FunctionName = @F_FunctionName,
			F_FunctionTypeNo = @F_FunctionTypeNo,
			F_PluginCode = @F_PluginCode,
			F_UpdateUser = @F_User,
			F_UpdateDate = GETDATE()
		WHERE F_FunctionCode = @F_FunctionCode
	END
	ELSE IF @OperFlg = ''3''
	BEGIN
		DELETE FROM dbo.tb_A_Function WHERE F_FunctionCode = @F_FunctionCode
		DELETE FROM dbo.tb_A_FunctionEnvVar WHERE F_FunctionCode = @F_FunctionCode
		DELETE FROM dbo.tb_A_ProjectToMenu WHERE F_FunctionCode = @F_FunctionCode
		DELETE FROM dbo.tb_A_PluginToCustom WHERE F_FunctionCode = @F_FunctionCode
		DELETE FROM dbo.tb_A_PluginToDevice WHERE F_FunctionCode = @F_FunctionCode
		DELETE FROM dbo.tb_A_PluginToEnergy WHERE F_FunctionCode = @F_FunctionCode
		DELETE FROM dbo.tb_A_PluginToEntity WHERE F_FunctionCode = @F_FunctionCode
		DELETE FROM dbo.tb_A_PluginToEntityRename WHERE F_FunctionCode = @F_FunctionCode
		DELETE FROM dbo.tb_A_PluginToTemplate WHERE F_FunctionCode = @F_FunctionCode
		DELETE FROM dbo.tb_A_PluginToTree WHERE F_FunctionCode = @F_FunctionCode
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_FunctionEnvVarOperate]    Script Date: 11/09/2020 15:24:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_FunctionEnvVarOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_FunctionEnvVarOperate]
	@F_PluginCode bigint,
	@F_FunctionCode bigint,
	@F_EnvVarKey varchar(50),
	@F_EnvVarValue varchar(max),
	@F_User varchar(32)
AS
BEGIN
	IF EXISTS(SELECT F_EnvVarValue FROM dbo.tb_A_FunctionEnvVar WHERE F_FunctionCode = @F_FunctionCode AND F_EnvVarKey = @F_EnvVarKey)
	BEGIN
		UPDATE dbo.tb_A_FunctionEnvVar SET F_EnvVarValue = @F_EnvVarValue WHERE F_FunctionCode = @F_FunctionCode AND F_EnvVarKey = @F_EnvVarKey
	END
	ELSE
	BEGIN
		INSERT INTO dbo.tb_A_FunctionEnvVar
		(
			F_FunctionCode,
			F_EnvVarKey,
			F_EnvVarValue,
			F_PluginCode
		)
		VALUES
		(
			@F_FunctionCode,
			@F_EnvVarKey,
			@F_EnvVarValue,
			@F_PluginCode
		)
	END
END
' 
END
GO
/****** Object:  UserDefinedFunction [dbo].[fun_PropertyIsAdded]    Script Date: 11/09/2020 15:24:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fun_PropertyIsAdded]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [dbo].[fun_PropertyIsAdded] (
	@F_GroupID varchar(16),
	@F_PropertyID varchar(16)
) RETURNS bit
BEGIN
	DECLARE @IsAdded bit
	SET @IsAdded = 0
	IF EXISTS(SELECT F_PropertyID FROM dbo.tb_B_DictTreeProperty WHERE F_GroupID = @F_GroupID AND F_PropertyID = @F_PropertyID)
		SET @IsAdded = 1
	RETURN @IsAdded
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_ImportTplValue]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_ImportTplValue]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_ImportTplValue]
	@F_TemplateLabel varchar(32),
	@F_ValueName varchar(32),
	@F_ValueLabel varchar(32),
	@F_ValueType char(1),
	@F_ValueProperty char(1),
	@F_DataType varchar(16),
	@F_PrecisionRatio varchar(16),
	@F_DecimalPoint varchar(16),
	@F_DefaultValue varchar(16),
	@F_Unit nvarchar(16),
	@F_ReadWrite varchar(16),
	@F_CommCycle varchar(16),
	@F_Formula varchar(128),
	@F_KV varchar(128),
	@F_IsStorage bit,
	@F_StorageCycle varchar(16),
	@F_RangeLower varchar(16),
	@F_RangeUpper varchar(16),
	@F_SlopeLower varchar(16),
	@F_SlopeUpper varchar(16),
	@F_Benchmark varchar(16),
	@F_Fluctuated varchar(16),
	@F_MinValue varchar(16),
	@F_MaxValue varchar(16),
	@F_IsDisplay bit,
	@F_OrderNum int
AS
BEGIN
	DECLARE @F_Log varchar(512)
	DECLARE @F_TemplateCode bigint
	SELECT @F_TemplateCode = F_TemplateCode FROM dbo.tb_A_Template WHERE F_TemplateLabel = @F_TemplateLabel
	IF EXISTS(SELECT F_ValueCode FROM dbo.tb_A_Value WHERE F_TemplateCode = @F_TemplateCode AND F_ValueLabel = @F_ValueLabel)
	BEGIN
		UPDATE dbo.tb_A_Value
		SET F_ValueName = @F_ValueName,
			F_ValueLabel = @F_ValueLabel,
			F_ValueType = @F_ValueType,
			F_ValueProperty = @F_ValueProperty,
			F_DataType = @F_DataType,
			F_PrecisionRatio =  CASE @F_PrecisionRatio WHEN '''' THEN NULL ELSE @F_PrecisionRatio END,
			F_DecimalPoint =  CASE @F_DecimalPoint WHEN '''' THEN NULL ELSE @F_DecimalPoint END,
			F_DefaultValue = @F_DefaultValue,
			F_Unit = @F_Unit,
			F_ReadWrite = @F_ReadWrite,
			F_CommCycle = CASE @F_CommCycle WHEN '''' THEN NULL ELSE @F_CommCycle END,
			F_Formula = @F_Formula,
			F_KV = @F_KV,
			F_IsStorage = @F_IsStorage,
			F_StorageCycle = CASE @F_StorageCycle WHEN '''' THEN NULL ELSE @F_StorageCycle END,
			F_RangeLower = CASE @F_RangeLower WHEN '''' THEN NULL ELSE @F_RangeLower END,
			F_RangeUpper = CASE @F_RangeUpper WHEN '''' THEN NULL ELSE @F_RangeUpper END,
			F_SlopeLower = CASE @F_SlopeLower WHEN '''' THEN NULL ELSE @F_SlopeLower END,
			F_SlopeUpper = CASE @F_SlopeUpper WHEN '''' THEN NULL ELSE @F_SlopeUpper END,
			F_Benchmark = CASE @F_Benchmark WHEN '''' THEN NULL ELSE @F_Benchmark END,
			F_Fluctuated = CASE @F_Fluctuated WHEN '''' THEN NULL ELSE @F_Fluctuated END,
			F_MinValue = CASE @F_MinValue WHEN '''' THEN NULL ELSE @F_MinValue END,
			F_MaxValue = CASE @F_MaxValue WHEN '''' THEN NULL ELSE @F_MaxValue END,
			F_IsDisplay = @F_IsDisplay,
			F_OrderNum = @F_OrderNum
		WHERE F_TemplateCode = @F_TemplateCode
			AND F_ValueLabel = @F_ValueLabel
	END
	ELSE
	BEGIN
		INSERT INTO dbo.tb_A_Value
		(
			F_TemplateCode,
			F_ValueCode,
			F_ValueName,
			F_ValueLabel,
			F_ValueType,
			F_ValueProperty,
			F_DataType,
			F_PrecisionRatio,
			F_DecimalPoint,
			F_DefaultValue,
			F_Unit,
			F_ReadWrite,
			F_CommCycle,
			F_Formula,
			F_KV,
			F_IsStorage,
			F_StorageCycle,
			F_RangeLower,
			F_RangeUpper,
			F_SlopeLower,
			F_SlopeUpper,
			F_Benchmark,
			F_Fluctuated,
			F_MinValue,
			F_MaxValue,
			F_IsRefer,
			F_IsDisplay,
			F_OrderNum
		)
		VALUES
		(
			@F_TemplateCode,
			dbo.fun_MakeParamSerial(),
			@F_ValueName,
			@F_ValueLabel,
			@F_ValueType,
			@F_ValueProperty,
			@F_DataType,
			CASE @F_PrecisionRatio WHEN '''' THEN NULL ELSE @F_PrecisionRatio END,
			CASE @F_DecimalPoint WHEN '''' THEN NULL ELSE @F_DecimalPoint END,
			@F_DefaultValue,
			@F_Unit,
			@F_ReadWrite,
			CASE @F_CommCycle WHEN '''' THEN NULL ELSE @F_CommCycle END,
			@F_Formula,
			@F_KV,
			@F_IsStorage,
			CASE @F_StorageCycle WHEN '''' THEN NULL ELSE @F_StorageCycle END,
			CASE @F_RangeLower WHEN '''' THEN NULL ELSE @F_RangeLower END,
			CASE @F_RangeUpper WHEN '''' THEN NULL ELSE @F_RangeUpper END,
			CASE @F_SlopeLower WHEN '''' THEN NULL ELSE @F_SlopeLower END,
			CASE @F_SlopeUpper WHEN '''' THEN NULL ELSE @F_SlopeUpper END,
			CASE @F_Benchmark WHEN '''' THEN NULL ELSE @F_Benchmark END,
			CASE @F_Fluctuated WHEN '''' THEN NULL ELSE @F_Fluctuated END,
			CASE @F_MinValue WHEN '''' THEN NULL ELSE @F_MinValue END,
			CASE @F_MaxValue WHEN '''' THEN NULL ELSE @F_MaxValue END,
			0,
			CASE @F_IsDisplay WHEN '''' THEN 1 ELSE @F_IsDisplay END,
			@F_OrderNum
		)
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_LoginUserAuth_Ext]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_LoginUserAuth_Ext]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_LoginUserAuth_Ext] 
	@F_UserID varchar(32),
	@F_UserPwd varchar(512),
	@F_IP varchar(32),
	@F_ProjectNo int
AS
BEGIN		
	SELECT
		A.F_UserCode,
		F_UserID,
		F_UserName,
		F_UserType,
		CASE F_UserType 
			WHEN ''1'' THEN ''超级管理员'' 
			WHEN ''2'' THEN ''系统管理员'' 
			WHEN ''3'' THEN ''系统访问者'' 
		END AS F_TypeName,
		F_Email,
		F_Mobile,
		B.F_UI,
		dbo.fun_GetUserFunKanban(A.F_UserCode) AS F_MyKanban,
		dbo.fun_GetUserGuideProject(A.F_UserCode) AS F_MyProject,
		dbo.fun_GetUserProjectAuth(@F_ProjectNo,A.F_UserCode) AS F_HasAuth
	FROM dbo.tb_A_LoginUser A LEFT OUTER JOIN dbo.tb_A_UserToUI B
		ON A.F_UserCode = B.F_UserCode
	WHERE F_UserID = @F_UserID
		AND F_UserPwd = @F_UserPwd
		AND F_UserType IN (''1'',''2'',''3'')
		AND (F_LockIP IS NULL OR F_LockIP = '''' OR F_LockIP = @F_IP)
		AND (F_EndDate IS NULL OR GETDATE() BETWEEN F_StartDate AND F_EndDate)
	
	IF @@Rowcount > 0
	BEGIN
		DECLARE @F_Log varchar(512)
		SET @F_Log = @F_UserID + ''从'' + @F_IP + ''登录平台成功！''
		EXEC dbo.proc_A_WriteEventLog ''2'',@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_LoginUserAuth]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_LoginUserAuth]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_LoginUserAuth] 
	@F_UserID varchar(32),
	@F_UserPwd varchar(512),
	@F_IP varchar(32),
	@F_OpenID varchar(128)
AS
BEGIN		
	SELECT
		A.F_UserCode,
		F_UserID,
		F_UserName,
		F_UserType,
		CASE F_UserType 
			WHEN ''1'' THEN ''超级管理员'' 
			WHEN ''2'' THEN ''系统管理员'' 
			WHEN ''3'' THEN ''系统访问者''
		END AS F_TypeName,
		F_Email,
		F_Mobile,
		B.F_UI,
		dbo.fun_GetUserFunKanban(A.F_UserCode) AS F_MyKanban,
		dbo.fun_GetUserGuideProject(A.F_UserCode) AS F_MyProject,
		dbo.fun_IsOnlyAdminUser() AS F_IsOnlyTag
	FROM dbo.tb_A_LoginUser A LEFT OUTER JOIN dbo.tb_A_UserToUI B
		ON A.F_UserCode = B.F_UserCode
	WHERE F_UserID = @F_UserID
		AND F_UserPwd = @F_UserPwd
		AND F_UserType IN (''1'',''2'',''3'')
		AND (F_LockIP IS NULL OR F_LockIP = '''' OR F_LockIP = @F_IP)
		AND (F_EndDate IS NULL OR GETDATE() BETWEEN F_StartDate AND F_EndDate)
	IF @@Rowcount > 0
	BEGIN
		DECLARE @F_Log varchar(512)
		IF @F_OpenID <> ''''
		BEGIN
			UPDATE dbo.tb_A_LoginUser SET F_OpenID = NULL WHERE F_OpenID = @F_OpenID
			UPDATE dbo.tb_A_LoginUser SET F_OpenID = @F_OpenID WHERE F_UserID = @F_UserID
		END
		SET @F_Log = @F_UserID + ''从'' + @F_IP + ''登录平台成功！''
		EXEC dbo.proc_A_WriteEventLog ''2'',@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_OpenAPIUserAuth]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_OpenAPIUserAuth]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_OpenAPIUserAuth] 
	@F_UserID varchar(32),
	@F_UserPwd varchar(512),
	@F_IP varchar(32),
	@F_OpenID varchar(128)
AS
BEGIN		
	SELECT
		A.F_UserCode,
		F_UserID,
		F_UserName,
		F_UserType,
		CASE F_UserType 
			WHEN ''1'' THEN ''超级管理员'' 
			WHEN ''2'' THEN ''系统管理员'' 
			WHEN ''3'' THEN ''系统访问者'' 
			WHEN ''4'' THEN ''接口访问者'' 
		END AS F_TypeName,
		F_Email,
		F_Mobile,
		B.F_UI,
		dbo.fun_GetUserFunKanban(A.F_UserCode) AS F_MyKanban,
		dbo.fun_GetUserGuideProject(A.F_UserCode) AS F_MyProject
	FROM dbo.tb_A_LoginUser A LEFT OUTER JOIN dbo.tb_A_UserToUI B
		ON A.F_UserCode = B.F_UserCode
	WHERE F_UserID = @F_UserID
		AND F_UserPwd = @F_UserPwd
		AND (F_LockIP IS NULL OR F_LockIP = '''' OR F_LockIP = @F_IP)
		AND (F_EndDate IS NULL OR GETDATE() BETWEEN F_StartDate AND F_EndDate)
	IF @@Rowcount > 0
	BEGIN
		DECLARE @F_Log varchar(512)
		IF @F_OpenID <> ''''
		BEGIN
			UPDATE dbo.tb_A_LoginUser SET F_OpenID = NULL WHERE F_OpenID = @F_OpenID
			UPDATE dbo.tb_A_LoginUser SET F_OpenID = @F_OpenID WHERE F_UserID = @F_UserID
		END
		SET @F_Log = @F_UserID + ''从'' + @F_IP + ''登录API系统成功！''
		EXEC dbo.proc_A_WriteEventLog ''3'',@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetPluginSqlScript]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetPluginSqlScript]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetPluginSqlScript]
	@F_SysStr varchar(max),
	@F_SysMenuStr varchar(max),
	@F_AppStr varchar(max)
AS
BEGIN
	SELECT 
		2 AS F_RowNum,
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_Plugins'' AS F_Table,
		''F_PluginCode,F_PluginName,F_PluginTag,F_PluginTypeNo,F_PluginCategory,F_IsConfig,F_ConfType,F_EnergyConfig,F_TemplateConfig,F_DeviceConfig,F_GuideMode'' AS F_Fields,
		CAST(F_PluginCode AS VARCHAR) + '','''''' + F_PluginName + '''''','''''' + F_PluginTag + '''''','''''' + F_PluginTypeNo + '''''','''''' + F_PluginCategory + '''''','' + ISNULL(CAST(F_IsConfig AS VARCHAR),''NULL'') + '','''''' + F_ConfType + '''''','' + ISNULL(CAST(F_EnergyConfig AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_TemplateConfig AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_DeviceConfig AS VARCHAR),''NULL'') + '','''''' + F_GuideMode + '''''''' AS F_Values 
	FROM dbo.tb_A_Plugins
	WHERE F_PluginCode IN
	(
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT 
		3 AS F_RowNum,
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_Function'' AS F_Table,
		''F_FunctionCode,F_FunctionName,F_FunctionTag,F_FunctionTypeNo,F_PluginCode'' AS F_Fields,
		CAST(F_FunctionCode AS VARCHAR) + '','''''' + F_FunctionName + '''''','''''' + F_FunctionTag + '''''','''''' + F_FunctionTypeNo + '''''','' + CAST(F_PluginCode AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_Function
	WHERE F_FunctionCode IN
	(
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT 
		4 AS F_RowNum,
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_PluginEnvVar'' AS F_Table,
		''F_PluginCode,F_EnvVarKey'' AS F_Fields,
		CAST(F_PluginCode AS VARCHAR) + '','''''' + F_EnvVarKey + '''''''' AS F_Values 
	FROM dbo.tb_A_PluginEnvVar
	WHERE F_PluginCode IN
	(
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT
		5 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_FunctionEnvVar'' AS F_Table,
		''F_FunctionCode,F_EnvVarKey,F_EnvVarValue,F_PluginCode'' AS F_Fields,
		CAST(F_FunctionCode AS VARCHAR) + '','''''' + F_EnvVarKey + '''''','''''' + F_EnvVarValue + '''''','' + CAST(F_PluginCode AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_FunctionEnvVar
	WHERE F_FunctionCode IN
	(
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT
		6 AS F_RowNum, 
		''SET IDENTITY_INSERT tb_A_Project ON'' AS F_Header,
		''SET IDENTITY_INSERT tb_A_Project OFF'' AS F_Footer,
		''dbo.tb_A_Project'' AS F_Table,
		''F_ProjectNo,F_ProjectName,F_ProjectAbbr,F_ProjectTag,F_ProjectType,F_ProjectIndex,F_ProjectColor,F_ProjectDes,F_ProjectFrame,F_SystemFunction,F_GuideFunction'' AS F_Fields,
		CAST(F_ProjectNo AS VARCHAR) + '','''''' + F_ProjectName + '''''','''''' + F_ProjectAbbr + '''''','''''' + F_ProjectTag + '''''','''''' + F_ProjectType + '''''','' + CAST(F_ProjectIndex AS VARCHAR) + '','''''' + F_ProjectColor + '''''','''''' +  F_ProjectDes + '''''','' +  CAST(F_ProjectFrame AS VARCHAR) + '','' + CAST(ISNULL(F_SystemFunction,'''') AS VARCHAR) + '','' + CAST(ISNULL(F_GuideFunction,'''') AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_Project
	WHERE F_ProjectNo IN
	(
		SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_SysStr)
		UNION
		SELECT DISTINCT SUBSTRING(F_ObjectID,1,CHARINDEX(''_'',F_ObjectID) - 1) FROM dbo.fun_SplitByComma(@F_SysMenuStr)
	)
	UNION
	SELECT
		7 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_ProjectToMenu'' AS F_Table,
		''F_ProjectNo,F_MenuCode,F_MenuTag,F_MenuName,F_MenuAbbr,F_MenuType,F_MenuIndex,F_MenuPosition,F_IsHasChild,F_ParentCode,F_FunctionCode'' AS F_Fields,
		CAST(F_ProjectNo AS VARCHAR) + '','' + CAST(F_MenuCode AS VARCHAR) + '','''''' + F_MenuTag + '''''','''''' + F_MenuName + '''''','''''' + F_MenuAbbr + '''''','''''' + F_MenuType + '''''','' + CAST(F_MenuIndex AS VARCHAR) + '','''''' + F_MenuPosition + '''''','' +  CAST(ISNULL(F_IsHasChild,0) AS VARCHAR) + '','' +  CAST(F_ParentCode AS VARCHAR) + '','' + CAST(ISNULL(F_FunctionCode,'''') AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_ProjectToMenu
	WHERE F_ProjectNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_SysStr))
		OR F_MenuCode IN (SELECT SUBSTRING(F_ObjectID,CHARINDEX(''_'',F_ObjectID) + 1,LEN(F_ObjectID)) FROM dbo.fun_SplitByComma(@F_SysMenuStr))
	UNION
	SELECT
		8 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_MobileApp'' AS F_Table,
		''F_AppCode,F_AppName,F_AppTag,F_AppType,F_FunctionCode'' AS F_Fields,
		CAST(F_AppCode AS VARCHAR) + '','''''' + F_AppName + '''''','''''' + F_AppTag + '''''','''''' + F_AppType + '''''','' + CAST(F_FunctionCode AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_MobileApp
	WHERE F_AppCode IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_AppStr))
	ORDER BY F_RowNum
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetSysSqlScript]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetSysSqlScript]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetSysSqlScript]
	@F_SysStr varchar(max),
	@F_SysMenuStr varchar(max),
	@F_AppStr varchar(max)
AS
BEGIN
	SELECT 
		2 AS F_RowNum,
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_Plugins'' AS F_Table,
		''F_PluginCode,F_PluginName,F_PluginTag,F_PluginTypeNo,F_PluginCategory,F_IsConfig,F_ConfType,F_EnergyConfig,F_TemplateConfig,F_DeviceConfig,F_GuideMode'' AS F_Fields,
		CAST(F_PluginCode AS VARCHAR) + '','''''' + F_PluginName + '''''','''''' + F_PluginTag + '''''','''''' + F_PluginTypeNo + '''''','''''' + F_PluginCategory + '''''','' + ISNULL(CAST(F_IsConfig AS VARCHAR),''NULL'') + '','''''' + F_ConfType + '''''','' + ISNULL(CAST(F_EnergyConfig AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_TemplateConfig AS VARCHAR),''NULL'') + '','' + ISNULL(CAST(F_DeviceConfig AS VARCHAR),''NULL'') + '','''''' + F_GuideMode + '''''''' AS F_Values 
	FROM dbo.tb_A_Plugins
	WHERE F_PluginCode IN
	(
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT 
		3 AS F_RowNum,
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_Function'' AS F_Table,
		''F_FunctionCode,F_FunctionName,F_FunctionTag,F_FunctionTypeNo,F_PluginCode'' AS F_Fields,
		CAST(F_FunctionCode AS VARCHAR) + '','''''' + F_FunctionName + '''''','''''' + F_FunctionTag + '''''','''''' + F_FunctionTypeNo + '''''','' + CAST(F_PluginCode AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_Function
	WHERE F_FunctionCode IN
	(
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT 
		4 AS F_RowNum,
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_PluginEnvVar'' AS F_Table,
		''F_PluginCode,F_EnvVarKey'' AS F_Fields,
		CAST(F_PluginCode AS VARCHAR) + '','''''' + F_EnvVarKey + '''''''' AS F_Values 
	FROM dbo.tb_A_PluginEnvVar
	WHERE F_PluginCode IN
	(
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_PluginCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT
		5 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_FunctionEnvVar'' AS F_Table,
		''F_FunctionCode,F_EnvVarKey,F_EnvVarValue,F_PluginCode'' AS F_Fields,
		CAST(F_FunctionCode AS VARCHAR) + '','''''' + F_EnvVarKey + '''''','''''' + F_EnvVarValue + '''''','' + CAST(F_PluginCode AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_FunctionEnvVar
	WHERE F_FunctionCode IN
	(
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysStr) D
		WHERE C.F_ProjectNo = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_ProjectToMenu C,
			dbo.fun_SplitByComma(@F_SysMenuStr) D
		WHERE C.F_ProjectNo = SUBSTRING(D.F_ObjectID,1,CHARINDEX(''_'',D.F_ObjectID) - 1)
			AND C.F_MenuCode = SUBSTRING(D.F_ObjectID,CHARINDEX(''_'',D.F_ObjectID) + 1,LEN(D.F_ObjectID))
			AND C.F_FunctionCode = B.F_FunctionCode
		UNION
		SELECT DISTINCT
			B.F_FunctionCode
		FROM dbo.tb_A_Function B,
			dbo.tb_A_MobileApp C,
			dbo.fun_SplitByComma(@F_AppStr) D
		WHERE C.F_AppCode = D.F_ObjectID
			AND C.F_FunctionCode = B.F_FunctionCode
	)
	UNION
	SELECT
		6 AS F_RowNum, 
		''SET IDENTITY_INSERT tb_A_Project ON'' AS F_Header,
		''SET IDENTITY_INSERT tb_A_Project OFF'' AS F_Footer,
		''dbo.tb_A_Project'' AS F_Table,
		''F_ProjectNo,F_ProjectName,F_ProjectAbbr,F_ProjectTag,F_ProjectType,F_ProjectIndex,F_ProjectColor,F_ProjectDes,F_ProjectFrame,F_SystemFunction,F_GuideFunction'' AS F_Fields,
		CAST(F_ProjectNo AS VARCHAR) + '','''''' + F_ProjectName + '''''','''''' + F_ProjectAbbr + '''''','''''' + F_ProjectTag + '''''','''''' + F_ProjectType + '''''','' + CAST(F_ProjectIndex AS VARCHAR) + '','''''' + F_ProjectColor + '''''','''''' +  F_ProjectDes + '''''','' +  CAST(F_ProjectFrame AS VARCHAR) + '','' + CAST(ISNULL(F_SystemFunction,'''') AS VARCHAR) + '','' + CAST(ISNULL(F_GuideFunction,'''') AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_Project
	WHERE F_ProjectNo IN
	(
		SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_SysStr)
		UNION
		SELECT DISTINCT SUBSTRING(F_ObjectID,1,CHARINDEX(''_'',F_ObjectID) - 1) FROM dbo.fun_SplitByComma(@F_SysMenuStr)
	)
	UNION
	SELECT
		7 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_ProjectToMenu'' AS F_Table,
		''F_ProjectNo,F_MenuCode,F_MenuTag,F_MenuName,F_MenuAbbr,F_MenuType,F_MenuIndex,F_MenuPosition,F_IsHasChild,F_ParentCode,F_FunctionCode'' AS F_Fields,
		CAST(F_ProjectNo AS VARCHAR) + '','' + CAST(F_MenuCode AS VARCHAR) + '','''''' + F_MenuTag + '''''','''''' + F_MenuName + '''''','''''' + F_MenuAbbr + '''''','''''' + F_MenuType + '''''','' + CAST(F_MenuIndex AS VARCHAR) + '','''''' + F_MenuPosition + '''''','' +  CAST(ISNULL(F_IsHasChild,0) AS VARCHAR) + '','' +  CAST(F_ParentCode AS VARCHAR) + '','' + CAST(ISNULL(F_FunctionCode,'''') AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_ProjectToMenu
	WHERE F_ProjectNo IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_SysStr))
		OR F_MenuCode IN (SELECT SUBSTRING(F_ObjectID,CHARINDEX(''_'',F_ObjectID) + 1,LEN(F_ObjectID)) FROM dbo.fun_SplitByComma(@F_SysMenuStr))
	UNION
	SELECT
		8 AS F_RowNum, 
		'''' AS F_Header,
		'''' AS F_Footer,
		''dbo.tb_A_MobileApp'' AS F_Table,
		''F_AppCode,F_AppName,F_AppTag,F_AppType,F_FunctionCode'' AS F_Fields,
		CAST(F_AppCode AS VARCHAR) + '','''''' + F_AppName + '''''','''''' + F_AppTag + '''''','''''' + F_AppType + '''''','' + CAST(F_FunctionCode AS VARCHAR) AS F_Values 
	FROM dbo.tb_A_MobileApp
	WHERE F_AppCode IN (SELECT F_ObjectID FROM dbo.fun_SplitByComma(@F_AppStr))
	ORDER BY F_RowNum
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_SynValueOperate]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_SynValueOperate]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_SynValueOperate]
	@F_AppCode varchar(16),
	@F_TemplateID varchar(16),
	@F_ValueName varchar(32),
	@F_ValueLabel varchar(32),
	@F_DataType varchar(16),
	@F_DecimalPoint int,
	@F_Unit varchar(16),
	@F_ReadWrite varchar(16),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_TemplateCode bigint
	DECLARE @F_Log varchar(512)
	SELECT @F_TemplateCode = F_TemplateCode FROM tb_A_Template WHERE F_AppCode = @F_AppCode AND F_TemplateID = @F_TemplateID AND F_IsRefer = 1
	IF EXISTS(SELECT F_ValueCode FROM dbo.tb_A_Value WHERE F_TemplateCode = @F_TemplateCode AND F_ValueLabel = @F_ValueLabel AND F_IsRefer = 1)
	BEGIN
		UPDATE dbo.tb_A_Value 
		SET F_ValueName = CASE WHEN F_ValueName = '''' THEN @F_ValueName ELSE F_ValueName END,
			F_DataType  = CASE WHEN F_DataType = '''' THEN @F_DataType ELSE F_DataType END,
			F_DecimalPoint = CASE WHEN F_DataType IS NULL THEN @F_DataType ELSE F_DataType END,
			F_Unit = CASE WHEN F_Unit = '''' THEN @F_Unit ELSE @F_Unit END,
			F_ReadWrite = @F_ReadWrite
		WHERE F_TemplateCode = @F_TemplateCode 
			AND F_ValueLabel=@F_ValueLabel 
			AND F_IsRefer = 1
		SELECT @F_Log = @F_UserID + ''对设备模板（'' + F_TemplateName + ''）同步更新了设备变量（'' + @F_ValueName + ''）。'' FROM dbo.tb_A_Template WHERE F_TemplateCode = @F_TemplateCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
	ELSE
	BEGIN
		INSERT INTO dbo.tb_A_Value
		(
			F_TemplateCode,
			F_ValueCode,
			F_ValueName,
			F_ValueLabel,
			F_ValueProperty,
			F_DataType,
			F_PrecisionRatio,
			F_DecimalPoint,
			F_DefaultValue,
			F_Unit,
			F_ReadWrite,
			F_IsStorage,
			F_IsRefer,
			F_IsDisplay
		)
		VALUES
		(
			@F_TemplateCode,
			dbo.fun_MakeParamSerial(),
			@F_ValueName,
			@F_ValueLabel,
			''1'',
			@F_DataType,
			1,
			@F_DecimalPoint,
			0,
			@F_Unit,
			@F_ReadWrite,
			0,
			1,
			1
		)
		SELECT @F_Log = @F_UserID + ''向设备模板（'' + F_TemplateName + ''）同步添加了设备变量（'' + @F_ValueName + ''）。'' FROM dbo.tb_A_Template WHERE F_TemplateCode = @F_TemplateCode
		EXEC dbo.proc_A_WriteEventLog 4,@F_UserID,@F_IP,@F_Log
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_RoleToFun]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_RoleToFun]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_RoleToFun]
	@F_RoleCode bigint,
	@F_FunctionStr varchar(max),
	@F_UserID varchar(32),
	@F_IP varchar(16)
AS
BEGIN
	DECLARE @F_Log varchar(512)
	
	DELETE FROM dbo.tb_A_RoleToMenu WHERE F_RoleCode = @F_RoleCode
	INSERT INTO dbo.tb_A_RoleToMenu SELECT @F_RoleCode,SUBSTRING(F_ObjectID,1,CHARINDEX(''_'',F_ObjectID,1)-1),SUBSTRING(F_ObjectID,CHARINDEX(''_'',F_ObjectID,1)+1,LEN(F_ObjectID)) FROM dbo.fun_SplitByComma(@F_FunctionStr)
	SELECT @F_Log = @F_UserID + ''更新了角色（'' + F_RoleName + ''）的功能模块权限。'' FROM dbo.tb_A_Role WHERE F_RoleCode = @F_RoleCode
	EXEC dbo.proc_A_WriteEventLog 8,@F_UserID,@F_IP,@F_Log
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_GetDictTreePropertyList]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_GetDictTreePropertyList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_GetDictTreePropertyList]
	@F_DictTreeNo int,
	@F_GroupID bigint
AS
BEGIN
	SELECT
		T.F_OrderNum as F_RowNum,
		A.F_PropertyID,
		A.F_PropertyName,
		A.F_PropertyIdentifier,
		A.F_PropertyUnit,
		A.F_GroupTypeID,
		CASE A.F_GroupTypeID WHEN ''A'' THEN ''静态属性'' WHEN ''B'' THEN ''动态属性'' END AS F_GroupTypeName,
		A.F_PropertyTypeID,
		D.F_PropertyTypeName,
		A.F_DictionaryType,
		A.F_DictionaryID,
		dbo.fun_GetDictionaryName(A.F_DictionaryType,A.F_DictionaryID) AS F_DictionaryName,
		CASE WHEN A.F_DefaultValue IS NULL THEN '''' ELSE A.F_DefaultValue END AS F_DefaultValue,
		CASE A.F_IsOnlyRead WHEN 1 THEN ''是'' ELSE ''否'' END AS F_IsOnlyRead,
		A.F_RegularFormula,
		T.F_DecimalDigits,
		CASE T.F_IsNull WHEN 1 THEN ''是'' ELSE ''否'' END AS F_IsNull,
		T.F_Examples
	FROM dbo.tb_B_DictTreeProperty T,
		dbo.tb_B_ObjectProperty A,
		dbo.tb_B_PropertyType D
	WHERE T.F_DictTreeNo = @F_DictTreeNo
		AND T.F_GroupID = @F_GroupID
		AND T.F_PropertyID = A.F_PropertyID
		AND A.F_PropertyTypeID = D.F_PropertyTypeID
	ORDER BY T.F_OrderNum
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_B_GetObjectPropertyList]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_B_GetObjectPropertyList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_B_GetObjectPropertyList]
	@F_ObjectTypeID int,
	@F_GroupID bigint,
	@F_Keyword varchar(32)
AS
BEGIN
	IF @F_Keyword = ''''
	BEGIN
		SELECT
			ROW_NUMBER()OVER(ORDER BY A.F_ObjectTypeID DESC,A.F_PropertyID) as F_RowNum,
			A.F_PropertyID,
			A.F_PropertyName,
			A.F_PropertyIdentifier,
			A.F_PropertyUnit,
			A.F_ObjectTypeID,
			C.F_ObjectTypeName,
			A.F_GroupTypeID,
			CASE A.F_GroupTypeID WHEN ''A'' THEN ''静态属性'' WHEN ''B'' THEN ''动态属性'' END AS F_GroupTypeName,
			A.F_PropertyTypeID,
			D.F_PropertyTypeName,
			A.F_DictionaryType,
			A.F_DictionaryID,
			A.F_DictionaryKey,
			dbo.fun_GetDictionaryName(A.F_DictionaryType,A.F_DictionaryID) AS F_DictionaryName,
			CASE WHEN A.F_DefaultValue IS NULL THEN '''' ELSE A.F_DefaultValue END AS F_DefaultValue,
			CASE A.F_IsOnlyRead WHEN 1 THEN ''是'' ELSE ''否'' END AS F_IsOnlyRead,
			A.F_RegularFormula,
			A.F_Memo,
			dbo.fun_PropertyIsAdded(@F_GroupID,A.F_PropertyID) AS F_AddButton
		FROM dbo.tb_B_ObjectProperty A 
			LEFT OUTER JOIN dbo.tb_B_ObjectType C
				ON A.F_ObjectTypeID = C.F_ObjectTypeID,
			dbo.tb_B_PropertyType D
		WHERE (A.F_ObjectTypeID = @F_ObjectTypeID OR A.F_ObjectTypeID IS NULL)
			AND A.F_PropertyTypeID = D.F_PropertyTypeID
		ORDER BY A.F_ObjectTypeID DESC,A.F_PropertyID
	END
	ELSE
	BEGIN
		SELECT
			ROW_NUMBER()OVER(ORDER BY A.F_ObjectTypeID DESC,A.F_PropertyID) as F_RowNum,
			A.F_PropertyID,
			A.F_PropertyName,
			A.F_PropertyIdentifier,
			A.F_PropertyUnit,
			A.F_ObjectTypeID,
			C.F_ObjectTypeName,
			A.F_GroupTypeID,
			CASE A.F_GroupTypeID WHEN ''A'' THEN ''静态属性'' WHEN ''B'' THEN ''动态属性'' END AS F_GroupTypeName,
			A.F_PropertyTypeID,
			D.F_PropertyTypeName,
			A.F_DictionaryType,
			A.F_DictionaryID,
			A.F_DictionaryKey,
			dbo.fun_GetDictionaryName(A.F_DictionaryType,A.F_DictionaryID) AS F_DictionaryName,
			CASE WHEN A.F_DefaultValue IS NULL THEN '''' ELSE A.F_DefaultValue END AS F_DefaultValue,
			CASE A.F_IsOnlyRead WHEN 1 THEN ''是'' ELSE ''否'' END AS F_IsOnlyRead,
			A.F_RegularFormula,
			A.F_Memo,
			dbo.fun_PropertyIsAdded(@F_GroupID,A.F_PropertyID) AS F_AddButton
		FROM dbo.tb_B_ObjectProperty A
			LEFT OUTER JOIN dbo.tb_B_ObjectType C
				ON A.F_ObjectTypeID = C.F_ObjectTypeID,
			dbo.tb_B_PropertyType D
		WHERE (A.F_ObjectTypeID = @F_ObjectTypeID OR A.F_ObjectTypeID IS NULL)
			AND A.F_PropertyTypeID = D.F_PropertyTypeID
			AND (A.F_PropertyName LIKE ''%'' + @F_Keyword + ''%'' OR A.F_PropertyIdentifier LIKE ''%'' + @F_Keyword + ''%'')
		ORDER BY A.F_ObjectTypeID DESC,A.F_PropertyID
	END
END
' 
END
GO
/****** Object:  StoredProcedure [dbo].[proc_A_GetUserProjectMenu]    Script Date: 11/09/2020 15:24:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[proc_A_GetUserProjectMenu]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[proc_A_GetUserProjectMenu]
	@F_ProjectNo bigint,
	@F_UserCode bigint,
	@F_ParentCode varchar(32),
	@F_MenuType char(1)
AS
BEGIN
	DECLARE @F_UserType char(1)
	SELECT @F_UserType = F_UserType FROM dbo.tb_A_LoginUser WHERE F_UserCode = @F_UserCode
	IF @F_MenuType = ''1''
	BEGIN
		IF @F_UserType = ''1'' OR @F_UserType = ''2''
		BEGIN
			SELECT 
				A.F_MenuCode,
				A.F_MenuTag,
				A.F_MenuName,
				A.F_MenuAbbr,
				A.F_MenuIndex,
				A.F_MenuPosition,
				A.F_IsHasChild,
				A.F_FunctionCode,
				dbo.fun_GetFunctionEnvVar(A.F_FunctionCode) as F_EnvVar,
				ISNULL(B.F_FunctionTypeNo,'''') AS F_FunctionTypeNo,
				C.F_PluginCode,
				C.F_PluginTag,
				C.F_GuideMode,
				C.F_IsConfig,
				C.F_ConfType,
				C.F_EnergyConfig,
				C.F_TemplateConfig,
				C.F_DeviceConfig,
				dbo.fun_GetFunctionToTree(C.F_PluginCode,A.F_FunctionCode) AS F_TreeNo
			FROM dbo.tb_A_ProjectToMenu A 
				LEFT OUTER JOIN dbo.tb_A_Function B ON A.F_FunctionCode = B.F_FunctionCode 
				LEFT OUTER JOIN dbo.tb_A_Plugins C ON B.F_PluginCode = C.F_PluginCode 
			WHERE A.F_ProjectNo = @F_ProjectNo
				AND A.F_MenuType = ''1'' 
			ORDER BY A.F_MenuIndex
		END
		ELSE
		BEGIN
			SELECT 
				A.F_MenuCode,
				A.F_MenuTag,
				A.F_MenuName,
				A.F_MenuAbbr,
				A.F_MenuIndex,
				A.F_MenuPosition,
				A.F_IsHasChild,
				A.F_FunctionCode,
				dbo.fun_GetFunctionEnvVar(A.F_FunctionCode) as F_EnvVar,
				ISNULL(B.F_FunctionTypeNo,'''') AS F_FunctionTypeNo,
				C.F_PluginCode,
				C.F_PluginTag,
				C.F_GuideMode,
				C.F_IsConfig,
				C.F_ConfType,
				C.F_EnergyConfig,
				C.F_TemplateConfig,
				C.F_DeviceConfig,
				dbo.fun_GetFunctionToTree(C.F_PluginCode,A.F_FunctionCode) AS F_TreeNo
			FROM dbo.tb_A_LoginUser D,
				dbo.tb_A_RoleToMenu E,
				dbo.tb_A_ProjectToMenu A 
				LEFT OUTER JOIN dbo.tb_A_Function B ON A.F_FunctionCode = B.F_FunctionCode 
				LEFT OUTER JOIN dbo.tb_A_Plugins C ON B.F_PluginCode = C.F_PluginCode 
			WHERE A.F_ProjectNo = @F_ProjectNo
				AND A.F_MenuType = ''1'' 
				AND D.F_UserCode = @F_UserCode
				AND D.F_RoleCode = E.F_RoleCode
				AND E.F_ProjectNo = A.F_ProjectNo
				AND E.F_MenuCode = A.F_MenuCode
			ORDER BY A.F_MenuIndex
		END
	END
	ELSE
	BEGIN
		IF @F_UserType = ''1'' OR @F_UserType = ''2''
		BEGIN
			IF @F_ParentCode = ''''
			BEGIN
				SELECT
					A.F_ParentCode,
					A.F_MenuCode,
					A.F_MenuTag,
					A.F_MenuName,
					A.F_MenuAbbr,
					A.F_MenuIndex,
					A.F_MenuPosition,
					A.F_IsHasChild,
					A.F_FunctionCode,
					dbo.fun_GetFunctionEnvVar(A.F_FunctionCode) as F_EnvVar,
					ISNULL(B.F_FunctionTypeNo,'''') AS F_FunctionTypeNo,
					C.F_PluginCode,
					C.F_PluginTag,
					C.F_GuideMode,
					C.F_IsConfig,
					C.F_ConfType,
					C.F_EnergyConfig,
					C.F_TemplateConfig,
					C.F_DeviceConfig,
					dbo.fun_GetFunctionToTree(C.F_PluginCode,A.F_FunctionCode) AS F_TreeNo 
				FROM dbo.tb_A_ProjectToMenu A 
					LEFT OUTER JOIN dbo.tb_A_Function B ON A.F_FunctionCode = B.F_FunctionCode 
					LEFT OUTER JOIN dbo.tb_A_Plugins C ON B.F_PluginCode = C.F_PluginCode 
				WHERE A.F_ProjectNo = @F_ProjectNo
					AND A.F_MenuType = ''2'' 
				ORDER BY A.F_ParentCode,A.F_MenuIndex
			END
			ELSE
			BEGIN
				SELECT
					A.F_ParentCode,
					A.F_MenuCode,
					A.F_MenuTag,
					A.F_MenuName,
					A.F_MenuAbbr,
					A.F_MenuIndex,
					A.F_MenuPosition,
					A.F_IsHasChild,
					A.F_FunctionCode,
					dbo.fun_GetFunctionEnvVar(A.F_FunctionCode) as F_EnvVar,
					ISNULL(B.F_FunctionTypeNo,'''') AS F_FunctionTypeNo,
					C.F_PluginCode,
					C.F_PluginTag,
					C.F_GuideMode,
					C.F_IsConfig,
					C.F_ConfType,
					C.F_EnergyConfig,
					C.F_TemplateConfig,
					C.F_DeviceConfig,
					dbo.fun_GetFunctionToTree(C.F_PluginCode,A.F_FunctionCode) AS F_TreeNo 
				FROM dbo.tb_A_ProjectToMenu A 
					LEFT OUTER JOIN dbo.tb_A_Function B ON A.F_FunctionCode = B.F_FunctionCode 
					LEFT OUTER JOIN dbo.tb_A_Plugins C ON B.F_PluginCode = C.F_PluginCode 
				WHERE A.F_ProjectNo = @F_ProjectNo 
					AND A.F_ParentCode = @F_ParentCode
					AND A.F_MenuType = ''2'' 
				ORDER BY A.F_ParentCode,A.F_MenuIndex
			END
		END
		ELSE
		BEGIN
			IF @F_ParentCode = ''''
			BEGIN
				SELECT 
					A.F_ParentCode,
					A.F_MenuCode,
					A.F_MenuTag,
					A.F_MenuName,
					A.F_MenuAbbr,
					A.F_MenuIndex,
					A.F_MenuPosition,
					A.F_IsHasChild,
					A.F_FunctionCode,
					dbo.fun_GetFunctionEnvVar(A.F_FunctionCode) as F_EnvVar,
					ISNULL(B.F_FunctionTypeNo,'''') AS F_FunctionTypeNo,
					C.F_PluginCode,
					C.F_PluginTag,
					C.F_GuideMode,
					C.F_IsConfig,
					C.F_ConfType,
					C.F_EnergyConfig,
					C.F_TemplateConfig,
					C.F_DeviceConfig,
					dbo.fun_GetFunctionToTree(C.F_PluginCode,A.F_FunctionCode) AS F_TreeNo 
				FROM dbo.tb_A_LoginUser D,
					dbo.tb_A_RoleToMenu E,
					dbo.tb_A_ProjectToMenu A 
					LEFT OUTER JOIN dbo.tb_A_Function B ON A.F_FunctionCode = B.F_FunctionCode 
					LEFT OUTER JOIN dbo.tb_A_Plugins C ON B.F_PluginCode = C.F_PluginCode 
				WHERE A.F_ProjectNo = @F_ProjectNo
					AND A.F_MenuType = ''2'' 
					AND D.F_UserCode = @F_UserCode
					AND D.F_RoleCode = E.F_RoleCode
					AND E.F_ProjectNo = A.F_ProjectNo
					AND E.F_MenuCode = A.F_MenuCode
				ORDER BY A.F_ParentCode,A.F_MenuIndex
			END
			ELSE
			BEGIN
				SELECT 
					A.F_ParentCode,
					A.F_MenuCode,
					A.F_MenuTag,
					A.F_MenuName,
					A.F_MenuAbbr,
					A.F_MenuIndex,
					A.F_MenuPosition,
					A.F_IsHasChild,
					A.F_FunctionCode,
					dbo.fun_GetFunctionEnvVar(A.F_FunctionCode) as F_EnvVar,
					ISNULL(B.F_FunctionTypeNo,'''') AS F_FunctionTypeNo,
					C.F_PluginCode,
					C.F_PluginTag,
					C.F_GuideMode,
					C.F_IsConfig,
					C.F_ConfType,
					C.F_EnergyConfig,
					C.F_TemplateConfig,
					C.F_DeviceConfig,
					dbo.fun_GetFunctionToTree(C.F_PluginCode,A.F_FunctionCode) AS F_TreeNo 
				FROM dbo.tb_A_LoginUser D,
					dbo.tb_A_RoleToMenu E,
					dbo.tb_A_ProjectToMenu A 
					LEFT OUTER JOIN dbo.tb_A_Function B ON A.F_FunctionCode = B.F_FunctionCode 
					LEFT OUTER JOIN dbo.tb_A_Plugins C ON B.F_PluginCode = C.F_PluginCode 
				WHERE A.F_ProjectNo = @F_ProjectNo
					AND A.F_ParentCode = @F_ParentCode
					AND A.F_MenuType = ''2'' 
					AND D.F_UserCode = @F_UserCode
					AND D.F_RoleCode = E.F_RoleCode
					AND E.F_ProjectNo = A.F_ProjectNo
					AND E.F_MenuCode = A.F_MenuCode
				ORDER BY A.F_ParentCode,A.F_MenuIndex
			END
		END
	END
END
' 
END
GO
/****** Object:  Default [DF_tb_A_EmailInfo_F_MakeTime]    Script Date: 11/09/2020 15:24:00 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_tb_A_EmailInfo_F_MakeTime]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_EmailInfo]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_tb_A_EmailInfo_F_MakeTime]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[tb_A_EmailInfo] ADD  CONSTRAINT [DF_tb_A_EmailInfo_F_MakeTime]  DEFAULT (getdate()) FOR [F_MakeTime]
END


End
GO
/****** Object:  Default [DF_tb_A_Project_F_ProjectFrame]    Script Date: 11/09/2020 15:24:00 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_tb_A_Project_F_ProjectFrame]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_Project]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_tb_A_Project_F_ProjectFrame]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[tb_A_Project] ADD  CONSTRAINT [DF_tb_A_Project_F_ProjectFrame]  DEFAULT ((3)) FOR [F_ProjectFrame]
END


End
GO
/****** Object:  Default [DF_tb_C_ExceptionData_F_SystemDate]    Script Date: 11/09/2020 15:24:00 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_tb_C_ExceptionData_F_SystemDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_C_ExceptionData]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_tb_C_ExceptionData_F_SystemDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[tb_C_ExceptionData] ADD  CONSTRAINT [DF_tb_C_ExceptionData_F_SystemDate]  DEFAULT (getdate()) FOR [F_SystemDate]
END


End
GO
/****** Object:  Default [DF_tb_C_LatelyData_F_SystemDate]    Script Date: 11/09/2020 15:24:00 ******/
IF Not EXISTS (SELECT * FROM sys.default_constraints WHERE object_id = OBJECT_ID(N'[dbo].[DF_tb_C_LatelyData_F_SystemDate]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_C_LatelyData]'))
Begin
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_tb_C_LatelyData_F_SystemDate]') AND type = 'D')
BEGIN
ALTER TABLE [dbo].[tb_C_LatelyData] ADD  CONSTRAINT [DF_tb_C_LatelyData_F_SystemDate]  DEFAULT (getdate()) FOR [F_SystemDate]
END


End
GO
/****** Object:  ForeignKey [FK_tb_A_Function_tb_A_Plugins]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_Function_tb_A_Plugins]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_Function]'))
ALTER TABLE [dbo].[tb_A_Function]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_Function_tb_A_Plugins] FOREIGN KEY([F_PluginCode])
REFERENCES [dbo].[tb_A_Plugins] ([F_PluginCode])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_Function_tb_A_Plugins]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_Function]'))
ALTER TABLE [dbo].[tb_A_Function] CHECK CONSTRAINT [FK_tb_A_Function_tb_A_Plugins]
GO
/****** Object:  ForeignKey [FK_tb_A_FunctionEnvVar_tb_A_PluginEnvVar]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_FunctionEnvVar_tb_A_PluginEnvVar]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_FunctionEnvVar]'))
ALTER TABLE [dbo].[tb_A_FunctionEnvVar]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_FunctionEnvVar_tb_A_PluginEnvVar] FOREIGN KEY([F_PluginCode], [F_EnvVarKey])
REFERENCES [dbo].[tb_A_PluginEnvVar] ([F_PluginCode], [F_EnvVarKey])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_FunctionEnvVar_tb_A_PluginEnvVar]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_FunctionEnvVar]'))
ALTER TABLE [dbo].[tb_A_FunctionEnvVar] CHECK CONSTRAINT [FK_tb_A_FunctionEnvVar_tb_A_PluginEnvVar]
GO
/****** Object:  ForeignKey [FK_tb_A_PluginEnvVar_tb_A_Plugins]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_PluginEnvVar_tb_A_Plugins]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_PluginEnvVar]'))
ALTER TABLE [dbo].[tb_A_PluginEnvVar]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_PluginEnvVar_tb_A_Plugins] FOREIGN KEY([F_PluginCode])
REFERENCES [dbo].[tb_A_Plugins] ([F_PluginCode])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_PluginEnvVar_tb_A_Plugins]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_PluginEnvVar]'))
ALTER TABLE [dbo].[tb_A_PluginEnvVar] CHECK CONSTRAINT [FK_tb_A_PluginEnvVar_tb_A_Plugins]
GO
/****** Object:  ForeignKey [FK_tb_A_ProjectToHelp_tb_A_Project]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_ProjectToHelp_tb_A_Project]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToHelp]'))
ALTER TABLE [dbo].[tb_A_ProjectToHelp]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_ProjectToHelp_tb_A_Project] FOREIGN KEY([F_ProjectNo])
REFERENCES [dbo].[tb_A_Project] ([F_ProjectNo])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_ProjectToHelp_tb_A_Project]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToHelp]'))
ALTER TABLE [dbo].[tb_A_ProjectToHelp] CHECK CONSTRAINT [FK_tb_A_ProjectToHelp_tb_A_Project]
GO
/****** Object:  ForeignKey [FK_tb_A_ProjectToMenu_tb_A_Project]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_ProjectToMenu_tb_A_Project]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToMenu]'))
ALTER TABLE [dbo].[tb_A_ProjectToMenu]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_ProjectToMenu_tb_A_Project] FOREIGN KEY([F_ProjectNo])
REFERENCES [dbo].[tb_A_Project] ([F_ProjectNo])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_ProjectToMenu_tb_A_Project]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToMenu]'))
ALTER TABLE [dbo].[tb_A_ProjectToMenu] CHECK CONSTRAINT [FK_tb_A_ProjectToMenu_tb_A_Project]
GO
/****** Object:  ForeignKey [FK_tb_A_ProjectToTree_tb_A_Project]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_ProjectToTree_tb_A_Project]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToTree]'))
ALTER TABLE [dbo].[tb_A_ProjectToTree]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_ProjectToTree_tb_A_Project] FOREIGN KEY([F_ProjectNo])
REFERENCES [dbo].[tb_A_Project] ([F_ProjectNo])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_ProjectToTree_tb_A_Project]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToTree]'))
ALTER TABLE [dbo].[tb_A_ProjectToTree] CHECK CONSTRAINT [FK_tb_A_ProjectToTree_tb_A_Project]
GO
/****** Object:  ForeignKey [FK_tb_A_ProjectToTree_tb_B_EntityTreeModel]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_ProjectToTree_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToTree]'))
ALTER TABLE [dbo].[tb_A_ProjectToTree]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_ProjectToTree_tb_B_EntityTreeModel] FOREIGN KEY([F_EntityTreeNo], [F_EntityID])
REFERENCES [dbo].[tb_B_EntityTreeModel] ([F_EntityTreeNo], [F_EntityID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_ProjectToTree_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_ProjectToTree]'))
ALTER TABLE [dbo].[tb_A_ProjectToTree] CHECK CONSTRAINT [FK_tb_A_ProjectToTree_tb_B_EntityTreeModel]
GO
/****** Object:  ForeignKey [FK_tb_A_RoleToApp_tb_A_Role]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToApp_tb_A_Role]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToApp]'))
ALTER TABLE [dbo].[tb_A_RoleToApp]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_RoleToApp_tb_A_Role] FOREIGN KEY([F_RoleCode])
REFERENCES [dbo].[tb_A_Role] ([F_RoleCode])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToApp_tb_A_Role]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToApp]'))
ALTER TABLE [dbo].[tb_A_RoleToApp] CHECK CONSTRAINT [FK_tb_A_RoleToApp_tb_A_Role]
GO
/****** Object:  ForeignKey [FK_tb_A_RoleToApp_tb_A_RoleToApp]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToApp_tb_A_RoleToApp]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToApp]'))
ALTER TABLE [dbo].[tb_A_RoleToApp]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_RoleToApp_tb_A_RoleToApp] FOREIGN KEY([F_RoleCode], [F_AppNo])
REFERENCES [dbo].[tb_A_RoleToApp] ([F_RoleCode], [F_AppNo])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToApp_tb_A_RoleToApp]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToApp]'))
ALTER TABLE [dbo].[tb_A_RoleToApp] CHECK CONSTRAINT [FK_tb_A_RoleToApp_tb_A_RoleToApp]
GO
/****** Object:  ForeignKey [FK_tb_A_RoleToMenu_tb_A_ProjectToMenu]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToMenu_tb_A_ProjectToMenu]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToMenu]'))
ALTER TABLE [dbo].[tb_A_RoleToMenu]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_RoleToMenu_tb_A_ProjectToMenu] FOREIGN KEY([F_ProjectNo], [F_MenuCode])
REFERENCES [dbo].[tb_A_ProjectToMenu] ([F_ProjectNo], [F_MenuCode])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToMenu_tb_A_ProjectToMenu]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToMenu]'))
ALTER TABLE [dbo].[tb_A_RoleToMenu] CHECK CONSTRAINT [FK_tb_A_RoleToMenu_tb_A_ProjectToMenu]
GO
/****** Object:  ForeignKey [FK_tb_A_RoleToMenu_tb_A_Role]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToMenu_tb_A_Role]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToMenu]'))
ALTER TABLE [dbo].[tb_A_RoleToMenu]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_RoleToMenu_tb_A_Role] FOREIGN KEY([F_RoleCode])
REFERENCES [dbo].[tb_A_Role] ([F_RoleCode])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToMenu_tb_A_Role]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToMenu]'))
ALTER TABLE [dbo].[tb_A_RoleToMenu] CHECK CONSTRAINT [FK_tb_A_RoleToMenu_tb_A_Role]
GO
/****** Object:  ForeignKey [FK_tb_A_RoleToTree_tb_A_Role]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToTree_tb_A_Role]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToTree]'))
ALTER TABLE [dbo].[tb_A_RoleToTree]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_RoleToTree_tb_A_Role] FOREIGN KEY([F_RoleCode])
REFERENCES [dbo].[tb_A_Role] ([F_RoleCode])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToTree_tb_A_Role]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToTree]'))
ALTER TABLE [dbo].[tb_A_RoleToTree] CHECK CONSTRAINT [FK_tb_A_RoleToTree_tb_A_Role]
GO
/****** Object:  ForeignKey [FK_tb_A_RoleToTree_tb_B_EntityTreeModel]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToTree_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToTree]'))
ALTER TABLE [dbo].[tb_A_RoleToTree]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_RoleToTree_tb_B_EntityTreeModel] FOREIGN KEY([F_EntityTreeNo], [F_EntityID])
REFERENCES [dbo].[tb_B_EntityTreeModel] ([F_EntityTreeNo], [F_EntityID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_RoleToTree_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_RoleToTree]'))
ALTER TABLE [dbo].[tb_A_RoleToTree] CHECK CONSTRAINT [FK_tb_A_RoleToTree_tb_B_EntityTreeModel]
GO
/****** Object:  ForeignKey [FK_tb_A_Value_tb_A_Template]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_Value_tb_A_Template]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_Value]'))
ALTER TABLE [dbo].[tb_A_Value]  WITH CHECK ADD  CONSTRAINT [FK_tb_A_Value_tb_A_Template] FOREIGN KEY([F_TemplateCode])
REFERENCES [dbo].[tb_A_Template] ([F_TemplateCode])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_A_Value_tb_A_Template]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_A_Value]'))
ALTER TABLE [dbo].[tb_A_Value] CHECK CONSTRAINT [FK_tb_A_Value_tb_A_Template]
GO
/****** Object:  ForeignKey [FK_tb_B_DictTreeModel_tb_B_DictTreeType]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_DictTreeModel_tb_B_DictTreeType]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeModel]'))
ALTER TABLE [dbo].[tb_B_DictTreeModel]  WITH CHECK ADD  CONSTRAINT [FK_tb_B_DictTreeModel_tb_B_DictTreeType] FOREIGN KEY([F_DictTreeNo])
REFERENCES [dbo].[tb_B_DictTreeType] ([F_DictTreeNo])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_DictTreeModel_tb_B_DictTreeType]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeModel]'))
ALTER TABLE [dbo].[tb_B_DictTreeModel] CHECK CONSTRAINT [FK_tb_B_DictTreeModel_tb_B_DictTreeType]
GO
/****** Object:  ForeignKey [FK_tb_B_DictTreeModel_tb_B_ObjectType]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_DictTreeModel_tb_B_ObjectType]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeModel]'))
ALTER TABLE [dbo].[tb_B_DictTreeModel]  WITH CHECK ADD  CONSTRAINT [FK_tb_B_DictTreeModel_tb_B_ObjectType] FOREIGN KEY([F_ObjectTypeID])
REFERENCES [dbo].[tb_B_ObjectType] ([F_ObjectTypeID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_DictTreeModel_tb_B_ObjectType]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeModel]'))
ALTER TABLE [dbo].[tb_B_DictTreeModel] CHECK CONSTRAINT [FK_tb_B_DictTreeModel_tb_B_ObjectType]
GO
/****** Object:  ForeignKey [FK_tb_B_DictTreeProperty_tb_B_DictTreeModel]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_DictTreeProperty_tb_B_DictTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeProperty]'))
ALTER TABLE [dbo].[tb_B_DictTreeProperty]  WITH CHECK ADD  CONSTRAINT [FK_tb_B_DictTreeProperty_tb_B_DictTreeModel] FOREIGN KEY([F_DictTreeNo], [F_GroupID])
REFERENCES [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_DictTreeProperty_tb_B_DictTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeProperty]'))
ALTER TABLE [dbo].[tb_B_DictTreeProperty] CHECK CONSTRAINT [FK_tb_B_DictTreeProperty_tb_B_DictTreeModel]
GO
/****** Object:  ForeignKey [FK_tb_B_DictTreeProperty_tb_B_ObjectProperty]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_DictTreeProperty_tb_B_ObjectProperty]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeProperty]'))
ALTER TABLE [dbo].[tb_B_DictTreeProperty]  WITH CHECK ADD  CONSTRAINT [FK_tb_B_DictTreeProperty_tb_B_ObjectProperty] FOREIGN KEY([F_PropertyID])
REFERENCES [dbo].[tb_B_ObjectProperty] ([F_PropertyID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_DictTreeProperty_tb_B_ObjectProperty]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_DictTreeProperty]'))
ALTER TABLE [dbo].[tb_B_DictTreeProperty] CHECK CONSTRAINT [FK_tb_B_DictTreeProperty_tb_B_ObjectProperty]
GO
/****** Object:  ForeignKey [FK_tb_B_EntityTreeMetering_tb_B_EntityTreeModel]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_EntityTreeMetering_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeMetering]'))
ALTER TABLE [dbo].[tb_B_EntityTreeMetering]  WITH CHECK ADD  CONSTRAINT [FK_tb_B_EntityTreeMetering_tb_B_EntityTreeModel] FOREIGN KEY([F_EntityTreeNo], [F_EntityID])
REFERENCES [dbo].[tb_B_EntityTreeModel] ([F_EntityTreeNo], [F_EntityID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_EntityTreeMetering_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeMetering]'))
ALTER TABLE [dbo].[tb_B_EntityTreeMetering] CHECK CONSTRAINT [FK_tb_B_EntityTreeMetering_tb_B_EntityTreeModel]
GO
/****** Object:  ForeignKey [FK_tb_B_EntityTreeModel_tb_B_EntityTreeModel]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_EntityTreeModel_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeModel]'))
ALTER TABLE [dbo].[tb_B_EntityTreeModel]  WITH CHECK ADD  CONSTRAINT [FK_tb_B_EntityTreeModel_tb_B_EntityTreeModel] FOREIGN KEY([F_EntityTreeNo], [F_EntityID])
REFERENCES [dbo].[tb_B_EntityTreeModel] ([F_EntityTreeNo], [F_EntityID])
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_EntityTreeModel_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeModel]'))
ALTER TABLE [dbo].[tb_B_EntityTreeModel] CHECK CONSTRAINT [FK_tb_B_EntityTreeModel_tb_B_EntityTreeModel]
GO
/****** Object:  ForeignKey [FK_tb_B_EntityTreeModel_tb_B_EntityTreeType]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_EntityTreeModel_tb_B_EntityTreeType]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeModel]'))
ALTER TABLE [dbo].[tb_B_EntityTreeModel]  WITH CHECK ADD  CONSTRAINT [FK_tb_B_EntityTreeModel_tb_B_EntityTreeType] FOREIGN KEY([F_EntityTreeNo])
REFERENCES [dbo].[tb_B_EntityTreeType] ([F_EntityTreeNo])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_EntityTreeModel_tb_B_EntityTreeType]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeModel]'))
ALTER TABLE [dbo].[tb_B_EntityTreeModel] CHECK CONSTRAINT [FK_tb_B_EntityTreeModel_tb_B_EntityTreeType]
GO
/****** Object:  ForeignKey [FK_tb_B_EntityTreeProperty_tb_B_EntityTreeModel]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_EntityTreeProperty_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeProperty]'))
ALTER TABLE [dbo].[tb_B_EntityTreeProperty]  WITH CHECK ADD  CONSTRAINT [FK_tb_B_EntityTreeProperty_tb_B_EntityTreeModel] FOREIGN KEY([F_EntityTreeNo], [F_EntityID])
REFERENCES [dbo].[tb_B_EntityTreeModel] ([F_EntityTreeNo], [F_EntityID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_EntityTreeProperty_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeProperty]'))
ALTER TABLE [dbo].[tb_B_EntityTreeProperty] CHECK CONSTRAINT [FK_tb_B_EntityTreeProperty_tb_B_EntityTreeModel]
GO
/****** Object:  ForeignKey [FK_tb_B_EntityTreeToDevice_tb_B_EntityTreeModel]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_EntityTreeToDevice_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeToDevice]'))
ALTER TABLE [dbo].[tb_B_EntityTreeToDevice]  WITH CHECK ADD  CONSTRAINT [FK_tb_B_EntityTreeToDevice_tb_B_EntityTreeModel] FOREIGN KEY([F_EntityTreeNo], [F_EntityID])
REFERENCES [dbo].[tb_B_EntityTreeModel] ([F_EntityTreeNo], [F_EntityID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_EntityTreeToDevice_tb_B_EntityTreeModel]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_EntityTreeToDevice]'))
ALTER TABLE [dbo].[tb_B_EntityTreeToDevice] CHECK CONSTRAINT [FK_tb_B_EntityTreeToDevice_tb_B_EntityTreeModel]
GO
/****** Object:  ForeignKey [FK_tb_B_KeyValueList_tb_B_KeyValueTable]    Script Date: 11/09/2020 15:24:00 ******/
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_KeyValueList_tb_B_KeyValueTable]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_KeyValueList]'))
ALTER TABLE [dbo].[tb_B_KeyValueList]  WITH CHECK ADD  CONSTRAINT [FK_tb_B_KeyValueList_tb_B_KeyValueTable] FOREIGN KEY([F_DictionaryID])
REFERENCES [dbo].[tb_B_KeyValueTable] ([F_DictionaryID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_tb_B_KeyValueList_tb_B_KeyValueTable]') AND parent_object_id = OBJECT_ID(N'[dbo].[tb_B_KeyValueList]'))
ALTER TABLE [dbo].[tb_B_KeyValueList] CHECK CONSTRAINT [FK_tb_B_KeyValueList_tb_B_KeyValueTable]
GO

/****** Object:  Table [dbo].[tb_B_DataType]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_B_DataType] ([F_DataTypeID], [F_DataTypeName]) VALUES (N'bigint', N'长整型')
INSERT [dbo].[tb_B_DataType] ([F_DataTypeID], [F_DataTypeName]) VALUES (N'bit', N'布尔型')
INSERT [dbo].[tb_B_DataType] ([F_DataTypeID], [F_DataTypeName]) VALUES (N'char', N'字符类型')
INSERT [dbo].[tb_B_DataType] ([F_DataTypeID], [F_DataTypeName]) VALUES (N'datetime', N'日期类型')
INSERT [dbo].[tb_B_DataType] ([F_DataTypeID], [F_DataTypeName]) VALUES (N'int', N'整型')
INSERT [dbo].[tb_B_DataType] ([F_DataTypeID], [F_DataTypeName]) VALUES (N'money', N'货币类型')
INSERT [dbo].[tb_B_DataType] ([F_DataTypeID], [F_DataTypeName]) VALUES (N'numeric', N'精确数值类型')
INSERT [dbo].[tb_B_DataType] ([F_DataTypeID], [F_DataTypeName]) VALUES (N'text', N'文本类型')
INSERT [dbo].[tb_B_DataType] ([F_DataTypeID], [F_DataTypeName]) VALUES (N'time', N'时间类型')
INSERT [dbo].[tb_B_DataType] ([F_DataTypeID], [F_DataTypeName]) VALUES (N'varchar', N'字符串类型')
/****** Object:  Table [dbo].[tb_A_LogType]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (1, N'系统服务')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (2, N'用户访问')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (3, N'接口交互')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (4, N'工程管理')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (5, N'设备关系')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (6, N'业务模型')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (7, N'账户管理')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (8, N'角色管理')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (9, N'代理应用')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (10, N'时间属性')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (11, N'微信管理')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (12, N'人员关系')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (13, N'计划任务')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (14, N'访问安全')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (15, N'数据备份')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (16, N'存储优化')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (17, N'数据体检')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (18, N'文档资料')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (19, N'日常管理')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (20, N'移动应用')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (21, N'派单管理')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (22, N'电子邮件')
INSERT [dbo].[tb_A_LogType] ([F_TypeNo], [F_TypeName]) VALUES (23, N'报警管理')
/****** Object:  Table [dbo].[tb_A_EventType]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_A_EventType] ([F_TypeNo], [F_TypeName]) VALUES (1, N'通讯异常')
INSERT [dbo].[tb_A_EventType] ([F_TypeNo], [F_TypeName]) VALUES (2, N'数据非法')
INSERT [dbo].[tb_A_EventType] ([F_TypeNo], [F_TypeName]) VALUES (3, N'阈值异常')
INSERT [dbo].[tb_A_EventType] ([F_TypeNo], [F_TypeName]) VALUES (4, N'模型违规')
INSERT [dbo].[tb_A_EventType] ([F_TypeNo], [F_TypeName]) VALUES (5, N'其他异常')
INSERT [dbo].[tb_A_EventType] ([F_TypeNo], [F_TypeName]) VALUES (6, N'通知提醒')
/****** Object:  Table [dbo].[tb_A_EventItem]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_A_EventItem] ([F_TypeNo], [F_ItemNo], [F_ItemName]) VALUES (5, 1, N'数据缺失')
INSERT [dbo].[tb_A_EventItem] ([F_TypeNo], [F_ItemNo], [F_ItemName]) VALUES (5, 2, N'磁盘空间不足')
/****** Object:  Table [dbo].[tb_A_Color]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (0, N'#C3325F')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (1, N'#01A31C')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (2, N'#DA532C')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (3, N'#5ACD0B')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (4, N'#603CBA')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (5, N'#7E3878')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (6, N'#BC1C48')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (7, N'#7ACC29')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (8, N'#0072BC')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (9, N'#00ABA9')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (10, N'#008641')
INSERT [dbo].[tb_A_Color] ([F_ColorNum], [F_ColorValue]) VALUES (11, N'#2B5797')
/****** Object:  Table [dbo].[tb_A_BookType]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_A_BookType] ([F_TypeNo], [F_TypeName]) VALUES (1, N'分类主题1')
INSERT [dbo].[tb_A_BookType] ([F_TypeNo], [F_TypeName]) VALUES (2, N'分类主题2')
INSERT [dbo].[tb_A_BookType] ([F_TypeNo], [F_TypeName]) VALUES (3, N'分类主题3')
INSERT [dbo].[tb_A_BookType] ([F_TypeNo], [F_TypeName]) VALUES (4, N'分类主题4')
INSERT [dbo].[tb_A_BookType] ([F_TypeNo], [F_TypeName]) VALUES (5, N'分类主题5')
INSERT [dbo].[tb_A_BookType] ([F_TypeNo], [F_TypeName]) VALUES (6, N'分类主题6')
INSERT [dbo].[tb_A_BookType] ([F_TypeNo], [F_TypeName]) VALUES (7, N'分类主题7')
INSERT [dbo].[tb_A_BookType] ([F_TypeNo], [F_TypeName]) VALUES (8, N'分类主题8')
/****** Object:  Table [dbo].[tb_B_DictTreeType]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_B_DictTreeType] ([F_DictTreeNo], [F_DictTreeName], [F_TreeDepth], [F_CreateUser], [F_CreateDate], [F_UpdateUser], [F_UpdateDate], [F_Memo]) VALUES (1, N'能源字典管理模版', 4, N'admin', CAST(0x0000A67001442D77 AS DateTime), N'zhanghui', CAST(0x0000AA2000F3CF3D AS DateTime), N'能源分项、用途等的自定义')
INSERT [dbo].[tb_B_DictTreeType] ([F_DictTreeNo], [F_DictTreeName], [F_TreeDepth], [F_CreateUser], [F_CreateDate], [F_UpdateUser], [F_UpdateDate], [F_Memo]) VALUES (2, N'物联设备管理模板', 3, N'admin', CAST(0x0000A8C000E8D997 AS DateTime), N'zhanghui', CAST(0x0000AA1A01232C7B AS DateTime), N'各类表具、传感器、设备等')
INSERT [dbo].[tb_B_DictTreeType] ([F_DictTreeNo], [F_DictTreeName], [F_TreeDepth], [F_CreateUser], [F_CreateDate], [F_UpdateUser], [F_UpdateDate], [F_Memo]) VALUES (3, N'设施机房管理模板', 4, N'admin', CAST(0x0000A8C000E98B71 AS DateTime), N'zhanghui', CAST(0x0000AA1D0105A5BA AS DateTime), N'适用各类设施机房管理业务场景')
INSERT [dbo].[tb_B_DictTreeType] ([F_DictTreeNo], [F_DictTreeName], [F_TreeDepth], [F_CreateUser], [F_CreateDate], [F_UpdateUser], [F_UpdateDate], [F_Memo]) VALUES (4, N'高校场景管理模版', 6, N'admin', CAST(0x0000A634009353C7 AS DateTime), N'zhanghui', CAST(0x0000AA1C00AB1B9D AS DateTime), N'适用高校能源与设施运营场景')
INSERT [dbo].[tb_B_DictTreeType] ([F_DictTreeNo], [F_DictTreeName], [F_TreeDepth], [F_CreateUser], [F_CreateDate], [F_UpdateUser], [F_UpdateDate], [F_Memo]) VALUES (5, N'医院场景管理模板', 4, N'admin', CAST(0x0000AA14008DE125 AS DateTime), N'zhanghui', CAST(0x0000AA1C00B56F37 AS DateTime), N'适用医院能源与设施运营场景')
INSERT [dbo].[tb_B_DictTreeType] ([F_DictTreeNo], [F_DictTreeName], [F_TreeDepth], [F_CreateUser], [F_CreateDate], [F_UpdateUser], [F_UpdateDate], [F_Memo]) VALUES (6, N'通用场景管理模板', 3, N'admin', CAST(0x0000AA14008E1EC1 AS DateTime), N'admin', CAST(0x0000AAF60169E442 AS DateTime), N'适用通用场景能源与设施运营场景')
INSERT [dbo].[tb_B_DictTreeType] ([F_DictTreeNo], [F_DictTreeName], [F_TreeDepth], [F_CreateUser], [F_CreateDate], [F_UpdateUser], [F_UpdateDate], [F_Memo]) VALUES (7, N'大型公建管理模板', 4, N'admin', CAST(0x0000AA1400903F1B AS DateTime), N'zhanghui', CAST(0x0000AA1E00EA57A5 AS DateTime), N'适用大型公共建设能源管理场景')
INSERT [dbo].[tb_B_DictTreeType] ([F_DictTreeNo], [F_DictTreeName], [F_TreeDepth], [F_CreateUser], [F_CreateDate], [F_UpdateUser], [F_UpdateDate], [F_Memo]) VALUES (8, N'公共机构管理模板', 4, N'admin', CAST(0x0000AA1400907DE7 AS DateTime), N'zhanghui', CAST(0x0000AA1E00EA5E8F AS DateTime), N'适用市级公共机构能源管理场景')
/****** Object:  Table [dbo].[tb_B_PropertyType]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_B_PropertyType] ([F_PropertyTypeID], [F_PropertyTypeName]) VALUES (N'1', N'文本类型')
INSERT [dbo].[tb_B_PropertyType] ([F_PropertyTypeID], [F_PropertyTypeName]) VALUES (N'2', N'数字类型')
INSERT [dbo].[tb_B_PropertyType] ([F_PropertyTypeID], [F_PropertyTypeName]) VALUES (N'3', N'日期类型')
INSERT [dbo].[tb_B_PropertyType] ([F_PropertyTypeID], [F_PropertyTypeName]) VALUES (N'4', N'图片类型')
/****** Object:  Table [dbo].[tb_B_ObjectType]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (1, N'高校-学校', 1)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (2, N'高校-校区', 2)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (3, N'高校-教职工', 3)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (4, N'高校-学生', 4)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (5, N'高校-建筑-分类', 5)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (6, N'高校-建筑-楼群', 6)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (7, N'高校-建筑-本级', 7)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (8, N'高校-建筑-楼层', 8)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (9, N'高校-建筑-区域', 9)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (10, N'高校-建筑-房间', 10)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (11, N'高校-建筑-宿舍', 11)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (12, N'高校-单位-类型', 12)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (13, N'高校-单位-本级', 13)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (14, N'医疗-医院', 14)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (15, N'医疗-医生', 15)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (16, N'医疗-患者', 16)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (17, N'医疗-建筑-分类', 17)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (18, N'医疗-建筑-楼宇', 18)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (19, N'医疗-建筑-楼层', 19)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (20, N'医疗-建筑-区域', 20)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (21, N'医疗-建筑-房间', 21)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (22, N'医疗-单位-类型', 22)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (23, N'医疗-单位-本级', 23)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (24, N'园区-全区', 24)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (25, N'园区-单位', 25)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (26, N'园区-建筑', 26)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (27, N'园区-建筑-区域', 27)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (28, N'园区-建筑-房间', 28)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (29, N'公建-省级', 29)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (30, N'公建-市级', 30)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (31, N'公建-（区）县级', 31)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (32, N'公建-公共建筑', 32)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (33, N'行政-省级', 33)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (34, N'行政-市级', 34)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (35, N'行政-（区）县级', 35)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (36, N'行政-公共机构', 36)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (37, N'字典-能源', 37)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (38, N'表具', 38)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (39, N'设备-传感器', 39)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (40, N'设备-控制器', 40)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (41, N'设备-集中器', 41)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (42, N'设备-摄像头', 42)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (43, N'设备-门禁', 43)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (44, N'设备-泵', 44)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (45, N'设备-风机', 45)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (46, N'设备-空调末端', 46)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (47, N'设备-变风量机组', 47)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (48, N'设备-灯具', 48)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (49, N'设备-回路', 49)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (50, N'设施-变电所', 50)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (51, N'设施-变电所-变压器', 51)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (52, N'设施-变电所-电容柜', 52)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (53, N'设施-变电所-次总', 53)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (54, N'设施-变电所-回路', 54)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (55, N'设施-电梯机房', 55)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (56, N'设施-电梯机房-电梯', 56)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (57, N'设施-水泵房', 57)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (58, N'设施-水泵房-水箱', 58)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (59, N'设施-冷热源机房', 59)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (60, N'设施-冷热源机房-机组', 60)
INSERT [dbo].[tb_B_ObjectType] ([F_ObjectTypeID], [F_ObjectTypeName], [F_ObjectTypeIndex]) VALUES (61, N'设施-冷热源机房-锅炉', 61)
/****** Object:  Table [dbo].[tb_B_ObjectProperty]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610000, N'能源单位', N'P1_EnergyUnit', N'', 37, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610001, N'能源单价', N'P_UnitPrice', N'元', 37, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610003, N'分类编码', N'P_EnergyType', N'', 37, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610005, N'物理分项编码', N'P_EnergyItem', N'', 37, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610007, N'一级分项编码', N'P_EnergyItem1', N'', 37, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610009, N'二级分项编码', N'P_EnergyItem2', N'', 37, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610011, N'管理分项编码', N'P_EnergyProperty', N'', 37, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610013, N'等价标准煤', N'P1_CoalRatio_DJ', N'kg', 37, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610014, N'当量标准煤', N'P1_CoalRatio_DL', N'kg', 37, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610015, N'等价碳排放', N'P1_CarbonRatio', N'kg', 37, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553610986, N'内部运维编号', N'P2_OperationCode', N'', 38, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553611080, N'内部管理编号', N'P2_ManagementCode', N'', 38, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553611288, N'教育上传编码', N'P2_EduUploadCode', N'', 38, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553611367, N'住建上传编码', N'P2_BuildUploadCode', N'', 38, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553611369, N'能源分类', N'P_EnergyType', N'', 38, N'A', N'1', N'2', N'1553442921', N'1553610003', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553611371, N'管理分项', N'P_EnergyProperty', N'', 38, N'A', N'1', N'2', N'1553443253', N'1553610011', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553611373, N'物理分项', N'P_EnergyItem', N'', 38, N'A', N'1', N'2', N'1553443211', N'1553610005', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553611375, N'一级物理分项', N'P_EnergyItem1', N'', 38, N'A', N'1', N'2', N'1553443303', N'1553610007', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553611377, N'二级物理分项', N'P_EnergyItem2', N'', 38, N'A', N'1', N'2', N'1553443377', N'1553610009', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612236, N'计量场景', N'P2_MeteringScene', N'', 38, N'A', N'1', N'1', N'1553531069', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612495, N'电表关系', N'P2_NodeRelation', N'', 38, N'A', N'1', N'1', N'1553531071', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612497, N'水表关系', N'P2_NodeRelation', N'', 38, N'A', N'1', N'1', N'1553531073', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612499, N'坐标-经度', N'P2_Longitude', N'', 38, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612500, N'坐标-纬度', N'P2_Latitude', N'', 38, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612501, N'坐标-X轴', N'P_Xaxis', N'', 38, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612502, N'坐标-Y轴', N'P_Yaxis', N'', 38, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612503, N'重点设备', N'P2_MainNode', N'', 38, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612505, N'表计品牌', N'P2_NodeBrand', N'', 38, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612507, N'表计口径', N'P2_NodeDiameter', N'mm', 38, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612509, N'电表相线', N'P2_NodePhase', N'', 38, N'A', N'1', N'1', N'535153884090', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553612511, N'安装位置', N'P2_NodePosition', N'', 38, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553613366, N'现场图片', N'P2_ScenePicture', N'', 38, N'A', N'4', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553616961, N'网络地址', N'P2_IP', N'', 42, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617226, N'水泵类型', N'P2_PumpType', N'', 44, N'A', N'1', N'1', N'1553617034', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617273, N'最大流量', N'P2_MaxFlowRate', N'', 44, N'A', N'2', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617305, N'断点压力', N'P2_FlowBreakPressure', N'Pa', 44, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617357, N'使用温度', N'P2_UseTemperature', N'℃', 44, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617426, N'输入功率', N'P2_InputPower', N'', 44, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617527, N'内部运维编号', N'P2_OperationCode', N'', 46, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617562, N'内部管理编号', N'P2_ManagementCode', N'', 46, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617687, N'空调系统类型', N'P2_SystemType', N'', 46, N'A', N'1', N'1', N'1553531077', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617731, N'空调末端类型', N'P2_AirConType', N'', 46, N'A', N'1', N'1', N'1553531079', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617792, N'空调品牌', N'P2_AirConBrand', N'', 46, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617885, N'空调匹数', N'P2_AirConNum', N'匹', 46, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617939, N'制冷功率', N'P2_RefrigerationPower', N'W', 46, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553617976, N'制热功率', N'P2_ThermalPower', N'W', 46, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618041, N'制冷量', N'P2_RefrigeratingCapacity', N'W', 46, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618075, N'制热量', N'P2_HeatingCapacity', N'W', 46, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618275, N'坐标-经度', N'P2_Longitude', N'', 46, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618299, N'坐标-纬度', N'P2_Latitude', N'', 46, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618328, N'坐标-X轴', N'P_Xaxis', N'', 46, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618354, N'坐标-Y轴', N'P_Yaxis', N'', 46, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618520, N'内部运维编号', N'P2_OperationCode', N'', 48, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618546, N'内部管理编号', N'P2_ManagementCode', N'', 48, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618679, N'是否节能', N'P2_IsEnergySaving', N'', 48, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618725, N'额定功率', N'P2_RatedPower', N'W', 48, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618788, N'坐标-经度', N'P2_Longitude', N'', 48, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618810, N'坐标-纬度', N'P2_Latitude', N'', 48, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618837, N'坐标-X轴', N'P_Xaxis', N'', 48, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553618861, N'坐标-X轴', N'P_Xaxis', N'', 48, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553694628, N'内部运维编号', N'P2_OperationCode', N'', 49, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553694643, N'内部管理编号', N'P2_ManagementCode', N'', 49, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553694722, N'坐标-经度', N'P2_Longitude', N'', 49, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553694741, N'坐标-纬度', N'P2_Latitude', N'', 49, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553694773, N'坐标-X轴', N'P_Xaxis', N'', 49, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553694812, N'坐标-Y轴', N'P_Yaxis', N'', 49, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553697211, N'重点设备', N'P2_MainNode', N'', 49, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553697568, N'是否备用', N'P2_IsSpare', N'', 49, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553697811, N'内部运维编号', N'P2_OperationCode', N'', 47, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553697833, N'内部管理编号', N'P2_ManagementCode', N'', 47, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553697939, N'空调系统类型', N'P2_SystemType', N'', 47, N'A', N'1', N'1', N'1553531077', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553697986, N'空调末端类型', N'P2_AirConType', N'', 47, N'A', N'1', N'1', N'1553531079', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698017, N'机组品牌', N'P2_AirConBrand', N'', 47, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698110, N'风量', N'P2_AirVolume', N'm3/h', 47, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698164, N'新风工况', N'P2_FreshAirCondition', N'KW', 47, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698246, N'冷量回风工况', N'P2_ColdReturnAirCondition', N'KW', 47, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698287, N'热量回风工况', N'P2_HeatReturnAirCondition', N'KW', 47, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698348, N'坐标-经度', N'P2_Longitude', N'', 47, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698378, N'坐标-纬度', N'P2_Latitude', N'', 47, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698405, N'坐标-X轴', N'P_Xaxis', N'', 47, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698429, N'坐标-Y轴', N'P_Yaxis', N'', 47, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698700, N'内部管理编号', N'P3_ManagementCode', N'', 59, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553698970, N'系统类型', N'P3_SystemType', N'', 59, N'A', N'1', N'1', N'1553531077', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699228, N'热源类型', N'P3_HeatSourceType', N'', 59, N'A', N'1', N'1', N'1553531022', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699294, N'责任人', N'P3_PersonLiable', N'', 59, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699346, N'联系电话', N'P3_ContactNumber', N'', 59, N'A', N'1', N'', N'', N'', N'', N'^([0-9]{3,4}-\d{7,8})|(1[3-9]{1}[0-9]{9})$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699380, N'坐标-经度', N'P3_Longitude', N'', 59, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699399, N'坐标-纬度', N'P3_Latitude', N'', 59, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699422, N'坐标-X轴', N'P_Xaxis', N'', 59, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699450, N'坐标-Y轴', N'P_Yaxis', N'', 59, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699497, N'现场图片', N'P3_ScenePicture', N'', 59, N'A', N'4', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699722, N'机组品牌', N'P3_UnitBrand', N'', 60, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699764, N'制冷量', N'P3_RefrigeratingCapacity', N'', 60, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553699802, N'制冷功率', N'P3_RefrigerationPower', N'', 60, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700056, N'制冷系数', N'P3_COP', N'', 60, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700121, N'锅炉品牌', N'P3_UnitBrand', N'', 61, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700273, N'额定容量', N'P3_BoilerCapacity', N't/h', 61, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700354, N'蒸汽压力', N'P3_SteamPressure', N'Mpa', 61, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700477, N'蒸汽温度', N'P3_SteamTemperature', N'℃', 61, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700527, N'给水温度', N'P3_WaterTemperature', N'℃', 61, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700617, N'内部管理编码', N'P3_ManagementCode', N'', 50, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
GO
print 'Processed 100 total records'
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700636, N'内部管理编码', N'P3_ManagementCode', N'', 57, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700655, N'内部管理编码', N'P3_ManagementCode', N'', 55, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700874, N'责任人', N'P3_PersonLiable', N'', 50, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553700965, N'联系电话', N'P3_ContactNumber', N'', 50, N'A', N'1', N'', N'', N'', N'', N'^([0-9]{3,4}-\d{7,8})|(1[3-9]{1}[0-9]{9})$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701000, N'坐标-经度', N'P3_Longitude', N'', 50, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701020, N'坐标-纬度', N'P3_Latitude', N'', 50, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701051, N'坐标-X轴', N'P_Xaxis', N'', 50, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701076, N'坐标-Y轴', N'P_Yaxis', N'', 50, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701097, N'现场图片', N'P3_ScenePicture', N'', 50, N'A', N'4', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701296, N'内部管理编号', N'P3_ManagementCode', N'', 51, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701337, N'工作频率', N'P3_WorkingFrequency', N'Hz', 51, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701428, N'额定功率', N'P3_RatedPower', N'KW', 51, N'A', N'1', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701469, N'额定电压', N'P3_RatedVoltage', N'V', 51, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701528, N'空载电流', N'P3_No-loadCurrent', N'', 51, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701551, N'空载损耗', N'P3_No-loadLoss', N'', 51, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701586, N'电压比', N'P3_VoltageRatio', N'', 51, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701856, N'额定电压', N'P3_RatedVoltage', N'V', 52, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553701907, N'额定容量', N'P3_RatedCapacity', N'', 52, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553702044, N'责任人', N'P3_PersonLiable', N'', 57, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553702071, N'联系电话', N'P3_ContactNumber', N'', 57, N'A', N'1', N'', N'', N'', N'', N'^([0-9]{3,4}-\d{7,8})|(1[3-9]{1}[0-9]{9})$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553702093, N'坐标-经度', N'P3_Longitude', N'', 57, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553702115, N'坐标-纬度', N'P3_Latitude', N'', 57, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553702141, N'坐标-X轴', N'P_Xaxis', N'', 57, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553702167, N'坐标-Y轴', N'P_Yaxis', N'', 57, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553702194, N'现场图片', N'P3_ScenePicture', N'', 57, N'A', N'4', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553702743, N'内部管理编号', N'P3_ManagementCode', N'', 53, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553702949, N'公称容积', N'P3_NominalVolume', N'm', 58, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553702987, N'有效容积', N'P3_EffectiveVolume', N'm', 58, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553703582, N'责任人', N'P3_PersonLiable', N'', 55, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553703611, N'联系电话', N'P3_ContactNumber', N'', 55, N'A', N'1', N'', N'', N'', N'', N'^([0-9]{3,4}-\d{7,8})|(1[3-9]{1}[0-9]{9})$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553703643, N'坐标-经度', N'P3_Longitude', N'', 55, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553703726, N'坐标-纬度', N'P3_Latitude', N'', 55, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553703754, N'坐标-X轴', N'P_Xaxis', N'', 55, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553703902, N'坐标-Y轴', N'P_Yaxis', N'', 55, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553705776, N'内部运维编号', N'P3_OperationCode', N'', 56, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553705802, N'内部管理编号', N'P3_ManagementCode', N'', 56, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706114, N'电梯品牌', N'P3_ElevatorBrand', N'', 56, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706168, N'额定载量', N'P3_RatedLoad', N'公斤', 56, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706284, N'电梯用途', N'P3_ElevatorUse', N'', 56, N'A', N'1', N'1', N'1553705909', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706368, N'回馈装置', N'P3_FeedbackDevice', N'', 56, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706424, N'维保单位', N'P3_MaintenanceUnit', N'', 56, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706446, N'检验单位', N'P3_InspectionUnit', N'', 56, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706513, N'应急联系人', N'P3_EmergencyContact', N'', 56, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706550, N'应急电话', N'P3_EmergencyCall', N'', 56, N'A', N'1', N'', N'', N'', N'', N'^([0-9]{3,4}-\d{7,8})|(1[3-9]{1}[0-9]{9})$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706584, N'安装地址', N'P3_InstallPosition', N'', 56, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706612, N'视频地址', N'P3_VideoURL', N'', 56, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706700, N'学校代码', N'P4_UniversityCode', N'', 1, N'A', N'1', N'', N'', N'', N'', N'^[A-Z0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706703, N'区划代码', N'P4_DistrictCode', N'', 1, N'A', N'1', N'1', N'1553531000', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706705, N'机构代码', N'P4_OrganizeCode', N'', 1, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706707, N'占地面积', N'P4_GroundArea', N'亩', 1, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706709, N'建筑面积', N'P_BuildingArea', N'㎡', 1, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706710, N'用能人数', N'P_UserNum', N'个', 1, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706711, N'教职工人数', N'P4_TeacherNum', N'个', 1, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706713, N'研究生人数', N'P4_PostgraduateNum', N'个', 1, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706715, N'本科生人数', N'P4_UndergraduateNum', N'个', 1, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706717, N'专科生人数', N'P4_AcademyNum', N'个', 1, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553706719, N'留学生人数', N'P4_OverseasNum', N'个', 1, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553755913, N'占地面积', N'P4_GroundArea', N'亩', 2, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553755949, N'建筑面积', N'P_BuildingArea', N'㎡', 2, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553755989, N'用能人数', N'P_UserNum', N'', 2, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553756010, N'建筑编码', N'P4_BuildingCode', N'', 7, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553756013, N'建筑分类', N'P4_BuildingCategory', N'', 7, N'A', N'1', N'1', N'1553531002', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553756015, N'建设年代', N'P4_BuildYear', N'年', 7, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]{3}$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553756017, N'建设朝向', N'P4_BuildDirection', N'', 7, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553756019, N'地上层数', N'P4_UpFloor', N'层', 7, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553756021, N'地下层数', N'P4_DownFloor', N'层', 7, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553756023, N'体型系数', N'P4_BodyCoef', N'', 7, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553756025, N'建筑地址', N'P4_BuildAddress', N'', 7, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553756027, N'坐标-经度', N'P4_Longitude', N'度', 7, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553756029, N'坐标-纬度', N'P4_Latitude', N'度', 7, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763806, N'坐标-X轴', N'P_Xaxis', N'', 7, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763835, N'坐标-Y轴', N'P_Yaxis', N'', 7, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763837, N'建筑空调系统', N'P4_AirType', N'', 7, N'A', N'1', N'1', N'1553531077', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763839, N'建筑采暖系统', N'P4_HeatType', N'', 7, N'A', N'1', N'1', N'1553531083', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763841, N'建筑结构形式', N'P4_StruType', N'', 7, N'A', N'1', N'1', N'1553531085', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763843, N'建筑外墙材料', N'P4_WallMatType', N'', 7, N'A', N'1', N'1', N'1553531087', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763845, N'建筑外墙保温', N'P4_WallWarmType', N'', 7, N'A', N'1', N'1', N'1553531089', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763847, N'建筑外窗类型', N'P4_WallWinType', N'', 7, N'A', N'1', N'1', N'1553531091', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763849, N'建筑玻璃类型', N'P4_GlassType', N'', 7, N'A', N'1', N'1', N'1553531093', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763851, N'窗框材料类型', N'P4_WinFrameType', N'', 7, N'A', N'1', N'1', N'1553531095', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763853, N'绿色建筑属性', N'P4_GreenBuilding', N'', 7, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763855, N'用能人数', N'P_UserNum', N'个', 7, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763859, N'建筑面积', N'P_BuildingArea', N'㎡', 7, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763863, N'建筑编码', N'P4_BuildingCode', N'', 6, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763864, N'建筑分类', N'P4_BuildingCategory', N'', 6, N'A', N'1', N'1', N'1553531002', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763865, N'建设年代', N'P4_BuildYear', N'年', 6, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]{3}$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763866, N'建设朝向', N'P4_BuildDirection', N'', 6, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763867, N'地上层数', N'P4_UpFloor', N'层', 6, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763868, N'地下层数', N'P4_DownFloor', N'层', 6, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763869, N'体型系数', N'P4_BodyCoef', N'', 6, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763870, N'建筑地址', N'P4_BuildAddress', N'', 6, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763871, N'坐标-经度', N'P4_Longitude', N'度', 6, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763872, N'坐标-纬度', N'P4_Latitude', N'度', 6, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763873, N'坐标-X轴', N'P_Xaxis', N'', 6, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763874, N'坐标-Y轴', N'P_Yaxis', N'', 6, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763875, N'建筑空调系统', N'P4_AirType', N'', 6, N'A', N'1', N'1', N'1553531077', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763876, N'建筑采暖系统', N'P4_HeatType', N'', 6, N'A', N'1', N'1', N'1553531083', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763877, N'建筑结构形式', N'P4_StruType', N'', 6, N'A', N'1', N'1', N'1553531085', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763878, N'建筑外墙材料', N'P4_WallMatType', N'', 6, N'A', N'1', N'1', N'1553531087', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763879, N'建筑外墙保温', N'P4_WallWarmType', N'', 6, N'A', N'1', N'1', N'1553531089', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763880, N'建筑外窗类型', N'P4_WallWinType', N'', 6, N'A', N'1', N'1', N'1553531091', N'', N'', N'', 0, N'')
GO
print 'Processed 200 total records'
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763881, N'建筑玻璃类型', N'P4_GlassType', N'', 6, N'A', N'1', N'1', N'1553531093', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763882, N'窗框材料类型', N'P4_WinFrameType', N'', 6, N'A', N'1', N'1', N'1553531095', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763883, N'绿色建筑属性', N'P4_GreenBuilding', N'', 6, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763884, N'用能人数', N'P_UserNum', N'个', 6, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763885, N'建筑面积', N'P_BuildingArea', N'㎡', 6, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763889, N'房间编号', N'P4_RoomCode', N'', 10, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763891, N'使用单位', N'P4_UsingUnit', N'', 10, N'B', N'1', N'2', N'1553596055', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763893, N'建筑面积', N'P_BuildArea', N'㎡', 10, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763895, N'办公人数', N'P_UserNum', N'个', 10, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763897, N'宿舍编号', N'P4_DormCode', N'', 11, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763899, N'隶属学院', N'P4_BelongUnit', N'', 11, N'B', N'1', N'2', N'1553596055', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763901, N'宿舍面积', N'P_BuildingArea', N'㎡', 11, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763903, N'住宿人数', N'P_UserNum', N'个', 11, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763907, N'单位编号', N'P4_UnitCode', N'', 13, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553763909, N'单位类型', N'P4_UnitType', N'', 13, N'A', N'1', N'1', N'1553531011', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767142, N'建筑面积', N'P_BuildingArea', N'㎡', 13, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767144, N'用能人数', N'P_UserNum', N'个', 13, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767146, N'教职工数', N'P4_TeacherNum', N'个', 13, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767148, N'学生人数', N'P4_StudentNum', N'个', 13, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767160, N'教职工号', N'P4_TeacherCode', N'', 3, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767162, N'身份证号码', N'P4_IdentityNum', N'', 3, N'A', N'1', N'', N'', N'', N'', N'^[0-9X]{16}$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767163, N'统一身份号', N'P4_UnifyNum', N'', 3, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767164, N'出生日期', N'P4_BirthDate', N'', 3, N'A', N'3', N'', N'', N'', N'', N'^[1-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767165, N'性别', N'P4_Sex', N'', 3, N'A', N'1', N'1', N'1553531102', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767166, N'籍贯', N'P4_BirthPlace', N'', 3, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767168, N'手机号码', N'P4_MobilePhone', N'', 3, N'A', N'1', N'', N'', N'', N'', N'^1[3-9]{1}[0-9]{9}$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767170, N'所属单位', N'P4_BelongUnit', N'', 3, N'B', N'1', N'2', N'1553596055', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767180, N'学号', N'P4_StudentCode', N'', 4, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767182, N'身份证号码', N'P4_IdentityNum', N'', 4, N'A', N'1', N'', N'', N'', N'', N'^[0-9X]{16}$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767184, N'统一身份号', N'P4_UnifyNum', N'', 4, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767186, N'出生日期', N'P4_BirthDate', N'', 4, N'A', N'3', N'', N'', N'', N'', N'^[1-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767188, N'性别', N'P4_Sex', N'', 4, N'A', N'1', N'1', N'1553531102', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767190, N'手机号码', N'P4_MobilePhone', N'', 4, N'A', N'1', N'', N'', N'', N'', N'^1[3-9]{1}[0-9]{9}$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767192, N'所属学院', N'P4_BelongUnit', N'', 4, N'A', N'1', N'2', N'1553596055', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767200, N'医院等级', N'P5_HospitalGrade', N'', 14, N'A', N'1', N'1', N'1553531013', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767202, N'医院类别', N'P5_HospitalCategory', N'', 14, N'A', N'1', N'1', N'1553531015', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767204, N'占地面积', N'P5_GroundArea', N'', 14, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767206, N'建筑面积', N'P_BuildingArea', N'', 14, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767208, N'编制床位', N'P5_DesignatedBedNum', N'张', 14, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767210, N'开放床位', N'P5_OpenBedNum', N'张', 14, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767212, N'日均门诊人次', N'P5_DailyAvgOutpatient', N'人次', 14, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767214, N'年门急诊人次', N'P5_YearOutpatient', N'人次', 14, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767216, N'平均住院日', N'P5_AvgDayOfHospital', N'天', 14, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767218, N'年住院床日', N'P5_YearInpatientBedDay', N'床日', 14, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767260, N'建筑编码', N'P5_BuildingCode', N'', 18, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767261, N'建筑分类', N'P5_BuildingCategory', N'', 18, N'A', N'1', N'1', N'1553531005', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767262, N'建设年代', N'P5_BuildYear', N'年', 18, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]{3}$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767263, N'建设朝向', N'P5_BuildDirection', N'', 18, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767264, N'地上层数', N'P5_UpFloor', N'层', 18, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767265, N'地下层数', N'P5_DownFloor', N'层', 18, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767266, N'体型系数', N'P5_BodyCoef', N'', 18, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767267, N'建筑地址', N'P5_BuildAddress', N'', 18, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767268, N'坐标-经度', N'P5_Longitude', N'度', 18, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767269, N'坐标-纬度', N'P5_Latitude', N'度', 18, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767270, N'坐标-X轴', N'P_Xaxis', N'', 18, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767271, N'坐标-Y轴', N'P_Yaxis', N'', 18, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767272, N'建筑空调系统', N'P5_AirType', N'', 18, N'A', N'1', N'1', N'1553531077', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767273, N'建筑采暖系统', N'P5_HeatType', N'', 18, N'A', N'1', N'1', N'1553531083', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767274, N'建筑结构形式', N'P5_StruType', N'', 18, N'A', N'1', N'1', N'1553531085', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767275, N'建筑外墙材料', N'P5_WallMatType', N'', 18, N'A', N'1', N'1', N'1553531087', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767276, N'建筑外墙保温', N'P5_WallWarmType', N'', 18, N'A', N'1', N'1', N'1553531089', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767277, N'建筑外窗类型', N'P5_WallWinType', N'', 18, N'A', N'1', N'1', N'1553531091', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767278, N'建筑玻璃类型', N'P5_GlassType', N'', 18, N'A', N'1', N'1', N'1553531093', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767279, N'窗框材料类型', N'P5_WinFrameType', N'', 18, N'A', N'1', N'1', N'1553531095', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767280, N'绿色建筑属性', N'P5_GreenBuilding', N'', 18, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767281, N'用能人数', N'P_UserNum', N'个', 18, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767282, N'建筑面积', N'P_BuildingArea', N'㎡', 18, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767300, N'房间编号', N'P5_RoomCode', N'', 21, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767301, N'使用单位', N'P5_UsingUnit', N'', 21, N'B', N'1', N'2', N'1553596055', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767302, N'建筑面积', N'P_BuildArea', N'㎡', 21, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767303, N'办公人数', N'P_UserNum', N'个', 21, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767401, N'单位编号', N'P5_UnitCode', N'', 23, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767402, N'单位类型', N'P5_UnitType', N'', 23, N'A', N'1', N'1', N'1553531012', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767403, N'建筑面积', N'P_BuildingArea', N'㎡', 23, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553767404, N'用能人数', N'P_UserNum', N'个', 23, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780275, N'园区分类', N'P6_ParkCategory', N'', 24, N'A', N'1', N'1', N'1553531017', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780464, N'占地面积', N'P6_GroundArea', N'亩', 24, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780491, N'建筑面积', N'P_BuildingArea', N'㎡', 24, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780572, N'用能人数', N'P_UserNum', N'个', 24, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780703, N'入驻单位', N'P6_SettlementUnit', N'家', 24, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780705, N'建筑编码', N'P6_BuildingCode', N'', 26, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780707, N'建设年代', N'P6_BuildYear', N'年', 26, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]{3}$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780708, N'建设朝向', N'P6_BuildDirection', N'', 26, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780709, N'地上层数', N'P6_UpFloor', N'层', 26, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780710, N'地下层数', N'P6_DownFloor', N'层', 26, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780711, N'体型系数', N'P6_BodyCoef', N'', 26, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780713, N'坐标-经度', N'P6_Longitude', N'度', 26, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780714, N'坐标-纬度', N'P6_Latitude', N'度', 26, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780715, N'坐标-X轴', N'P_Xaxis', N'', 26, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780716, N'坐标-Y轴', N'P_Yaxis', N'', 26, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780717, N'建筑空调系统', N'P6_AirType', N'', 26, N'A', N'1', N'1', N'1553531077', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780718, N'建筑采暖系统', N'P6_HeatType', N'', 26, N'A', N'1', N'1', N'1553531083', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780719, N'建筑结构形式', N'P6_StruType', N'', 26, N'A', N'1', N'1', N'1553531085', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780720, N'建筑外墙材料', N'P6_WallMatType', N'', 26, N'A', N'1', N'1', N'1553531087', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780721, N'建筑外墙保温', N'P6_WallWarmType', N'', 26, N'A', N'1', N'1', N'1553531089', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780722, N'建筑外窗类型', N'P6_WallWinType', N'', 26, N'A', N'1', N'1', N'1553531091', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780723, N'建筑玻璃类型', N'P6_GlassType', N'', 26, N'A', N'1', N'1', N'1553531093', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780724, N'窗框材料类型', N'P6_WinFrameType', N'', 26, N'A', N'1', N'1', N'1553531095', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780725, N'绿色建筑属性', N'P6_GreenBuilding', N'', 26, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780726, N'用能人数', N'P_UserNum', N'个', 26, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553780727, N'建筑面积', N'P_BuildingArea', N'㎡', 26, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
GO
print 'Processed 300 total records'
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782022, N'组织机构代码', N'P6_OrganizationCode', N'', 25, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782057, N'社会信用代码', N'P6_SocialCreditCode', N'', 25, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782210, N'入驻时间', N'P6_SettlingTime', N'', 25, N'A', N'3', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782263, N'使用面积', N'P_BuildingArea', N'㎡', 25, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782314, N'单位人数', N'P_UserNum', N'个', 25, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782598, N'区划代码', N'P7_DistrictCode', N'', 29, N'A', N'1', N'1', N'1553531000', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782695, N'数据中心代码', N'P7_DataCenterCode', N'', 29, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782792, N'数据中心路径', N'P7_DataCenterURL', N'', 29, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782899, N'区划代码', N'P7_DistrictCode', N'', 30, N'A', N'1', N'1', N'1553531000', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782922, N'数据中心代码', N'P7_DataCenterCode', N'', 30, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553782944, N'数据中心路径', N'P7_DataCenterURL', N'', 30, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783038, N'区划代码', N'P7_DistrictCode', N'', 31, N'A', N'1', N'1', N'1553531000', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783039, N'区划代码', N'P7_DistrictCode', N'', 32, N'A', N'1', N'1', N'1553531000', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783040, N'建筑编码', N'P7_BuildingCode', N'', 32, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783041, N'建筑分类', N'P7_BuildingCategory', N'', 32, N'A', N'1', N'1', N'1553531003', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783042, N'坐标-经度', N'P7_Longitude', N'', 32, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783043, N'坐标-纬度', N'P7_Latitude', N'', 32, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783044, N'坐标-X轴', N'P_Xaxis', N'', 32, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783045, N'坐标-Y轴', N'P_Yaxis', N'', 32, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783046, N'建设年代', N'P7_BuildYear', N'年', 32, N'A', N'2', NULL, NULL, NULL, NULL, N'^[1-9][0-9]{3}$', 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783047, N'建设朝向', N'P7_BuildDirection', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783048, N'地上层数', N'P7_UpFloor', N'层', 32, N'A', N'2', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783049, N'地下层数', N'P7_DownFloor', N'层', 32, N'A', N'2', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783050, N'建筑业主', N'P7_BuildOwner', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783051, N'建筑负责人', N'P7_BuildLeader', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783052, N'统计负责人', N'P7_StatistLeader', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783053, N'负责人电话', N'P7_PhoneNum', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, N'^([0-9]{3,4}-\d{7,8})|(1[3-9]{1}[0-9]{9})$', 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783054, N'负责人邮箱', N'P7_EMailBox', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, N'^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$', 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783055, N'建筑地址', N'P7_BuildAddress', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783056, N'体型系数', N'P7_BodyCoef', N'', 32, N'A', N'2', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783057, N'建筑空调系统', N'P7_AirType', N'', 32, N'A', N'1', N'1', N'1553531081', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783058, N'建筑采暖系统', N'P7_HeatType', N'', 32, N'A', N'1', N'1', N'1553531083', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783059, N'建筑结构形式', N'P7_StruType', N'', 32, N'A', N'1', N'1', N'1553531085', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783060, N'建筑外墙材料', N'P7_WallMatType', N'', 32, N'A', N'1', N'1', N'1553531087', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783061, N'建筑外墙保温', N'P7_WallWarmType', N'', 32, N'A', N'1', N'1', N'1553531089', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783062, N'建筑外窗类型', N'P7_WallWinType', N'', 32, N'A', N'1', N'1', N'1553531091', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783063, N'建筑玻璃类型', N'P7_GlassType', N'', 32, N'A', N'1', N'1', N'1553531093', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783064, N'窗框材料类型', N'P7_WinFrameType', N'', 32, N'A', N'1', N'1', N'1553531095', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783065, N'绿色建筑属性', N'P7_GreenBuilding', N'', 32, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783066, N'建筑设计单位', N'P7_BuildDesignUnit', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783067, N'建筑施工单位', N'P7_BuildConstructUnit', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783068, N'监测设计单位', N'P7_MonitorDesignUnit', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783069, N'监测实施单位', N'P7_MonitorConstructUnit', N'', 32, N'A', N'1', NULL, NULL, NULL, NULL, NULL, 0, NULL)
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783070, N'用能人数', N'P_UserNum', N'个', 32, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553783071, N'建筑面积', N'P_BuildingArea', N'㎡', 32, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553784245, N'区划代码', N'P8_DistrictCode', N'', 33, N'A', N'1', N'1', N'1553531000', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553784288, N'区划代码', N'P8_DistrictCode', N'', 34, N'A', N'1', N'1', N'1553531000', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553784322, N'区划代码', N'P8_DistrictCode', N'', 35, N'A', N'1', N'1', N'1553531000', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553784466, N'组织机构代码', N'P8_OrganizationCode', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553785733, N'区划代码', N'P8_DistrictCode', N'', 36, N'A', N'1', N'1', N'1553531000', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553785765, N'机构分类', N'P8_InstitutionCategory', N'', 36, N'A', N'1', N'1', N'1553531007', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553785862, N'机构类型', N'P8_InstitutionType', N'', 36, N'A', N'1', N'1', N'1553531009', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553785985, N'坐标-经度', N'P8_Longitude', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553786025, N'坐标-纬度', N'P8_Latitude', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553786063, N'坐标-X轴', N'P_Xaxis', N'', 36, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553786109, N'坐标-Y轴', N'P_Yaxis', N'', 36, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*(.[0-9]{4})?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553797373, N'单位电话', N'P8_WorkTel', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553797410, N'邮政编码', N'P8_PostCode', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553797479, N'单位负责人', N'P8_HeadofUnit', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553797579, N'负责人电话', N'P8_HeadofUnitTel', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553797690, N'统计负责人', N'P8_HeadofStatistics', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553797716, N'负责人电话', N'P8_HeadofStatisticsTel', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553797750, N'统计员', N'P8_Statistician', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553797773, N'统计员电话', N'P8_StatisticianTel', N'', 36, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553797843, N'用能人数', N'P_UserNum', N'个', 36, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553798060, N'编制人数', N'P8_CompiledNum', N'个', 36, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553798111, N'建筑面积', N'P_BuildingArea', N'㎡', 36, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9|,]*(.[0-9]*)?$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553798160, N'公车数', N'P8_CarNum', N'辆', 36, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553798268, N'汽油车数', N'P8_GasolineCarNum', N'辆', 36, N'A', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553798324, N'柴油车数', N'P8_DieselCarNum', N'辆', 36, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1553798406, N'新能源车数', N'P8_NewEnergyCarNum', N'辆', 36, N'B', N'2', N'', N'', N'', N'', N'^[1-9][0-9]*$', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1554068879, N'泵房类型', N'P3_PumpRoomType', N'', 57, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1555151120, N'机房编号', N'P3_RoomCode', N'', 59, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1555154507, N'机房地址', N'P3_Address', N'', 59, N'A', N'1', N'2', N'1553595584', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1555161755, N'校区编号', N'P4_ManagementCode', N'', 2, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1555680787, N'压力', N'P3_F', N'', 39, N'B', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1556014095, N'变频运行', N'P3_RunStatus', N'', 44, N'B', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1556014146, N'工频运行', N'P3_GPStatus', N'', 44, N'B', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1556014180, N'故障状态', N'P3_FaultStatus', N'', 44, N'B', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1556014229, N'温度', N'P3_T', N'', 39, N'B', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1556014252, N'湿度', N'P3_H', N'', 39, N'B', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1556014540, N'瞬时流量', N'P3_InstFlux', N'', 38, N'B', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1556026419, N'设备标签', N'P3_DeviceTag', N'', 60, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1556027383, N'漏水', N'P3_Water', N'', 39, N'B', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1556207301, N'校区图片', N'P4_ScenePicture', N'', 2, N'A', N'4', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1559297563, N'重点设备', N'P2_MainNode', N'', 46, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1571245606, N'run', N'P3_run', N'', 59, N'B', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1576834098, N'建筑图片', N'P4_BuildImage', N'', 7, N'A', N'4', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1577904482, N'隶属校区', N'P3_Campus', N'', 50, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1588860824, N'额定功率', N'P3_RatedPower', N'KW', 60, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1590413050, N'场景类型', N'P4_BType', N'', 2, N'A', N'1', N'1', N'1590413542', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1590413233, N'场景类型', N'P4_BType', N'', 6, N'A', N'1', N'1', N'1590413542', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1590681218, N'额定容量', N'P3_RatedCapacity', N'KVA', 51, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1591612831, N'场景类型', N'P4_BType', N'', 24, N'A', N'1', N'1', N'1590413542', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1591613120, N'场景类型', N'P4_BType', N'', 26, N'A', N'1', N'1', N'1590413542', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1591613188, N'场景类型', N'P4_BType', N'', 27, N'A', N'1', N'1', N'1590413542', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1592658384, N'场景类型', N'P4_BType', N'', 36, N'A', N'1', N'1', N'1590413542', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1593794840, N'重点设备', N'P2_MainNode', N'', 60, N'A', N'1', N'1', N'1553531097', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1596015222, N'P_1', N'P_1', N'', 8, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597757520, N'svg类型', N'P3_SvgType', N'', 60, N'B', N'1', N'', N'', N'', N'lsjz', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597757571, N'svg模板', N'P3_SvgTemplate', N'', 60, N'B', N'1', N'', N'', N'', N'lsjz01', N'', 0, N'')
GO
print 'Processed 400 total records'
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597757662, N'svg尺寸比例', N'P3_SvgSize', N'', 60, N'B', N'2', N'', N'', N'', N'0.7', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597757721, N'svg高度', N'P3_SvgHeight', N'', 60, N'B', N'2', N'', N'', N'', N'84', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597757796, N'svg宽度', N'P3_SvgWidth', N'', 60, N'B', N'2', N'', N'', N'', N'158', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597757931, N'svgX偏移', N'P3_SvgX', N'', 60, N'B', N'2', N'', N'', N'', N'0', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597757982, N'svgY偏移', N'P3_SvgY', N'', 60, N'B', N'2', N'', N'', N'', N'0', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597758470, N'svg展示参数', N'P3_SvgParam', N'', 60, N'B', N'1', N'', N'', N'', N'Con_T,CurrentLoad', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597758890, N'svg参数X偏移', N'P3_SvgPX', N'', 60, N'B', N'2', N'', N'', N'', N'-40', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597758932, N'svg参数Y偏移', N'P3_SvgPY', N'', 60, N'B', N'2', N'', N'', N'', N'-30', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597758987, N'svg参数尺寸', N'P3_SvgPSize', N'', 59, N'B', N'2', N'', N'', N'', N'0.6', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759041, N'svg参数尺寸', N'P3_SvgPSize', N'', 60, N'B', N'2', N'', N'', N'', N'0.6', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759163, N'svg参数值字体颜色', N'P3_SvgPVFC', N'', 60, N'B', N'1', N'', N'', N'', N'#333', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759205, N'svg参数单位字体颜色', N'P3_SvgPUFC', N'', 60, N'B', N'1', N'', N'', N'', N'#333', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759527, N'svg类型', N'P3_SvgType', N'', 44, N'B', N'1', N'', N'', N'', N'ldb', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759574, N'svg模板', N'P3_SvgTemplate', N'', 44, N'B', N'1', N'', N'', N'', N'xhb01', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759617, N'svg尺寸比例', N'P3_SvgSize', N'', 44, N'B', N'2', N'', N'', N'', N'0.7', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759656, N'svg高度', N'P3_SvgHeight', N'', 44, N'B', N'2', N'', N'', N'', N'56', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759692, N'svg宽度', N'P3_SvgWidth', N'', 44, N'B', N'2', N'', N'', N'', N'67', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759722, N'svgX偏移', N'P3_SvgX', N'', 44, N'B', N'2', N'', N'', N'', N'0', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759747, N'svgY偏移', N'P3_SvgY', N'', 44, N'B', N'2', N'', N'', N'', N'0', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759827, N'svg展示参数', N'P3_SvgParam', N'', 44, N'B', N'1', N'', N'', N'', N'Running_f', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759885, N'svg参数X偏移', N'P3_SvgPX', N'', 44, N'B', N'2', N'', N'', N'', N'-20', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759908, N'svg参数Y偏移', N'P3_SvgPY', N'', 44, N'B', N'2', N'', N'', N'', N'-20', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759931, N'svg参数尺寸', N'P3_SvgPSize', N'', 44, N'B', N'2', N'', N'', N'', N'0.6', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597759957, N'svg参数值字体颜色', N'P3_SvgPVFC', N'', 44, N'B', N'1', N'', N'', N'', N'#333', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597760022, N'svg参数单位字体颜色', N'P3_SvgPUFC', N'', 44, N'B', N'1', N'', N'', N'', N'#333', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597760278, N'设备标签', N'P3_DeviceTag', N'', 44, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597760535, N'svg模板', N'P3_SvgTemplate', N'', NULL, N'B', N'1', N'', N'', N'', N'fm01', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761262, N'svg尺寸比例', N'P3_SvgSize', N'', NULL, N'B', N'2', N'', N'', N'', N'0.6', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761315, N'svg高度', N'P3_SvgHeight', N'', NULL, N'B', N'2', N'', N'', N'', N'29.3', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761341, N'svg宽度', N'P3_SvgWidth', N'', NULL, N'B', N'2', N'', N'', N'', N'34.5', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761363, N'svgX偏移', N'P3_SvgX', N'', NULL, N'B', N'2', N'', N'', N'', N'0', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761378, N'svgY偏移', N'P3_SvgY', N'', NULL, N'B', N'2', N'', N'', N'', N'0', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761637, N'svg展示参数', N'P3_SvgParam', N'', NULL, N'B', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761662, N'svg参数X偏移', N'P3_SvgPX', N'', NULL, N'B', N'2', N'', N'', N'', N'-10', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761677, N'svg参数Y偏移', N'P3_SvgPY', N'', NULL, N'B', N'2', N'', N'', N'', N'-10', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761728, N'svg参数尺寸', N'P3_SvgPSize', N'', NULL, N'B', N'2', N'', N'', N'', N'0.6', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761755, N'svg参数值字体颜色', N'P3_SvgPVFC', N'', NULL, N'B', N'1', N'', N'', N'', N'#333', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761770, N'svg参数字体颜色', N'P3_SvgPFC', N'', NULL, N'B', N'1', N'', N'', N'', N'#333', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1597761935, N'设备标签', N'P3_DeviceTag', N'', NULL, N'A', N'1', N'', N'', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1598366653, N'上级配变', N'P3_ParentSubstation', N'', 50, N'A', N'1', N'2', N'1553583725', N'', N'', N'', 0, N'')
INSERT [dbo].[tb_B_ObjectProperty] ([F_PropertyID], [F_PropertyName], [F_PropertyIdentifier], [F_PropertyUnit], [F_ObjectTypeID], [F_GroupTypeID], [F_PropertyTypeID], [F_DictionaryType], [F_DictionaryID], [F_DictionaryKey], [F_DefaultValue], [F_RegularFormula], [F_IsOnlyRead], [F_Memo]) VALUES (1598712578, N'设计指标', N'P3_DesignIndex', N'', 59, N'A', N'2', N'', N'', N'', N'', N'', 0, N'')

/****** Object:  Table [dbo].[tb_B_KeyValueTable]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531000, N'行政区划代码', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531002, N'高校建筑分类', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531003, N'大型公建分类', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531005, N'医院建筑分类', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531007, N'公共机构分类', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531009, N'公共机构类型', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531011, N'高校单位类型', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531012, N'医院单位类型', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531013, N'医院等级', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531015, N'医院类别', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531017, N'园区分类', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531019, N'表具倍率', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531020, N'表具相线', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531022, N'热源类型', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531069, N'（电）计量场景', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531071, N'（电）表具关系', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531073, N'（水）表具关系', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531075, N'（暖）表具关系', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531077, N'空调系统类型', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531079, N'空调末端类型', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531081, N'建筑空调系统', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531083, N'建筑采暖系统', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531085, N'建筑结构形式', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531087, N'建筑外墙材料', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531089, N'建筑外墙保温', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531091, N'建筑外窗类型', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531093, N'建筑玻璃类型', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531095, N'窗框材料类型', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531097, N'是否选项', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553531102, N'性别区分', 1)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553617034, N'水泵类型', 0)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1553705909, N'电梯用途分类', 0)
INSERT [dbo].[tb_B_KeyValueTable] ([F_DictionaryID], [F_DictionaryName], [F_IsReadOnly]) VALUES (1554068761, N'水泵房分类', 0)
/****** Object:  Table [dbo].[tb_B_KeyValueList]    Script Date: 11/10/2020 14:10:15 ******/
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'110000', N'北京市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'110100', N'北京市市辖区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'110200', N'北京市县辖区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'120000', N'天津市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'120100', N'天津市市辖区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'120200', N'天津市县辖区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'130000', N'河北省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'130100', N'石家庄市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'130200', N'唐山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'130300', N'秦皇岛市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'130400', N'邯郸市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'130500', N'邢台市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'130600', N'保定市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'130700', N'张家口市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'130800', N'承德市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'130900', N'沧州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'131000', N'廊坊市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'131100', N'衡水市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'140000', N'山西省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'140100', N'太原市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'140200', N'大同市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'140300', N'阳泉市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'140400', N'长治市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'140500', N'晋城市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'140600', N'朔州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'140700', N'晋中市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'140800', N'运城市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'140900', N'忻州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'141000', N'临汾市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'142300', N'吕梁地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'150000', N'内蒙古自治区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'150100', N'呼和浩特市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'150200', N'包头市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'150300', N'乌海市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'150400', N'赤峰市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'150500', N'通辽市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'150600', N'鄂尔多斯市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'150700', N'呼伦贝尔市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'152200', N'兴安盟')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'152500', N'锡林郭勒盟')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'152600', N'乌兰察布盟')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'152800', N'巴彦淖尔盟')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'152900', N'阿拉善盟')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'210000', N'辽宁省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'210100', N'沈阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'210200', N'大连市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'210300', N'鞍山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'210400', N'抚顺市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'210500', N'本溪市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'210600', N'丹东市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'210700', N'锦州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'210800', N'营口市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'210900', N'阜新市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'211000', N'辽阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'211100', N'盘锦市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'211200', N'铁岭市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'211300', N'朝阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'211400', N'葫芦岛市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'220000', N'吉林省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'220100', N'长春市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'220200', N'吉林市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'220300', N'四平市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'220400', N'辽源市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'220500', N'通化市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'220600', N'白山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'220700', N'松原市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'220800', N'白城市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'222400', N'延边朝鲜族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'230000', N'黑龙江省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'230100', N'哈尔滨市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'230200', N'齐齐哈尔市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'230300', N'鸡西市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'230400', N'鹤岗市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'230500', N'双鸭山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'230600', N'大庆市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'230700', N'伊春市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'230800', N'佳木斯市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'230900', N'七台河市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'231000', N'牡丹江市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'231100', N'黑河市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'231200', N'绥化市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'232700', N'大兴安岭地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'310000', N'上海市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'310100', N'上海市市辖区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'310200', N'上海市县辖区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320000', N'江苏省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320100', N'南京市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320200', N'无锡市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320201', N'无锡市市辖区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320205', N'无锡市锡山区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320206', N'无锡市惠山区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320211', N'无锡市滨湖区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320213', N'无锡市梁溪区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320214', N'无锡市新吴区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320281', N'无锡市江阴市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320282', N'无锡市宜兴市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320300', N'徐州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320400', N'常州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320500', N'苏州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320600', N'南通市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320700', N'连云港市')
GO
print 'Processed 100 total records'
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320800', N'淮安市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'320900', N'盐城市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'321000', N'扬州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'321100', N'镇江市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'321200', N'泰州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'321300', N'宿迁市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'330000', N'浙江省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'330100', N'杭州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'330200', N'宁波市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'330300', N'温州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'330400', N'嘉兴市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'330500', N'湖州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'330600', N'绍兴市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'330700', N'金华市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'330800', N'衢州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'330900', N'舟山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'331000', N'台州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'331100', N'丽水市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'340000', N'安徽省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'340100', N'合肥市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'340200', N'芜湖市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'340300', N'蚌埠市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'340400', N'淮南市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'340500', N'马鞍山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'340600', N'淮北市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'340700', N'铜陵市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'340800', N'安庆市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'341000', N'黄山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'341100', N'滁州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'341200', N'阜阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'341300', N'宿州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'341400', N'巢湖市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'341500', N'六安市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'341600', N'亳州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'341700', N'池州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'341800', N'宣城市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'350000', N'福建省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'350100', N'福州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'350200', N'厦门市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'350300', N'莆田市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'350400', N'三明市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'350500', N'泉州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'350600', N'漳州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'350700', N'南平市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'350800', N'龙岩市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'350900', N'宁德市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'360000', N'江西省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'360100', N'南昌市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'360200', N'景德镇市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'360300', N'萍乡市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'360400', N'九江市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'360500', N'新余市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'360600', N'鹰潭市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'360700', N'赣州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'360800', N'吉安市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'360900', N'宜春市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'361000', N'抚州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'361100', N'上饶市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'370000', N'山东省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'370100', N'济南市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'370200', N'青岛市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'370300', N'淄博市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'370400', N'枣庄市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'370500', N'东营市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'370600', N'烟台市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'370700', N'潍坊市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'370800', N'济宁市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'370900', N'泰安市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'371000', N'威海市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'371100', N'日照市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'371200', N'莱芜市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'371300', N'临沂市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'371400', N'德州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'371500', N'聊城市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'371600', N'滨州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'371700', N'荷泽市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'410000', N'河南省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'410100', N'郑州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'410200', N'开封市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'410300', N'洛阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'410400', N'平顶山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'410500', N'安阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'410600', N'鹤壁市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'410700', N'新乡市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'410800', N'焦作市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'410900', N'濮阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'411000', N'许昌市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'411100', N'漯河市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'411200', N'三门峡市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'411300', N'南阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'411400', N'商丘市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'411500', N'信阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'411600', N'周口市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'411700', N'驻马店市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'420000', N'湖北省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'420100', N'武汉市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'420200', N'黄石市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'420300', N'十堰市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'420500', N'宜昌市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'420600', N'襄樊市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'420700', N'鄂州市')
GO
print 'Processed 200 total records'
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'420800', N'荆门市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'420900', N'孝感市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'421000', N'荆州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'421100', N'黄冈市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'421200', N'咸宁市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'421300', N'随州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'422800', N'恩施土家族苗族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'429000', N'省直辖行政单位')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'430000', N'湖南省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'430100', N'长沙市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'430200', N'株洲市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'430300', N'湘潭市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'430400', N'衡阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'430500', N'邵阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'430600', N'岳阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'430700', N'常德市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'430800', N'张家界市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'430900', N'益阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'431000', N'郴州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'431100', N'永州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'431200', N'怀化市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'431300', N'娄底市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'433100', N'湘西土家族苗族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'440000', N'广东省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'440100', N'广州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'440200', N'韶关市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'440300', N'深圳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'440400', N'珠海市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'440500', N'汕头市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'440600', N'佛山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'440700', N'江门市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'440800', N'湛江市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'440900', N'茂名市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'441200', N'肇庆市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'441300', N'惠州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'441400', N'梅州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'441500', N'汕尾市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'441600', N'河源市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'441700', N'阳江市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'441800', N'清远市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'441900', N'东莞市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'442000', N'中山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'445100', N'潮州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'445200', N'揭阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'445300', N'云浮市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'450000', N'广西壮族自治区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'450100', N'南宁市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'450200', N'柳州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'450300', N'桂林市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'450400', N'梧州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'450500', N'北海市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'450600', N'防城港市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'450700', N'钦州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'450800', N'贵港市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'450900', N'玉林市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'451000', N'百色市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'451100', N'贺州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'451200', N'河池市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'451300', N'来宾市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'451400', N'崇左市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'460000', N'海南省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'460100', N'海口市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'460200', N'三亚市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'469000', N'省直辖县级行政单位')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'500000', N'重庆市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'500100', N'重庆市市辖区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'500200', N'重庆市县辖区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'510000', N'四川省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'510100', N'成都市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'510300', N'自贡市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'510400', N'攀枝花市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'510500', N'泸州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'510600', N'德阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'510700', N'绵阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'510800', N'广元市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'510900', N'遂宁市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'511000', N'内江市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'511100', N'乐山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'511300', N'南充市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'511400', N'眉山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'511500', N'宜宾市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'511600', N'广安市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'511700', N'达州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'511800', N'雅安市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'511900', N'巴中市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'512000', N'资阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'513200', N'阿坝藏族羌族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'513300', N'甘孜藏族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'513400', N'凉山彝族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'520000', N'贵州省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'520100', N'贵阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'520200', N'六盘水市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'520300', N'遵义市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'520400', N'安顺市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'522200', N'铜仁地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'522300', N'黔西南布依族苗族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'522400', N'毕节地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'522600', N'黔东南苗族侗族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'522700', N'黔南布依族苗族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'530000', N'云南省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'530100', N'昆明市')
GO
print 'Processed 300 total records'
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'530300', N'曲靖市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'530400', N'玉溪市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'530500', N'保山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'530600', N'昭通市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'530700', N'丽江市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'532300', N'楚雄彝族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'532500', N'红河哈尼族彝族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'532600', N'文山壮族苗族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'532700', N'思茅地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'532800', N'西双版纳傣族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'532900', N'大理白族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'533100', N'德宏傣族景颇族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'533300', N'怒江傈僳族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'533400', N'迪庆藏族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'533500', N'临沧地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'540000', N'西藏自治区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'540100', N'拉萨市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'542100', N'昌都地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'542200', N'山南地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'542300', N'日喀则地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'542400', N'那曲地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'542500', N'阿里地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'542600', N'林芝地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'610000', N'陕西省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'610100', N'西安市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'610200', N'铜川市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'610300', N'宝鸡市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'610400', N'咸阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'610500', N'渭南市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'610600', N'延安市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'610700', N'汉中市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'610800', N'榆林市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'610900', N'安康市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'611000', N'商洛市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'620000', N'甘肃省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'620100', N'兰州市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'620200', N'嘉峪关市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'620300', N'金昌市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'620400', N'白银市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'620500', N'天水市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'620600', N'武威市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'620700', N'张掖市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'620800', N'平凉市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'620900', N'酒泉市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'621000', N'庆阳市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'621100', N'定西市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'622600', N'陇南地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'622900', N'临夏回族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'623000', N'甘南藏族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'630000', N'青海省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'630100', N'西宁市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'632100', N'海东地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'632200', N'海北藏族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'632300', N'黄南藏族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'632500', N'海南藏族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'632600', N'果洛藏族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'632700', N'玉树藏族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'632800', N'海西蒙古族藏族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'640000', N'宁夏回族自治区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'640100', N'银川市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'640200', N'石嘴山市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'640300', N'吴忠市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'640400', N'固原市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'650000', N'新疆维吾尔自治区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'650100', N'乌鲁木齐市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'650200', N'克拉玛依市')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'652100', N'吐鲁番地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'652200', N'哈密地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'652300', N'昌吉回族自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'652700', N'博尔塔拉蒙古自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'652800', N'巴音郭楞蒙古自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'652900', N'阿克苏地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'653000', N'克孜勒苏柯尔克孜自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'653100', N'喀什地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'653200', N'和田地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'654000', N'伊犁哈萨克自治州')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'654200', N'塔城地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'654300', N'阿勒泰地区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'659000', N'省直辖行政单位')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'710000', N'台湾省')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'810000', N'香港特别行政区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531000, N'820000', N'澳门特别行政区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'AA', N'行政办公建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'CG', N'食堂餐厅')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'CH', N'学生宿舍')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'DB', N'图书馆')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'DC', N'教学建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'DD', N'科研楼建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'EK', N'医院')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'FF', N'场馆建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'GE', N'综合楼建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'HI', N'学生集中浴室')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'HJ', N'大型或特殊实验室')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'HL', N'交流中心')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531002, N'HM', N'其他')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531003, N'A', N'办公建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531003, N'B', N'商场建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531003, N'C', N'宾馆饭店建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531003, N'D', N'文化教育建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531003, N'E', N'医疗卫生建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531003, N'F', N'体育建筑')
GO
print 'Processed 400 total records'
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531003, N'G', N'综合建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531003, N'H', N'其它建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'A', N'门急诊类')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'B', N'医技类')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'C', N'病房类')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'D', N'综合类')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'E', N'后勤办公类')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'F', N'科研教学类')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'G', N'锅炉房')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'H', N'污水处理站')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'I', N'洗衣房')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'J', N'各类站房')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'K', N'传染楼')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'L', N'液氧站')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'M', N'制剂楼')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'N', N'体检楼')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'O', N'附属服务类')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531005, N'P', N'其他建筑')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'10', N'国家机关')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'11', N'国家机关-中国共产党机关')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'12', N'国家机关-人大机关')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'13', N'国家机关-政府机关')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'14', N'国家机关-政协机关')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'15', N'国家机关-民主党派机关')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'16', N'国家机关-审判机关')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'17', N'国家机关-检察机关')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'18', N'国家机关-其他机关')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'20', N'事业单位')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'21', N'事业单位-教育事业')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'22', N'事业单位-科技事业')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'23', N'事业单位-文化事业')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'24', N'事业单位-卫生事业')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'25', N'事业单位-体育事业')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'26', N'事业单位-其他')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'30', N'团体组织')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'31', N'团体组织-群众团体')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531007, N'32', N'团体组织-社会团体')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531009, N'1', N'市级主管单位')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531009, N'2', N'市（县）区主管单位')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531009, N'3', N'市级机关单位')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531011, N'1', N'教学院系')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531011, N'2', N'科研机构')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531011, N'3', N'公共服务')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531011, N'4', N'党务部门')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531011, N'5', N'行政机构')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531011, N'6', N'附属单位')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531011, N'7', N'后勤部门')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531011, N'8', N'校办产业')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531011, N'9', N'其他')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531012, N'1', N'诊疗部门')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531012, N'2', N'辅助诊疗部门')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531012, N'3', N'行政后勤部门')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531012, N'4', N'护理部门')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531013, N'11', N'一级甲等')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531013, N'12', N'一级乙等')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531013, N'13', N'一级丙等')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531013, N'21', N'二级甲等')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531013, N'22', N'二级乙等')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531013, N'23', N'二级丙等')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531013, N'30', N'三级特等')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531013, N'31', N'三级甲等')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531013, N'32', N'三级乙等')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531013, N'33', N'三级丙等')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531015, N'A1', N'综合医院')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531015, N'A2', N'中医医院')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531015, N'A3', N'中西医结合医院')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531015, N'A4', N'民族医院')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531015, N'A5', N'专科医院')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531015, N'A6', N'疗养院')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531015, N'A7', N'护理院')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531017, N'1', N'工业园区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531017, N'2', N'农业园区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531017, N'3', N'科技园区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531017, N'4', N'物流园区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531017, N'5', N'文化创意产业园区')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531019, N'1', N'1')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531019, N'160', N'800/5')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531019, N'20', N'100/5')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531019, N'40', N'200/5')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531019, N'80', N'400/5')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531020, N'1', N'单相')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531020, N'3', N'三相')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531022, N'1', N'锅炉房')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531022, N'2', N'热电厂')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531022, N'3', N'地热')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531069, N'1', N'中央空调')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531069, N'2', N'水泵房')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531069, N'3', N'建筑楼宇')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531071, N'1', N'单位总计量')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531071, N'2', N'建筑/区域/公共设施计量')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531071, N'3', N'建筑分项/分层/机电计量')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531071, N'4', N'房间分户/机电设备计量')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531073, N'1', N'市政供水（总管）')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531073, N'2', N'区域、泵房进水（主管）')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531073, N'3', N'入楼、泵房出水（支管）')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531073, N'4', N'泵房水箱出水')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531077, N'1', N'中央空调')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531077, N'2', N'地源热泵')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531079, N'1', N'VRV内机')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531079, N'2', N'风机盘管')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531079, N'3', N'分体空调')
GO
print 'Processed 500 total records'
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531079, N'4', N'变风量机组')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531081, N'A', N'集中式全空气系统')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531081, N'B', N'风机盘管＋新风系统')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531081, N'C', N'分体式空调或VRV的局部式机组系统')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531081, N'D', N'其它')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531083, N'A', N'散热器采暖')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531083, N'B', N'地板辐射采暖')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531083, N'C', N'电辐射采暖')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531083, N'D', N'空调系统集中供暖')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531083, N'Z', N'其它')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531085, N'A', N'框架结构')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531085, N'B', N'框-剪结构')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531085, N'C', N'剪力墙结构')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531085, N'D', N'砖混结构')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531085, N'E', N'钢结构')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531085, N'F', N'筒体结构')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531085, N'G', N'木结构')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531085, N'Z', N'其它')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531087, N'A', N'砖')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531087, N'B', N'建筑砌块')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531087, N'C', N'板材墙体')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531087, N'D', N'复合墙板和墙体')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531087, N'E', N'玻璃幕墙')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531087, N'Z', N'其它')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531089, N'A', N'内保温')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531089, N'B', N'外保温')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531089, N'C', N'夹芯保温')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531089, N'Z', N'其它')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531091, N'A', N'单玻单层窗')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531091, N'B', N'单玻双层窗')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531091, N'C', N'单玻单层窗+单玻双层窗')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531091, N'D', N'中空双层玻璃窗')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531091, N'E', N'中空三层玻璃窗')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531091, N'F', N'中空充惰性气体')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531091, N'Z', N'其它')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531093, N'A', N'普通玻璃')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531093, N'B', N'镀膜玻璃')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531093, N'C', N'Low-e玻璃')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531093, N'Z', N'其它')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531095, N'A', N'钢窗')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531095, N'B', N'铝合金')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531095, N'C', N'木窗')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531095, N'D', N'断热窗框')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531095, N'E', N'塑钢')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531095, N'Z', N'其它')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531097, N'0', N'否')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531097, N'1', N'是')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531102, N'0', N'女')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553531102, N'1', N'男')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553617034, N'1', N'冷冻泵')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553617034, N'2', N'冷却泵')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553617034, N'3', N'热水泵')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553705909, N'1', N'乘客电梯')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553705909, N'2', N'载货电梯')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1553705909, N'3', N'医用电梯')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1554068761, N'1', N'冷水泵房')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1554068761, N'2', N'热水泵房')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1590413542, N'A', N'区域（校区等）')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1590413542, N'B', N'楼群-区域')
INSERT [dbo].[tb_B_KeyValueList] ([F_DictionaryID], [F_Key], [F_Value]) VALUES (1590413542, N'C', N'楼宇')

/****** Object:  Table [dbo].[tb_B_DictTreeModel]    Script Date: 11/28/2019 18:54:49 ******/
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (1, 1553442831, 0, N'能源字典', 1, N'1', NULL, 1, N'T_EnergyDict')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (1, 1553442921, 1553442831, N'能源分类', 2, N'1', 37, 1, N'T_EnergyType')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (1, 1553443211, 1553442921, N'物理分项', 3, N'1', 37, 1, N'T_EnergyItem')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (1, 1553443253, 1553442921, N'管理分项', 3, N'1', 37, 1, N'T_EnergyProperty')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (1, 1553443303, 1553443211, N'一级子分项', 4, N'1', 37, 1, N'T_EnergyItem1')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (1, 1553443377, 1553443303, N'二级子分项', 5, N'1', 37, 0, N'T_EnergyItem2')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (1, 1553957261, 1553443253, N'一级子分项', 4, N'1', 37, 0, N'T_EnergyProperty1')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553447085, 0, N'设备字典', 1, N'1', NULL, 1, N'T_DeviceDict')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553447150, 1553447085, N'传感设备', 2, N'1', NULL, 1, N'T_SensingDevice')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553447197, 1553447085, N'终端设备', 2, N'1', NULL, 1, N'T_TerminalDevice')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553447426, 1553447150, N'表具', 3, N'2', 38, 0, N'T_BasicMeter')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553447732, 1553447150, N'表具-电表', 3, N'2', 38, 0, N'T_ElectricMeter')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553447757, 1553447150, N'表具-水表', 3, N'2', 38, 0, N'T_WaterMeter')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553447929, 1553447150, N'控制器', 3, N'3', 40, 0, N'T_Controller')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553447934, 1553447150, N'传感器', 3, N'3', 39, 0, N'T_Sensor')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553447935, 1553447150, N'集中器', 3, N'3', 41, 0, N'T_Concentrator')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553448747, 1553447150, N'摄像头', 3, N'3', 42, 0, N'T_Camera')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553448836, 1553447197, N'水泵', 3, N'3', 44, 0, N'T_WaterPump')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553448863, 1553447197, N'风机', 3, N'3', 45, 0, N'T_Fan')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553448907, 1553447197, N'空调', 3, N'3', 46, 0, N'T_AirConditioner')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553448955, 1553447197, N'灯具', 3, N'3', 48, 0, N'T_Lamp')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553448980, 1553447197, N'回路', 3, N'3', 49, 0, N'T_Loop')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553595023, 1553447150, N'门禁', 3, N'3', 43, 0, N'T_AccessControl')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1553595137, 1553447197, N'变风量机组', 3, N'3', 47, 0, N'T_VAVUnit')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (2, 1559573406, 1553447197, N'分体空调', 3, N'3', 46, 0, N'T_SAirCon')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553583555, 0, N'设施机房', 1, N'1', NULL, 1, N'T_FacilityRoom')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553583661, 1553583555, N'冷热源机房', 2, N'1', 59, 1, N'T_ColdHeatRoom')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553583725, 1553583555, N'配变电房', 2, N'1', 50, 1, N'T_Substation')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553583761, 1553583555, N'水泵房', 2, N'1', 57, 1, N'T_WaterPumpRoom')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553583800, 1553583555, N'电梯机房', 2, N'1', 55, 1, N'T_ElevatorRoom')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553584567, 1553583800, N'电梯', 3, N'3', 56, 0, N'T_Elevator')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553584613, 1553583761, N'水箱液位', 3, N'3', 58, 0, N'T_WaterTank')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553584779, 1553583725, N'进线组', 3, N'1', NULL, 1, N'T_IncomingLines')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553584897, 1553584779, N'出线组', 4, N'1', NULL, 0, N'T_OutgoingLines')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553584964, 1553583725, N'变压器', 3, N'3', 51, 0, N'T_Transformer')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553585007, 1553583725, N'电容柜', 3, N'3', 52, 0, N'T_CapacitorCabinet')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553585041, 1553583725, N'次总', 3, N'3', 53, 0, N'T_SubTotal')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553590466, 1553583661, N'冷水机组', 3, N'3', 60, 0, N'T_WaterChillingUnit')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1553590501, 1553583661, N'锅炉', 3, N'3', 61, 0, N'T_Boiler')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1554998702, 1553583761, N'水泵房控制柜', 3, N'3', NULL, 0, N'T_cabinet')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555064798, 1553583661, N'冷冻系统', 3, N'1', NULL, 1, N'T_ChillsSystem')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555064831, 1553583661, N'冷却系统', 3, N'1', NULL, 1, N'T_CoolingSystem')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555064962, 1553583661, N'制冷机组', 3, N'1', NULL, 0, N'T_ChilledWater')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555076923, 1553583761, N'水泵房水泵', 3, N'3', 44, 0, N'T_Pump')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555079269, 1553583761, N'水泵变频器', 3, N'3', NULL, 0, N'T_Sensorpump')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555080569, 1553583661, N'冷冻泵', 3, N'3', 44, 0, N'T_Pump_D')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555080638, 1553583661, N'冷冻阀', 3, N'3', NULL, 0, N'T_Valve_D')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555080807, 1553583661, N'旁通阀', 3, N'3', NULL, 0, N'T_Bypass')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555080857, 1553583661, N'集(分)水器', 3, N'3', NULL, 0, N'T_ColSep')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555081009, 1553583661, N'集水器支管', 3, N'3', NULL, 0, N'T_Collector_P')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555081037, 1553583661, N'冷却水', 3, N'3', NULL, 0, N'T_CoolingWater')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555081062, 1553583661, N'主机柜', 3, N'3', NULL, 0, N'T_Host')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555081084, 1553583661, N'风机', 3, N'3', 45, 0, N'T_Fan')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555081878, 1553583661, N'主机柜', 3, N'1', NULL, 0, N'T_Host')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555333163, 1553583761, N'温湿度传感器', 3, N'3', 39, 0, N'T_THsensor')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555333445, 1553583761, N'海峰水计量', 3, N'3', 38, 0, N'T_Wsensor')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555333482, 1553583761, N'压力传感器', 3, N'3', 39, 0, N'T_Fsensor')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1555928770, 1553583661, N'冷冻水', 3, N'3', NULL, 0, N'T_ColdWater')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1556027341, 1553583761, N'水浸传感器', 3, N'3', 39, 0, N'T_WaterAlarm')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1574072615, 1555064798, N'冷冻泵', 4, N'1', NULL, 0, N'T_Pump_D')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1574072635, 1555064831, N'冷却泵', 4, N'1', NULL, 0, N'T_Pump_Q')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1574072652, 1555064831, N'冷却塔', 4, N'1', NULL, 0, N'T_Fan')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1589727827, 1553583661, N'冷却泵', 3, N'3', 44, 0, N'T_Pump_Q')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1597761125, 1553583661, N'冷却阀', 3, N'3', NULL, 0, N'T_Valve_Q')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (3, 1598219502, 1553583725, N'变电所回路', 3, N'3', 50, 0, N'T_Cuit')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553595477, 0, N'大学', 1, N'1', 1, 1, N'T_University')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553595501, 1553595477, N'校区', 2, N'1', 2, 1, N'T_Campus')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553595564, 1553595501, N'楼群', 3, N'1', 6, 1, N'T_Buildings')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553595584, 1553595564, N'楼宇', 4, N'1', 7, 1, N'T_Building')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553595729, 1553595584, N'楼层', 5, N'1', 8, 1, N'T_Floor')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553595760, 1553595584, N'区域', 5, N'1', 9, 0, N'T_Area')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553595779, 1553595729, N'房间', 6, N'1', 10, 0, N'T_Room')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553595805, 1553595729, N'宿舍', 6, N'1', 11, 0, N'T_Dorm')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553596055, 1553595477, N'单位', 2, N'1', 13, 1, N'T_College')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553596125, 1553596055, N'教职工', 3, N'1', 3, 0, N'T_Teacher')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1553596146, 1553596055, N'学生', 3, N'1', 4, 0, N'T_Student')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (4, 1596015041, 1553595501, N'学院', 3, N'1', NULL, 0, N'T_C')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (5, 1553597893, 0, N'医院', 1, N'1', 14, 1, N'T_Hospital')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (5, 1553597976, 1553597893, N'楼宇', 2, N'1', 18, 1, N'T_Building')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (5, 1553598004, 1553597976, N'楼层', 3, N'1', 19, 1, N'T_Floor')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (5, 1553598020, 1553597976, N'区域', 3, N'1', 20, 0, N'T_Area')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (5, 1553598034, 1553598004, N'房间', 4, N'1', 21, 0, N'T_Room')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (5, 1553598085, 1553597893, N'单位', 2, N'1', 23, 1, N'T_Unit')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (5, 1553598106, 1553598085, N'医生', 3, N'1', 15, 0, N'T_Doctor')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (5, 1553598128, 1553598085, N'患者', 3, N'1', 16, 0, N'T_Patient')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (6, 1553598162, 0, N'园区', 1, N'1', 24, 1, N'T_Park')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (6, 1553598182, 1553598162, N'建筑', 2, N'1', 26, 1, N'T_Building')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (6, 1553598250, 1553598182, N'区域', 3, N'1', 27, 0, N'T_Area')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (6, 1553598272, 1553598162, N'单位', 2, N'1', 25, 0, N'T_Unit')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (7, 1553598330, 0, N'省级', 1, N'1', 29, 1, N'T_Province')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (7, 1553609438, 1553598330, N'市级', 2, N'1', 30, 1, N'T_City')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (7, 1553609587, 1553609438, N'（区）县', 3, N'1', 31, 1, N'T_District')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (7, 1553609935, 1553609587, N'公共建筑', 4, N'1', 32, 0, N'T_Building')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (8, 1553609631, 0, N'省级', 1, N'1', 33, 1, N'T_Province')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (8, 1553609676, 1553609631, N'市级', 2, N'1', 34, 1, N'T_City')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (8, 1553609712, 1553609676, N'（区）县', 3, N'1', 35, 1, N'T_District')
INSERT [dbo].[tb_B_DictTreeModel] ([F_DictTreeNo], [F_GroupID], [F_ParentID], [F_GroupName], [F_GroupDepth], [F_ObjectGroup], [F_ObjectTypeID], [F_IsHasChild], [F_GroupTag]) VALUES (8, 1553610050, 1553609712, N'公共机构', 4, N'1', 36, 0, N'T_PublicInstitution')
/****** Object:  Table [dbo].[tb_B_DictTreeProperty]    Script Date: 09/15/2020 14:17:21 ******/
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553442921, 1553610000, 2, NULL, 0, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553442921, 1553610001, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553442921, 1553610003, 1, NULL, 0, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553442921, 1553610013, 4, 4, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553442921, 1553610014, 5, 4, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553442921, 1553610015, 6, 4, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443211, 1553610001, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443211, 1553610005, 1, NULL, 0, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443211, 1553610013, 3, 4, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443211, 1553610014, 4, 4, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443211, 1553610015, 5, 4, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443253, 1553610001, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443253, 1553610011, 1, NULL, 0, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443303, 1553610001, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443303, 1553610007, 1, NULL, 0, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443377, 1553610001, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553443377, 1553610009, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553957261, 1553610001, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (1, 1553957261, 1553610007, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553610986, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553611080, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553611367, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553611369, 5, NULL, 0, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553611371, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553611373, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553612236, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553612499, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553612500, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553612501, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553612502, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553612503, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553612505, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553612511, 15, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447426, 1553613366, 16, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553610986, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553611080, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553611288, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553611367, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553611369, 5, NULL, 0, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553611371, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553611373, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553611375, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553611377, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553612236, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553612495, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553612499, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553612500, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553612501, 15, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553612502, 16, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553612503, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553612505, 17, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553612509, 18, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553612511, 19, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447732, 1553613366, 20, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553610986, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553611080, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553611288, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553611367, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553611369, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553611371, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553611373, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553612497, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553612499, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553612500, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553612501, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553612502, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553612503, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553612505, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553612507, 15, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553612511, 16, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553447757, 1553613366, 17, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448747, 1553616961, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448836, 1553617226, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448836, 1553617273, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448836, 1553617305, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448836, 1553617357, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448836, 1553617426, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553617527, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553617562, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553617687, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553617731, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553617792, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553617885, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553617939, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553617976, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553618041, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553618075, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553618275, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553618299, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553618328, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1553618354, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448907, 1559297563, 17, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448955, 1553618520, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448955, 1553618546, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448955, 1553618679, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448955, 1553618725, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448955, 1553618788, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448955, 1553618810, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448955, 1553618837, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448955, 1553618861, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448980, 1553694628, 1, NULL, 1, N'', NULL)
GO
print 'Processed 100 total records'
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448980, 1553694643, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448980, 1553694722, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448980, 1553694741, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448980, 1553694773, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448980, 1553694812, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448980, 1553697211, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553448980, 1553697568, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553697811, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553697833, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553697939, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553697986, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553698017, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553698110, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553698164, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553698246, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553698287, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553698348, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553698378, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553698405, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1553595137, 1553698429, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1559573406, 1553617527, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1559573406, 1553617562, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1559573406, 1553617731, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1559573406, 1553617792, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (2, 1559573406, 1553617885, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1553698700, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1553698970, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1553699228, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1553699294, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1553699346, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1553699380, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1553699399, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1553699422, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1553699450, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1553699497, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1555151120, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1555154507, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583661, 1598712578, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583725, 1553700617, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583725, 1553700874, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583725, 1553700965, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583725, 1553701000, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583725, 1553701020, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583725, 1553701051, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583725, 1553701076, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583725, 1553701097, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583725, 1577904482, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583761, 1553700636, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583761, 1553702044, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583761, 1553702071, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583761, 1553702093, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583761, 1553702115, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583761, 1553702141, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583761, 1553702167, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583761, 1553702194, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583761, 1554068879, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583800, 1553700655, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583800, 1553703582, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583800, 1553703611, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583800, 1553703643, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583800, 1553703726, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583800, 1553703754, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553583800, 1553703902, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553705776, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553705802, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553706114, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553706168, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553706284, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553706368, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553706424, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553706446, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553706513, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553706550, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553706584, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584567, 1553706612, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584613, 1553702949, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584613, 1553702987, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584964, 1553701296, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584964, 1553701337, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584964, 1553701428, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584964, 1553701469, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584964, 1553701528, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584964, 1553701551, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584964, 1553701586, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553584964, 1590681218, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553585007, 1553701856, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553585007, 1553701907, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553585041, 1553702743, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1553699722, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1553699764, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1553699802, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1553700056, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1556026419, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1593794840, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597757571, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597757662, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597757721, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597757796, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597757931, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597757982, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597758470, 15, NULL, 1, N'', NULL)
GO
print 'Processed 200 total records'
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597758890, 16, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597758932, 17, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597759041, 18, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597759163, 19, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590466, 1597759205, 20, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590501, 1553700121, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590501, 1553700273, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590501, 1553700354, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590501, 1553700477, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1553590501, 1553700527, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555076923, 1556014095, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555076923, 1556014146, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555076923, 1556014180, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1556026419, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759574, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759617, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759656, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759692, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759722, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759747, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759827, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759885, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759908, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759931, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597759957, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080569, 1597761770, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1556026419, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597760535, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761262, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761315, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761341, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761363, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761378, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761637, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761662, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761677, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761728, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761755, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080638, 1597761770, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1556026419, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597760535, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761262, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761315, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761341, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761363, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761378, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761637, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761662, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761677, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761728, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761755, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080807, 1597761770, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1556026419, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597760535, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761262, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761315, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761341, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761363, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761378, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761637, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761662, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761677, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761728, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761755, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555080857, 1597761770, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1556026419, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597760535, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761262, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761315, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761341, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761363, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761378, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761637, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761662, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761677, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761728, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761755, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081009, 1597761770, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1556026419, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597760535, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761262, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761315, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761341, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761363, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761378, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761637, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761662, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761677, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761728, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761755, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081037, 1597761770, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081062, 1556026419, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1556026419, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597760535, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761262, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761315, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761341, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761363, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761378, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761637, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761662, 9, NULL, 1, N'', NULL)
GO
print 'Processed 300 total records'
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761677, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761728, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761755, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555081084, 1597761770, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555333163, 1556014229, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555333163, 1556014252, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555333445, 1556014540, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555333482, 1555680787, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1555928770, 1556026419, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1556027341, 1556027383, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759574, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759617, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759656, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759692, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759722, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759747, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759827, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759885, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759908, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759931, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597759957, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597760278, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1589727827, 1597761770, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597760535, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761262, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761315, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761341, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761363, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761378, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761637, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761662, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761677, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761728, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761755, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761770, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (3, 1597761125, 1597761935, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706700, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706703, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706705, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706707, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706709, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706710, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706711, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706713, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706715, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706717, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595477, 1553706719, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595501, 1553755913, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595501, 1553755949, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595501, 1553755989, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595501, 1555161755, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595501, 1556207301, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595501, 1590413050, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763863, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763864, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763865, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763866, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763867, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763868, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763869, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763870, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763871, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763872, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763873, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763874, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763875, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763876, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763877, 15, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763878, 16, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763879, 17, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763880, 18, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763881, 19, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763882, 20, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763883, 21, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763884, 22, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1553763885, 23, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595564, 1590413233, 24, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553756010, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553756013, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553756015, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553756017, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553756019, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553756021, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553756023, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553756025, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553756027, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553756029, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763806, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763835, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763837, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763839, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763841, 15, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763843, 16, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763845, 17, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763847, 18, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763849, 19, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763851, 20, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763853, 21, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763855, 22, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1553763859, 23, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595584, 1576834098, 24, NULL, 1, N'', NULL)
GO
print 'Processed 400 total records'
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595779, 1553763889, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595779, 1553763891, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595779, 1553763893, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595779, 1553763895, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595805, 1553763897, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595805, 1553763899, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595805, 1553763901, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553595805, 1553763903, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596055, 1553763907, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596055, 1553763909, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596055, 1553767142, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596055, 1553767144, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596055, 1553767146, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596055, 1553767148, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596125, 1553767160, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596125, 1553767162, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596125, 1553767163, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596125, 1553767164, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596125, 1553767165, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596125, 1553767166, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596125, 1553767168, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596125, 1553767170, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596146, 1553767180, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596146, 1553767182, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596146, 1553767184, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596146, 1553767186, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596146, 1553767188, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596146, 1553767190, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (4, 1553596146, 1553767192, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597893, 1553767200, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597893, 1553767202, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597893, 1553767204, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597893, 1553767206, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597893, 1553767208, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597893, 1553767210, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597893, 1553767212, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597893, 1553767214, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597893, 1553767216, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597893, 1553767218, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767260, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767261, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767262, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767263, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767264, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767265, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767266, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767267, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767268, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767269, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767270, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767271, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767272, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767273, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767274, 15, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767275, 16, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767276, 17, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767277, 18, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767278, 19, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767279, 20, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767280, 21, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767281, 22, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553597976, 1553767282, 23, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553598034, 1553767300, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553598034, 1553767301, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553598034, 1553767302, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553598034, 1553767303, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553598085, 1553767401, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553598085, 1553767402, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553598085, 1553767403, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (5, 1553598085, 1553767404, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598162, 1553780275, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598162, 1553780464, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598162, 1553780491, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598162, 1553780572, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598162, 1553780703, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598162, 1591612831, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780705, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780707, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780708, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780709, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780710, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780711, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780713, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780714, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780715, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780716, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780717, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780718, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780719, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780720, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780721, 15, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780722, 16, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780723, 17, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780724, 18, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780725, 19, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780726, 20, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1553780727, 21, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598182, 1591613120, 22, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598250, 1591613188, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598272, 1553782022, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598272, 1553782057, 2, NULL, 1, N'', NULL)
GO
print 'Processed 500 total records'
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598272, 1553782210, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598272, 1553782263, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (6, 1553598272, 1553782314, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553598330, 1553782598, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553598330, 1553782695, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553598330, 1553782792, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609438, 1553782899, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609438, 1553782922, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609438, 1553782944, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609587, 1553783038, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783039, 0, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783040, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783041, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783042, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783043, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783044, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783045, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783046, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783047, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783048, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783049, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783050, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783051, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783052, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783053, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783054, 15, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783055, 16, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783056, 17, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783057, 18, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783058, 19, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783059, 20, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783060, 21, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783061, 22, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783062, 23, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783063, 24, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783064, 25, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783065, 26, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783066, 27, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783067, 28, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783068, 29, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783069, 30, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783070, 31, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (7, 1553609935, 1553783071, 32, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553609631, 1553784245, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553609676, 1553784288, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553609712, 1553784322, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553784466, 1, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553785733, 2, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553785765, 3, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553785862, 4, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553785985, 5, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553786025, 6, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553786063, 7, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553786109, 8, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553797373, 9, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553797410, 10, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553797479, 11, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553797579, 12, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553797690, 13, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553797716, 14, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553797750, 15, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553797773, 16, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553797843, 17, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553798060, 18, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553798111, 19, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553798160, 20, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553798268, 21, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553798324, 22, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1553798406, 23, NULL, 1, N'', NULL)
INSERT [dbo].[tb_B_DictTreeProperty] ([F_DictTreeNo], [F_GroupID], [F_PropertyID], [F_OrderNum], [F_DecimalDigits], [F_IsNull], [F_Examples], [F_PortraitID]) VALUES (8, 1553610050, 1592658384, 24, NULL, 1, N'', NULL)
/****** Object:  Table [dbo].[tb_E_CityWeatherCode]    Script Date: 09/15/2020 14:17:21 ******/
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101010100', N'北京市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101020100', N'上海市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101030100', N'天津', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101040100', N'重庆', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101050101', N'哈尔滨', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101050201', N'齐齐哈尔', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101050301', N'牡丹江', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101050401', N'佳木斯', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101050501', N'绥化', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101050601', N'黑河', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101060101', N'长春', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101060201', N'吉林', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101060301', N'延吉', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101060401', N'四平', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101060501', N'通化', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101070101', N'沈阳', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101070201', N'大连', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101070301', N'鞍山', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101070401', N'抚顺', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101070501', N'本溪', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101070601', N'丹东', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101070701', N'锦州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101080101', N'呼和浩特', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101080201', N'包头', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101080301', N'乌海', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101080401', N'集宁', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101080501', N'通辽', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101080601', N'赤峰', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101080701', N'鄂尔多斯', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101090101', N'石家庄', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101090201', N'保定', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101090301', N'张家口', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101090402', N'承德', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101090501', N'唐山', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101090601', N'廊坊', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101090701', N'沧州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101090801', N'衡水', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101090901', N'邢台', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101091001', N'邯郸', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101091101', N'秦皇岛', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101100101', N'太原', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101100201', N'大同', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101100301', N'阳泉', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101100401', N'晋中', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101100501', N'长治', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101100601', N'晋城', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101100701', N'临汾', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101100801', N'运城', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101100901', N'朔州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101101001', N'忻州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101101100', N'吕梁', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101110101', N'西安', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101110200', N'咸阳', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101110300', N'延安', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101110401', N'榆林', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101110501', N'渭南', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101110601', N'商洛', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101110701', N'安康', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101110801', N'汉中', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101110901', N'宝鸡', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101111001', N'铜川', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101120101', N'济南', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101120201', N'青岛', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101120301', N'淄博', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101120401', N'德州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101120501', N'烟台', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101120601', N'潍坊', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101120701', N'济宁', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101120801', N'泰安', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101120901', N'临沂', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101121001', N'菏泽', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101121101', N'滨州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101121201', N'东营', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101121301', N'威海', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101121401', N'枣庄', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101121501', N'日照', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101121601', N'莱芜', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101121701', N'聊城', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101190101', N'南京市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101190201', N'无锡市', 1)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101190301', N'镇江市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101190401', N'苏州市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101190501', N'南通市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101190601', N'扬州市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101190701', N'盐城市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101190801', N'徐州市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101190901', N'淮安市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101191001', N'连云港市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101191101', N'常州市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101191201', N'泰州市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101191301', N'宿迁市', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101210101', N'杭州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101210201', N'湖州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101210301', N'嘉兴', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101210401', N'宁波', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101210501', N'绍兴', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101210601', N'台州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101210701', N'温州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101210801', N'丽水', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101210901', N'金华', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101211001', N'衢州', 0)
GO
print 'Processed 100 total records'
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101211101', N'舟山', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101220101', N'合肥', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101220201', N'蚌埠', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101220301', N'芜湖', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101220401', N'淮南', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101220501', N'马鞍山', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101220601', N'安庆', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101220701', N'宿州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101220801', N'阜阳', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101220901', N'亳州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101221001', N'黄山站', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101221101', N'滁州', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101221201', N'淮北', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101221301', N'铜陵', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101221401', N'宣城', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101221501', N'六安', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101221601', N'巢湖', 0)
INSERT [dbo].[tb_E_CityWeatherCode] ([F_CityCode], [F_CityName], [F_Status]) VALUES (N'101221701', N'池州', 0)

USE [msdb]
GO

/****** Object:  Job [数据同步计算任务]    Script Date: 09/30/2020 09:38:49 ******/
BEGIN TRANSACTION
DECLARE @ReturnCode INT
SELECT @ReturnCode = 0
/****** Object:  JobCategory [[Uncategorized (Local)]]]    Script Date: 09/30/2020 09:38:49 ******/
IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
BEGIN
EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

END

DECLARE @jobId BINARY(16)
EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=N'数据同步计算任务', 
		@enabled=1, 
		@notify_level_eventlog=0, 
		@notify_level_email=0, 
		@notify_level_netsend=0, 
		@notify_level_page=0, 
		@delete_level=0, 
		@description=N'无描述。', 
		@category_name=N'[Uncategorized (Local)]', 
		@owner_login_name=N'sa', @job_id = @jobId OUTPUT
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
/****** Object:  Step [执行同步脚本]    Script Date: 09/30/2020 09:38:49 ******/
EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'执行同步脚本', 
		@step_id=1, 
		@cmdexec_success_code=0, 
		@on_success_action=1, 
		@on_success_step_id=0, 
		@on_fail_action=2, 
		@on_fail_step_id=0, 
		@retry_attempts=0, 
		@retry_interval=0, 
		@os_run_priority=0, @subsystem=N'TSQL', 
		@command=N'exec proc_C_SynchroEnergyData', 
		@database_name=N'Things', 
		@flags=0
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'脚本执行时钟', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=8, 
		@freq_subday_interval=1, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20200115, 
		@active_end_date=99991231, 
		@active_start_time=0, 
		@active_end_time=235959, 
		@schedule_uid=N'9deb6ec5-28ba-4ab0-98d6-1f7d5c4ac9a1'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
COMMIT TRANSACTION
GOTO EndSave
QuitWithRollback:
    IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
EndSave:

GO
